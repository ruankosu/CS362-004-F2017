
----------------- Testing Card: adventurer ----------------
Running 1000 tests of random state, player number, and card counts

TEST 1: Play take 2 treasury cards from discard.
TEST 2: Adventurer cost test

TEST 3: No state change should occur to the victory card piles and kingdom card piles

 >>>>> adventurer: Test 1 completed with 0 passes. <<<<<
 >>>>> adventurer: Test 2 completed with 1000 passes. <<<<<
File 'dominion.c'
Lines executed:28.29% of 562
Branches executed:34.77% of 417
Taken at least once:20.14% of 417
Calls executed:17.89% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 57507 returned 100% blocks executed 100%
    57507:    8:int compare(const void* a, const void* b) {
    57507:    8-block  0
    57507:    9:  if (*(int*)a > *(int*)b)
    57507:    9-block  0
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     5814:   10:    return 1;
     5814:   10-block  0
    51693:   11:  if (*(int*)a < *(int*)b)
    51693:   11-block  0
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
    15261:   12:    return -1;
    15261:   12-block  0
    36432:   13:  return 0;
    36432:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 1000 returned 100% blocks executed 89%
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     1000:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
     1000:   44-block  0
call    0 returned 100%
     1000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1000:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11000:   57:  for (i = 0; i < 10; i++)
     1000:   57-block  0
    10000:   57-block  1
    11000:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   110000:   59:      for (j = 0; j < 10; j++)
    10000:   59-block  0
   100000:   59-block  1
   110000:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   100000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   100000:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
    90000:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1000:   73:  if (numPlayers == 2)
     1000:   73-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   74:    {
      354:   75:      state->supplyCount[curse] = 10;
      354:   75-block  0
        -:   76:    }
      646:   77:  else if (numPlayers == 3)
      646:   77-block  0
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:   78:    {
      328:   79:      state->supplyCount[curse] = 20;
      328:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
      318:   83:      state->supplyCount[curse] = 30;
      318:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1000:   87:  if (numPlayers == 2)
     1000:   87-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   88:    {
      354:   89:      state->supplyCount[estate] = 8;
      354:   90:      state->supplyCount[duchy] = 8;
      354:   91:      state->supplyCount[province] = 8;
      354:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
      646:   95:      state->supplyCount[estate] = 12;
      646:   96:      state->supplyCount[duchy] = 12;
      646:   97:      state->supplyCount[province] = 12;
      646:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  102:  state->supplyCount[silver] = 40;
     1000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    21000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     1000:  106-block  0
    20000:  106-block  1
    21000:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   165000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
    20000:  108-block  0
   145000:  108-block  1
   165000:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   155000:  110:	  if (kingdomCards[j] == i)
   155000:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    10000:  113-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10000:  113-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    10000:  122:		  state->supplyCount[i] = 10;
    10000:  122-block  0
        -:  123:		}
    10000:  124:	      break;
    10000:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   145000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3964:  138:  for (i = 0; i < numPlayers; i++)
     1000:  138-block  0
     2964:  138-block  1
     3964:  138-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     2964:  140:      state->deckCount[i] = 0;
    11856:  141:      for (j = 0; j < 3; j++)
     2964:  141-block  0
     8892:  141-block  1
    11856:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     8892:  143:	  state->deck[i][j] = estate;
     8892:  144:	  state->deckCount[i]++;
        -:  145:	}
    23712:  146:      for (j = 3; j < 10; j++)
     2964:  146-block  0
    20748:  146-block  1
    23712:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    20748:  148:	  state->deck[i][j] = copper;
    20748:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3964:  154:  for (i = 0; i < numPlayers; i++)
     1000:  154-block  0
     2964:  154-block  1
     3964:  154-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
     2964:  156:      if ( shuffle(i, state) < 0 )
     2964:  156-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3964:  163:  for (i = 0; i < numPlayers; i++)
     1000:  163-block  0
     2964:  163-block  1
     3964:  163-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2964:  166:      state->handCount[i] = 0;
     2964:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    28000:  176:  for (i = 0; i <= treasure_map; i++)
     1000:  176-block  0
    27000:  176-block  1
    28000:  176-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    27000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1000:  182:  state->outpostPlayed = 0;
     1000:  183:  state->phase = 0;
     1000:  184:  state->numActions = 1;
     1000:  185:  state->numBuys = 1;
     1000:  186:  state->playedCardCount = 0;
     1000:  187:  state->whoseTurn = 0;
     1000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  192:  for (it = 0; it < 5; it++){
     1000:  192-block  0
     6000:  192-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5000:  193:    drawCard(state->whoseTurn, state);
     5000:  193-block  0
call    0 returned 100%
        -:  194:  }
        -:  195:
     1000:  196:  updateCoins(state->whoseTurn, state, 0);
     1000:  196-block  0
call    0 returned 100%
        -:  197:
     1000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 4956 returned 100% blocks executed 100%
     4956:  201:int shuffle(int player, struct gameState *state) {
     4956:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     4956:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     4956:  209:  if (state->deckCount[player] < 1)
     4956:  209-block  0
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
     1058:  210:    return -1;
     1058:  210-block  0
     3898:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
     3898:  211-block  0
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    40496:  214:  while (state->deckCount[player] > 0) {
    40496:  214-block  0
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
    36598:  215:    card = floor(Random() * state->deckCount[player]);
    36598:  215-block  0
call    0 returned 100%
    36598:  216:    newDeck[newDeckPos] = state->deck[player][card];
    36598:  217:    newDeckPos++;
   119532:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    82934:  218-block  0
   119532:  218-block  1
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
    82934:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    36598:  221:    state->deckCount[player]--;
    36598:  221-block  0
        -:  222:  }
    40496:  223:  for (i = 0; i < newDeckPos; i++) {
     3898:  223-block  0
    36598:  223-block  1
    40496:  223-block  2
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
    36598:  224:    state->deck[player][i] = newDeck[i];
    36598:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4956:  228:  return 0;
     3898:  228-block  0
     4956:  228-block  1
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
        -:  270:}
        -:  271:
function buyCard called 1000 returned 100% blocks executed 86%
     2000:  272:int buyCard(int supplyPos, struct gameState *state) {
     1000:  272-block  0
     1000:  272-block  1
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     1000:  280:  who = state->whoseTurn;
        -:  281:
     1000:  282:  if (state->numBuys < 1){
     1000:  282-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
     1000:  286:  } else if (supplyCount(supplyPos, state) <1){
     1000:  286-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
     1000:  290:  } else if (state->coins < getCost(supplyPos)){
     1000:  290-block  0
call    0 returned 100%
branch  1 taken 52% (fallthrough)
branch  2 taken 48%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      517:  293:    return -1;
      517:  293-block  0
        -:  294:  } else {
      483:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
      483:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
      483:  297-block  0
call    0 returned 100%
        -:  298:  
      483:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
      483:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
      483:  308:  return 0;
      483:  308-block  0
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 1483 returned 100% blocks executed 100%
     1483:  320:int supplyCount(int card, struct gameState *state) {
     1483:  320-block  0
     1483:  321:  return state->supplyCount[card];
     1483:  321-block  0
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  324-block  0
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
    $$$$$:  328-block  1
    $$$$$:  328-block  2
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
    $$$$$:  333-block  1
    $$$$$:  333-block  2
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
    $$$$$:  338-block  1
    $$$$$:  338-block  2
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
        -:  341:    }
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
        -:  344:}
        -:  345:
function whoseTurn called 1000 returned 100% blocks executed 100%
     1000:  346:int whoseTurn(struct gameState *state) {
     1000:  346-block  0
     1000:  347:  return state->whoseTurn;
     1000:  347-block  0
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
    $$$$$:  356-block  1
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
    $$$$$:  380-block  1
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
    $$$$$:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
    $$$$$:  395-block  0
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
    $$$$$:  397-block  0
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
    $$$$$:  402-block  0
    $$$$$:  402-block  1
    $$$$$:  402-block  2
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    $$$$$:  406-block  0
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    $$$$$:  414-block  0
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
    $$$$$:  422-block  1
    $$$$$:  422-block  2
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
    $$$$$:  433-block  1
    $$$$$:  433-block  2
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
    $$$$$:  444-block  1
    $$$$$:  444-block  2
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
    $$$$$:  464-block  1
    $$$$$:  464-block  2
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
    $$$$$:  479-block  1
    $$$$$:  479-block  2
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
    $$$$$:  500-block  1
    $$$$$:  500-block  2
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
    $$$$$:  510-block  1
    $$$$$:  510-block  2
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
        -:  523:}
        -:  524:
function drawCard called 15768 returned 100% blocks executed 100%
    15768:  525:int drawCard(int player, struct gameState *state)
    15768:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
    15768:  528:  if (state->deckCount[player] <= 0){//Deck is empty
    15768:  528-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     7954:  533:    for (i = 0; i < state->discardCount[player];i++){
      996:  533-block  0
     6958:  533-block  1
     7954:  533-block  2
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
     6958:  534:      state->deck[player][i] = state->discard[player][i];
     6958:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      996:  538:    state->deckCount[player] = state->discardCount[player];
      996:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      996:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
      996:  542-block  0
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      996:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      996:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      996:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      996:  559:    if (deckCounter == 0)
      996:  559-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       62:  560:      return -1;
       62:  560-block  0
        -:  561:
      934:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      934:  563:    state->deckCount[player]--;
      934:  564:    state->handCount[player]++;//Increment hand count
      934:  564-block  0
        -:  565:  }
        -:  566:
        -:  567:  else{
    14772:  568:    int count = state->handCount[player];//Get current hand count for player
    14772:  568-block  0
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    14772:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    14772:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    14772:  576:    state->deckCount[player]--;
    14772:  577:    state->handCount[player]++;//Increment hand count
    14772:  577-block  0
        -:  578:  }
        -:  579:
    15706:  580:  return 0;
    15706:  580-block  0
        -:  581:}
        -:  582:
function getCost called 1483 returned 100% blocks executed 10%
     1483:  583:int getCost(int cardNumber)
     1483:  583-block  0
        -:  584:{
     1483:  585:  switch( cardNumber ) 
     1483:  585-block  0
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 100%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
        -:  601:    case adventurer:
     1483:  602:      return 6;
     1483:  602-block  0
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
        -:  644:}
        -:  645:
        -:  646:/* Function implementation of 5 player cards */
function adventurerFunc called 1000 returned 100% blocks executed 93%
     1000:  647:int adventurerFunc(int currentPlayer, struct gameState *state) {
     1000:  647-block  0
     1000:  648:  int drawntreasure = 0;
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];
     1000:  651:  int z=0;
        -:  652:
    11768:  653:  while(drawntreasure <= 2) {
     1000:  653-block  0
    11768:  653-block  1
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
    10768:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    10768:  654-block  0
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
      996:  655:      shuffle(currentPlayer, state);
      996:  655-block  0
call    0 returned 100%
        -:  656:    }
    10768:  657:    drawCard(currentPlayer, state);
    10768:  657-block  0
call    0 returned 100%
    10768:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    10768:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
     9721:  659-block  0
branch  2 taken 91% (fallthrough)
branch  3 taken 9%
     8800:  659-block  1
branch  4 taken 12% (fallthrough)
branch  5 taken 88%
     3000:  660:      drawntreasure++;
     3000:  660-block  0
        -:  661:    else{
     7768:  662:      temphand[z]=cardDrawn;
     7768:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     7768:  663-block  0
        -:  664:      // z++;
        -:  665:    }
        -:  666:  }
     1000:  667:  while(z-1 >= 0){
     1000:  667-block  0
     1000:  667-block  1
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:    z=z-1;
    $$$$$:  669-block  0
        -:  670:  }
     1000:  671:  return 0;
     1000:  671-block  0
        -:  672:}
        -:  673:
function smithyFunc called 0 returned 0% blocks executed 0%
    #####:  674:int smithyFunc(int currentPlayer, int handPos, struct gameState *state) {
    $$$$$:  674-block  0
        -:  675:  int i;
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 4; i++)
    $$$$$:  677-block  0
    $$$$$:  677-block  1
branch  0 never executed
branch  1 never executed
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
    $$$$$:  679-block  0
call    0 never executed
        -:  680:  }
        -:  681:  
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
    $$$$$:  683-block  0
call    0 never executed
        -:  684:
    #####:  685:  return 0;
        -:  686:}
        -:  687:
function councilRoomFunc called 0 returned 0% blocks executed 0%
    #####:  688:int councilRoomFunc(int currentPlayer, int handPos, struct gameState *state) {
    $$$$$:  688-block  0
        -:  689:  int i;
        -:  690:  //+4 Cards
    #####:  691:  for (i = 1; i < 4; i++)
    $$$$$:  691-block  0
    $$$$$:  691-block  1
branch  0 never executed
branch  1 never executed
        -:  692:  {
    #####:  693:    drawCard(currentPlayer, state);
    $$$$$:  693-block  0
call    0 never executed
        -:  694:  }
        -:  695:  
        -:  696:  //+1 Buy
    #####:  697:  state->numBuys++;
        -:  698:  
        -:  699:  //Each other player draws a card
    #####:  700:  for (i = 0; i <= state->numPlayers; i++)
    $$$$$:  700-block  0
    $$$$$:  700-block  1
    $$$$$:  700-block  2
branch  0 never executed
branch  1 never executed
        -:  701:  {
    #####:  702:    if ( i != currentPlayer )
    $$$$$:  702-block  0
branch  0 never executed
branch  1 never executed
        -:  703:      {
    #####:  704:        drawCard(i, state);
    $$$$$:  704-block  0
call    0 never executed
        -:  705:      }
        -:  706:  }
        -:  707:  
        -:  708:  //put played card in played card pile
    #####:  709:  discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  709-block  0
call    0 never executed
        -:  710:
    #####:  711:  return 0;
        -:  712:}
        -:  713:
function feastFunc called 0 returned 0% blocks executed 0%
    #####:  714:int feastFunc(int currentPlayer, int choice1, struct gameState *state) {
    $$$$$:  714-block  0
        -:  715:  int i;
        -:  716:  int x;
        -:  717:  int temphand[MAX_HAND];
        -:  718:
    #####:  719:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    $$$$$:  719-block  0
    $$$$$:  719-block  1
    $$$$$:  719-block  2
branch  0 never executed
branch  1 never executed
    #####:  720:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  721:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  722:  }
        -:  723:  //Backup hand
        -:  724:
        -:  725:  //Update Coins for Buy
    #####:  726:  updateCoins(currentPlayer, state, 10);
    $$$$$:  726-block  0
call    0 never executed
    #####:  727:  x = 1;//Condition to loop on
    #####:  728:  while( x == 1) {//Buy one card
    $$$$$:  728-block  0
branch  0 never executed
branch  1 never executed
    #####:  729:    if (supplyCount(choice1, state) <= 0){
    $$$$$:  729-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  730:      if (DEBUG)
        -:  731:        printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:      }
        -:  736:    }
    #####:  737:    else if (state->coins < getCost(choice1)){
    $$$$$:  737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  738:      printf("That card is too expensive!\n");
    $$$$$:  738-block  0
call    0 never executed
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:      }
        -:  743:    }
        -:  744:    else{
        -:  745:
        -:  746:      if (DEBUG){
        -:  747:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:      }
        -:  749:
    #####:  750:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  750-block  0
call    0 never executed
    #####:  751:      x = 0;//No more buying cards
        -:  752:
        -:  753:      if (DEBUG){
        -:  754:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:      }
        -:  756:
        -:  757:    }
        -:  758:  }     
        -:  759:
        -:  760:  //Reset Hand
    #####:  761:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  761-block  0
    $$$$$:  761-block  1
    $$$$$:  761-block  2
branch  0 never executed
branch  1 never executed
    #####:  762:    state->hand[currentPlayer][i] = temphand[i];
    #####:  763:    temphand[i] = -1;
        -:  764:  }
        -:  765:  //Reset Hand
        -:  766:
    #####:  767:  return 0;
    $$$$$:  767-block  0
        -:  768:}
        -:  769:
function remodelFunc called 0 returned 0% blocks executed 0%
    #####:  770:int remodelFunc(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state) {
    $$$$$:  770-block  0
        -:  771:  int i;
        -:  772:  int j;
    #####:  773:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:  
    #####:  775:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  775-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:  {
    #####:  777:    return -1;
    $$$$$:  777-block  0
        -:  778:  }
        -:  779:
    #####:  780:  gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  780-block  0
call    0 never executed
        -:  781:
        -:  782:  //discard card from hand
    #####:  783:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  784:
        -:  785:  //discard trashed card
    #####:  786:  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  786-block  0
    $$$$$:  786-block  1
branch  0 never executed
branch  1 never executed
        -:  787:  {
    #####:  788:    if (state->hand[currentPlayer][i] == j)
    $$$$$:  788-block  0
branch  0 never executed
branch  1 never executed
        -:  789:    {
    #####:  790:      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  790-block  0
call    0 never executed
    #####:  791:      break;
        -:  792:    }
        -:  793:  }
    #####:  794:  return 0;
    $$$$$:  794-block  0
        -:  795:}
        -:  796:
function cardEffect called 1000 returned 100% blocks executed 4%
     1000:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
     1000:  797-block  0
        -:  798:{
        -:  799:  int i;
        -:  800:  int j;
        -:  801:  int k;
        -:  802:  //int x;
        -:  803:  int index;
     1000:  804:  int currentPlayer = whoseTurn(state);
     1000:  804-block  0
call    0 returned 100%
     1000:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
     1000:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  //int temphand[MAX_HAND];// moved above the if statement
        -:  809:  //int drawntreasure=0;
        -:  810:  //int cardDrawn;
        -:  811:  //int z = 0;// this is the counter for the temp hand
     1000:  812:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
      378:  813:    nextPlayer = 0;
      378:  813-block  0
        -:  814:  }
        -:  815:  
        -:  816:  //uses switch to select card and perform actions
     1000:  817:  switch( card ) 
     1000:  817-block  0
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  818:  {
        -:  819:    case adventurer:
     1000:  820:      adventurerFunc(currentPlayer, state);
     1000:  820-block  0
call    0 returned 100%
     1000:  821:      break;
        -:  822:			
        -:  823:    case council_room:
    #####:  824:      councilRoomFunc(currentPlayer, handPos, state);
    $$$$$:  824-block  0
call    0 never executed
    #####:  825:      break;
        -:  826:      
        -:  827:    case feast:
    #####:  828:      feastFunc(currentPlayer, choice1, state);
    $$$$$:  828-block  0
call    0 never executed
    #####:  829:      break;     			
        -:  830:			
        -:  831:    case gardens:
    #####:  832:      return -1;
    $$$$$:  832-block  0
        -:  833:			
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  837-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  837-block  1
branch  2 never executed
branch  3 never executed
        -:  838:      {
    #####:  839:        return -1;
    $$$$$:  839-block  0
        -:  840:      }
        -:  841:		
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  842-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  842-block  1
branch  2 never executed
branch  3 never executed
        -:  843:      {
    #####:  844:        return -1;
    $$$$$:  844-block  0
        -:  845:      }
        -:  846:
    #####:  847:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  847-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  848:      {
    #####:  849:        return -1;
    $$$$$:  849-block  0
        -:  850:      }
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  852-block  0
call    0 never executed
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  858-block  0
    $$$$$:  858-block  1
branch  0 never executed
branch  1 never executed
        -:  859:      {
    #####:  860:        if (state->hand[currentPlayer][i] == j)
    $$$$$:  860-block  0
branch  0 never executed
branch  1 never executed
        -:  861:          {
    #####:  862:            discardCard(i, currentPlayer, state, 0);			
    $$$$$:  862-block  0
call    0 never executed
    #####:  863:            break;
        -:  864:          }
        -:  865:      }
        -:  866:			
    #####:  867:      return 0;
    $$$$$:  867-block  0
        -:  868:			
        -:  869:    case remodel:
    #####:  870:      remodelFunc(currentPlayer, choice1, choice2, handPos, state);
    $$$$$:  870-block  0
call    0 never executed
    #####:  871:      break;
        -:  872:		
        -:  873:    case smithy:
    #####:  874:      smithyFunc(currentPlayer, handPos, state);
    $$$$$:  874-block  0
call    0 never executed
    #####:  875:      break;
        -:  876:		
        -:  877:    case village:
        -:  878:      //+1 Card
    #####:  879:      drawCard(currentPlayer, state);
    $$$$$:  879-block  0
call    0 never executed
        -:  880:			
        -:  881:      //+2 Actions
    #####:  882:      state->numActions = state->numActions + 2;
        -:  883:			
        -:  884:      //discard played card from hand
    #####:  885:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  886:      return 0;
        -:  887:		
        -:  888:    case baron:
    #####:  889:      state->numBuys++;//Increase buys by 1!
    #####:  890:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  890-block  0
branch  0 never executed
branch  1 never executed
    #####:  891:        int p = 0;//Iterator for hand!
    #####:  892:        int card_not_discarded = 1;//Flag for discard set!
    #####:  893:        while(card_not_discarded){
    $$$$$:  893-block  0
    $$$$$:  893-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  893-block  2
    #####:  894:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  894-block  0
branch  0 never executed
branch  1 never executed
    #####:  895:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:            state->discardCount[currentPlayer]++;
    #####:  898:            for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  898-block  0
    $$$$$:  898-block  1
    $$$$$:  898-block  2
branch  0 never executed
branch  1 never executed
    #####:  899:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:            }
    #####:  901:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:            state->handCount[currentPlayer]--;
    #####:  903:            card_not_discarded = 0;//Exit the loop
    $$$$$:  903-block  0
        -:  904:          }
    #####:  905:          else if (p > state->handCount[currentPlayer]){
    $$$$$:  905-block  0
branch  0 never executed
branch  1 never executed
        -:  906:            if(DEBUG) {
        -:  907:              printf("No estate cards in your hand, invalid choice\n");
        -:  908:              printf("Must gain an estate if there are any\n");
        -:  909:            }
    #####:  910:            if (supplyCount(estate, state) > 0){
    $$$$$:  910-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  911:              gainCard(estate, state, 0, currentPlayer);
    $$$$$:  911-block  0
call    0 never executed
    #####:  912:              state->supplyCount[estate]--;//Decrement estates
    #####:  913:              if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  914:          isGameOver(state);
    $$$$$:  914-block  0
call    0 never executed
        -:  915:              }
        -:  916:            }
    #####:  917:            card_not_discarded = 0;//Exit the loop
    $$$$$:  917-block  0
        -:  918:          }
        -:  919:                
        -:  920:          else{
    #####:  921:            p++;//Next card
    $$$$$:  921-block  0
        -:  922:          }
        -:  923:        }
        -:  924:      }
        -:  925:
        -:  926:      else{
    #####:  927:        if (supplyCount(estate, state) > 0){
    $$$$$:  927-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  928:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  928-block  0
call    0 never executed
    #####:  929:          state->supplyCount[estate]--;//Decrement Estates
    #####:  930:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  931:            isGameOver(state);
    $$$$$:  931-block  0
call    0 never executed
        -:  932:          }
        -:  933:        }
        -:  934:      }
        -:  935:        
        -:  936:        
    #####:  937:      return 0;
    $$$$$:  937-block  0
        -:  938:		
        -:  939:    case great_hall:
        -:  940:      //+1 Card
    #####:  941:      drawCard(currentPlayer, state);
    $$$$$:  941-block  0
call    0 never executed
        -:  942:			
        -:  943:      //+1 Actions
    #####:  944:      state->numActions++;
        -:  945:			
        -:  946:      //discard card from hand
    #####:  947:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case minion:
        -:  951:      //+1 action
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  955-block  0
call    0 never executed
        -:  956:			
    #####:  957:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  958:      {
    #####:  959:        state->coins = state->coins + 2;
    $$$$$:  959-block  0
        -:  960:      }
        -:  961:			
    #####:  962:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
        -:  963:      {
        -:  964:        //discard hand
    #####:  965:        while(numHandCards(state) > 0)
    $$$$$:  965-block  0
    $$$$$:  965-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  966:          {
    #####:  967:            discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  967-block  0
call    0 never executed
        -:  968:          }
        -:  969:            
        -:  970:        //draw 4
    #####:  971:        for (i = 0; i < 4; i++)
    $$$$$:  971-block  0
    $$$$$:  971-block  1
branch  0 never executed
branch  1 never executed
        -:  972:          {
    #####:  973:            drawCard(currentPlayer, state);
    $$$$$:  973-block  0
call    0 never executed
        -:  974:          }
        -:  975:            
        -:  976:        //other players discard hand and redraw if hand size > 4
    #####:  977:        for (i = 0; i < state->numPlayers; i++)
    $$$$$:  977-block  0
    $$$$$:  977-block  1
    $$$$$:  977-block  2
branch  0 never executed
branch  1 never executed
        -:  978:          {
    #####:  979:            if (i != currentPlayer)
    $$$$$:  979-block  0
branch  0 never executed
branch  1 never executed
        -:  980:        {
    #####:  981:          if ( state->handCount[i] > 4 )
    $$$$$:  981-block  0
branch  0 never executed
branch  1 never executed
        -:  982:            {
        -:  983:              //discard hand
    #####:  984:              while( state->handCount[i] > 0 )
    $$$$$:  984-block  0
    $$$$$:  984-block  1
branch  0 never executed
branch  1 never executed
        -:  985:          {
    #####:  986:            discardCard(handPos, i, state, 0);
    $$$$$:  986-block  0
call    0 never executed
        -:  987:          }
        -:  988:                  
        -:  989:              //draw 4
    #####:  990:              for (j = 0; j < 4; j++)
    $$$$$:  990-block  0
    $$$$$:  990-block  1
branch  0 never executed
branch  1 never executed
        -:  991:          {
    #####:  992:            drawCard(i, state);
    $$$$$:  992-block  0
call    0 never executed
        -:  993:          }
        -:  994:            }
        -:  995:        }
        -:  996:          }
        -:  997:            
        -:  998:      }
    #####:  999:      return 0;
    $$$$$:  999-block  0
        -: 1000:		
        -: 1001:    case steward:
    #####: 1002:      if (choice1 == 1)
    $$$$$: 1002-block  0
branch  0 never executed
branch  1 never executed
        -: 1003:      {
        -: 1004:        //+2 cards
    #####: 1005:        drawCard(currentPlayer, state);
    $$$$$: 1005-block  0
call    0 never executed
    #####: 1006:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1007:      }
    #####: 1008:          else if (choice1 == 2)
    $$$$$: 1008-block  0
branch  0 never executed
branch  1 never executed
        -: 1009:      {
        -: 1010:        //+2 coins
    #####: 1011:        state->coins = state->coins + 2;
    $$$$$: 1011-block  0
        -: 1012:      }
        -: 1013:          else
        -: 1014:      {
        -: 1015:        //trash 2 cards in hand
    #####: 1016:        discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1016-block  0
call    0 never executed
    #####: 1017:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1018:      }
        -: 1019:			
        -: 1020:      //discard card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1021-block  0
call    0 never executed
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case tribute:
    #####: 1025:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    #####: 1026:        if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1026-block  0
branch  0 never executed
branch  1 never executed
    #####: 1027:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1028:          state->deckCount[nextPlayer]--;
    $$$$$: 1028-block  0
        -: 1029:        }
    #####: 1030:        else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1030-block  0
branch  0 never executed
branch  1 never executed
    #####: 1031:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1032:          state->discardCount[nextPlayer]--;
    $$$$$: 1032-block  0
        -: 1033:        }
        -: 1034:        else{
        -: 1035:          //No Card to Reveal
        -: 1036:          if (DEBUG){
        -: 1037:            printf("No cards to reveal\n");
        -: 1038:          }
        -: 1039:        }
        -: 1040:            }
        -: 1041:            
        -: 1042:            else{
    #####: 1043:        if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1043-block  0
branch  0 never executed
branch  1 never executed
    #####: 1044:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1044-block  0
    $$$$$: 1044-block  1
    $$$$$: 1044-block  2
branch  0 never executed
branch  1 never executed
    #####: 1045:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1046:            state->deckCount[nextPlayer]++;
    #####: 1047:            state->discard[nextPlayer][i] = -1;
    #####: 1048:            state->discardCount[nextPlayer]--;
        -: 1049:          }
        -: 1050:                
    #####: 1051:          shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1051-block  0
call    0 never executed
        -: 1052:        } 
    #####: 1053:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:        state->deckCount[nextPlayer]--;
    #####: 1056:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1057:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1058:        state->deckCount[nextPlayer]--;
    $$$$$: 1058-block  0
        -: 1059:            }    
        -: 1060:                
    #####: 1061:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1061-block  0
branch  0 never executed
branch  1 never executed
    #####: 1062:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1063:        state->playedCardCount++;
    #####: 1064:        tributeRevealedCards[1] = -1;
    $$$$$: 1064-block  0
        -: 1065:            }
        -: 1066:
    #####: 1067:            for (i = 0; i <= 2; i ++){
    $$$$$: 1067-block  0
    $$$$$: 1067-block  1
    $$$$$: 1067-block  2
branch  0 never executed
branch  1 never executed
    #####: 1068:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1068-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1068-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1068-block  2
branch  4 never executed
branch  5 never executed
    #####: 1069:          state->coins += 2;
    $$$$$: 1069-block  0
        -: 1070:        }
        -: 1071:              
    #####: 1072:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1072-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1072-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1072-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1072-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1072-block  4
branch  8 never executed
branch  9 never executed
    #####: 1073:          drawCard(currentPlayer, state);
    $$$$$: 1073-block  0
call    0 never executed
    #####: 1074:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1075:        }
        -: 1076:        else{//Action Card
    #####: 1077:          state->numActions = state->numActions + 2;
    $$$$$: 1077-block  0
        -: 1078:        }
        -: 1079:      }
        -: 1080:	    
    #####: 1081:      return 0;
    $$$$$: 1081-block  0
        -: 1082:		
        -: 1083:    case ambassador:
    #####: 1084:      j = 0;		//used to check if player has enough cards to discard
        -: 1085:
    #####: 1086:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1086-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1086-block  1
branch  2 never executed
branch  3 never executed
        -: 1087:      {
    #####: 1088:        return -1;				
    $$$$$: 1088-block  0
        -: 1089:      }
        -: 1090:
    #####: 1091:          if (choice1 == handPos)
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
        -: 1092:      {
    #####: 1093:        return -1;
    $$$$$: 1093-block  0
        -: 1094:      }
        -: 1095:
    #####: 1096:          for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1096-block  0
    $$$$$: 1096-block  1
    $$$$$: 1096-block  2
branch  0 never executed
branch  1 never executed
        -: 1097:      {
    #####: 1098:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1098-block  2
branch  4 never executed
branch  5 never executed
        -: 1099:          {
    #####: 1100:            j++;
    $$$$$: 1100-block  0
        -: 1101:          }
        -: 1102:      }
    #####: 1103:          if (j < choice2)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
        -: 1104:      {
    #####: 1105:        return -1;				
    $$$$$: 1105-block  0
        -: 1106:      }
        -: 1107:
        -: 1108:          if (DEBUG) 
        -: 1109:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1110:
        -: 1111:          //increase supply count for choosen card by amount being discarded
    #####: 1112:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1113:          
        -: 1114:          //each other player gains a copy of revealed card
    #####: 1115:          for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1115-block  0
    $$$$$: 1115-block  1
    $$$$$: 1115-block  2
branch  0 never executed
branch  1 never executed
        -: 1116:      {
    #####: 1117:        if (i != currentPlayer)
    $$$$$: 1117-block  0
branch  0 never executed
branch  1 never executed
        -: 1118:          {
    #####: 1119:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1119-block  0
call    0 never executed
        -: 1120:          }
        -: 1121:      }
        -: 1122:
        -: 1123:          //discard played card from hand
    #####: 1124:          discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1124-block  0
call    0 never executed
        -: 1125:
        -: 1126:          //trash copies of cards returned to supply
    #####: 1127:          for (j = 0; j < choice2; j++)
    $$$$$: 1127-block  0
    $$$$$: 1127-block  1
branch  0 never executed
branch  1 never executed
        -: 1128:      {
    #####: 1129:        for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1129-block  0
    $$$$$: 1129-block  1
    $$$$$: 1129-block  2
branch  0 never executed
branch  1 never executed
        -: 1130:          {
    #####: 1131:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1131-block  0
branch  0 never executed
branch  1 never executed
        -: 1132:        {
    #####: 1133:          discardCard(i, currentPlayer, state, 1);
    $$$$$: 1133-block  0
call    0 never executed
    #####: 1134:          break;
        -: 1135:        }
        -: 1136:          }
        -: 1137:      }			
        -: 1138:
    #####: 1139:      return 0;
    $$$$$: 1139-block  0
        -: 1140:		
        -: 1141:    case cutpurse:
        -: 1142:
    #####: 1143:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1143-block  0
call    0 never executed
    #####: 1144:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1144-block  0
    $$$$$: 1144-block  1
branch  0 never executed
branch  1 never executed
        -: 1145:      {
    #####: 1146:        if (i != currentPlayer)
    $$$$$: 1146-block  0
branch  0 never executed
branch  1 never executed
        -: 1147:          {
    #####: 1148:            for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1148-block  0
    $$$$$: 1148-block  1
    $$$$$: 1148-block  2
branch  0 never executed
branch  1 never executed
        -: 1149:        {
    #####: 1150:          if (state->hand[i][j] == copper)
    $$$$$: 1150-block  0
branch  0 never executed
branch  1 never executed
        -: 1151:            {
    #####: 1152:              discardCard(j, i, state, 0);
    $$$$$: 1152-block  0
call    0 never executed
    #####: 1153:              break;
        -: 1154:            }
    #####: 1155:          if (j == state->handCount[i])
    $$$$$: 1155-block  0
branch  0 never executed
branch  1 never executed
        -: 1156:            {
    #####: 1157:              for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1157-block  0
    $$$$$: 1157-block  1
    $$$$$: 1157-block  2
branch  0 never executed
branch  1 never executed
        -: 1158:          {
        -: 1159:            if (DEBUG)
        -: 1160:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1161:          }	
    #####: 1162:              break;
    $$$$$: 1162-block  0
        -: 1163:            }		
        -: 1164:        }
        -: 1165:              
        -: 1166:          }
        -: 1167:            
        -: 1168:      }				
        -: 1169:
        -: 1170:      //discard played card from hand
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1171-block  0
call    0 never executed
        -: 1172:
    #####: 1173:      return 0;
        -: 1174:
        -: 1175:		
        -: 1176:    case embargo: 
        -: 1177:      //+2 Coins
    #####: 1178:      state->coins = state->coins + 2;
        -: 1179:			
        -: 1180:      //see if selected pile is in play
    #####: 1181:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1181-block  0
branch  0 never executed
branch  1 never executed
        -: 1182:      {
    #####: 1183:        return -1;
    $$$$$: 1183-block  0
        -: 1184:      }
        -: 1185:			
        -: 1186:      //add embargo token to selected supply pile
    #####: 1187:      state->embargoTokens[choice1]++;
        -: 1188:			
        -: 1189:      //trash card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1190-block  0
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case outpost:
        -: 1194:      //set outpost flag
    #####: 1195:      state->outpostPlayed++;
        -: 1196:			
        -: 1197:      //discard card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1198-block  0
call    0 never executed
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case salvager:
        -: 1202:      //+1 buy
    #####: 1203:      state->numBuys++;
        -: 1204:			
    #####: 1205:      if (choice1)
    $$$$$: 1205-block  0
branch  0 never executed
branch  1 never executed
        -: 1206:      {
        -: 1207:        //gain coins equal to trashed card
    #####: 1208:        state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1208-block  0
call    0 never executed
call    1 never executed
        -: 1209:        //trash card
    #####: 1210:        discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1211:      }
        -: 1212:			
        -: 1213:      //discard card
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1214-block  0
call    0 never executed
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case sea_hag:
    #####: 1218:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1218-block  0
    $$$$$: 1218-block  1
    $$$$$: 1218-block  2
branch  0 never executed
branch  1 never executed
    #####: 1219:        if (i != currentPlayer){
    $$$$$: 1219-block  0
branch  0 never executed
branch  1 never executed
    #####: 1220:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1221:          state->discardCount[i]++;
    #####: 1222:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1222-block  0
        -: 1223:        }
        -: 1224:      }
    #####: 1225:      return 0;
    $$$$$: 1225-block  0
        -: 1226:		
        -: 1227:    case treasure_map:
        -: 1228:      //search hand for another treasure_map
    #####: 1229:      index = -1;
    #####: 1230:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1230-block  0
    $$$$$: 1230-block  1
    $$$$$: 1230-block  2
branch  0 never executed
branch  1 never executed
        -: 1231:      {
    #####: 1232:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1232-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1232-block  1
branch  2 never executed
branch  3 never executed
        -: 1233:          {
    #####: 1234:            index = i;
    #####: 1235:            break;
    $$$$$: 1235-block  0
        -: 1236:          }
        -: 1237:      }
    #####: 1238:      if (index > -1)
    $$$$$: 1238-block  0
branch  0 never executed
branch  1 never executed
        -: 1239:      {
        -: 1240:        //trash both treasure cards
    #####: 1241:        discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1241-block  0
call    0 never executed
    #####: 1242:        discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1243:
        -: 1244:        //gain 4 Gold cards
    #####: 1245:        for (i = 0; i < 4; i++)
    $$$$$: 1245-block  0
branch  0 never executed
branch  1 never executed
        -: 1246:          {
    #####: 1247:            gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1247-block  0
call    0 never executed
        -: 1248:          }
        -: 1249:            
        -: 1250:        //return success
    #####: 1251:        return 1;
    $$$$$: 1251-block  0
        -: 1252:      }
        -: 1253:			
        -: 1254:      //no second treasure_map found in hand
    #####: 1255:      return -1;
    $$$$$: 1255-block  0
        -: 1256:}
        -: 1257:	
     1000: 1258:  return -1;
     1000: 1258-block  0
     1000: 1258-block  1
        -: 1259:}
        -: 1260:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1261:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    $$$$$: 1261-block  0
        -: 1262:{
        -: 1263:	
        -: 1264:  //if card is not trashed, added to Played pile 
    #####: 1265:  if (trashFlag < 1)
    $$$$$: 1265-block  0
branch  0 never executed
branch  1 never executed
        -: 1266:    {
        -: 1267:      //add card to played pile
    #####: 1268:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1269:      state->playedCardCount++;
    $$$$$: 1269-block  0
        -: 1270:    }
        -: 1271:	
        -: 1272:  //set played card to -1
    #####: 1273:  state->hand[currentPlayer][handPos] = -1;
        -: 1274:	
        -: 1275:  //remove card from player's hand
    #####: 1276:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    $$$$$: 1276-block  0
branch  0 never executed
branch  1 never executed
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
    $$$$$: 1279-block  0
        -: 1280:    }
    #####: 1281:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    $$$$$: 1281-block  0
branch  0 never executed
branch  1 never executed
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
    $$$$$: 1284-block  0
        -: 1285:    }
        -: 1286:  else 	
        -: 1287:    {
        -: 1288:      //replace discarded card with last card in hand
    #####: 1289:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1290:      //set last card to -1
    #####: 1291:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1292:      //reduce number of cards in hand
    #####: 1293:      state->handCount[currentPlayer]--;
    $$$$$: 1293-block  0
        -: 1294:    }
        -: 1295:	
    #####: 1296:  return 0;
    $$$$$: 1296-block  0
        -: 1297:}
        -: 1298:
function gainCard called 483 returned 100% blocks executed 70%
      483: 1299:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
      483: 1299-block  0
        -: 1300:{
        -: 1301:  //Note: supplyPos is enum of choosen card
        -: 1302:	
        -: 1303:  //check if supply pile is empty (0) or card is not used in game (-1)
      483: 1304:  if ( supplyCount(supplyPos, state) < 1 )
      483: 1304-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1305:    {
    #####: 1306:      return -1;
    $$$$$: 1306-block  0
        -: 1307:    }
        -: 1308:	
        -: 1309:  //added card for [whoseTurn] current player:
        -: 1310:  // toFlag = 0 : add to discard
        -: 1311:  // toFlag = 1 : add to deck
        -: 1312:  // toFlag = 2 : add to hand
        -: 1313:
      483: 1314:  if (toFlag == 1)
      483: 1314-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1315:    {
    #####: 1316:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1317:      state->deckCount[player]++;
    $$$$$: 1317-block  0
        -: 1318:    }
      483: 1319:  else if (toFlag == 2)
      483: 1319-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1320:    {
    #####: 1321:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1322:      state->handCount[player]++;
    $$$$$: 1322-block  0
        -: 1323:    }
        -: 1324:  else
        -: 1325:    {
      483: 1326:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      483: 1327:      state->discardCount[player]++;
      483: 1327-block  0
        -: 1328:    }
        -: 1329:	
        -: 1330:  //decrease number in supply pile
      483: 1331:  state->supplyCount[supplyPos]--;
        -: 1332:	 
      483: 1333:  return 0;
      483: 1333-block  0
        -: 1334:}
        -: 1335:
function updateCoins called 1000 returned 100% blocks executed 82%
     1000: 1336:int updateCoins(int player, struct gameState *state, int bonus)
     1000: 1336-block  0
        -: 1337:{
        -: 1338:  int i;
        -: 1339:	
        -: 1340:  //reset coin count
     1000: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
     6000: 1344:  for (i = 0; i < state->handCount[player]; i++)
     1000: 1344-block  0
     5000: 1344-block  1
     6000: 1344-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1345:    {
     5000: 1346:      if (state->hand[player][i] == copper)
     5000: 1346-block  0
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
        -: 1347:	{
     3866: 1348:	  state->coins += 1;
     3866: 1348-block  0
        -: 1349:	}
     1134: 1350:      else if (state->hand[player][i] == silver)
     1134: 1350-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1351:	{
    #####: 1352:	  state->coins += 2;
    $$$$$: 1352-block  0
        -: 1353:	}
     1134: 1354:      else if (state->hand[player][i] == gold)
     1134: 1354-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1355:	{
    #####: 1356:	  state->coins += 3;
    $$$$$: 1356-block  0
        -: 1357:	}	
        -: 1358:    }	
        -: 1359:
        -: 1360:  //add bonus
     1000: 1361:  state->coins += bonus;
        -: 1362:
     1000: 1363:  return 0;
     1000: 1363-block  0
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:
----------------- Testing Card: council_room ----------------
TEST 1: +4 Cards 
TEST 2: +1 Buy
TEST 3: Each other player draws a card
TEST 4: Council Room cost test

 >>>>> council_room: Test 1 completed with 0 passes. <<<<<
 >>>>> council_room: Test 2 completed with 1000 passes. <<<<<
 >>>>> council_room: Test 3 completed with 0 passes. <<<<<

 >>>>> council_room: Test 4 completed with 1000 passes. <<<<<

File 'dominion.c'
Lines executed:32.56% of 562
Branches executed:37.65% of 417
Taken at least once:23.02% of 417
Calls executed:22.11% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 102522 returned 100% blocks executed 100%
   102522:    8:int compare(const void* a, const void* b) {
   102522:    8-block  0
   102522:    9:  if (*(int*)a > *(int*)b)
   102522:    9-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
     5814:   10:    return 1;
     5814:   10-block  0
    96708:   11:  if (*(int*)a < *(int*)b)
    96708:   11-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
    27265:   12:    return -1;
    27265:   12-block  0
    69443:   13:  return 0;
    69443:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 89%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     2000:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
     2000:   44-block  0
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2000:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
     2000:   57-block  0
    20000:   57-block  1
    22000:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
    20000:   59-block  0
   200000:   59-block  1
   220000:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   200000:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
   180000:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
     2000:   73-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   74:    {
      692:   75:      state->supplyCount[curse] = 10;
      692:   75-block  0
        -:   76:    }
     1308:   77:  else if (numPlayers == 3)
     1308:   77-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
      651:   79:      state->supplyCount[curse] = 20;
      651:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
      657:   83:      state->supplyCount[curse] = 30;
      657:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
     2000:   87-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   88:    {
      692:   89:      state->supplyCount[estate] = 8;
      692:   90:      state->supplyCount[duchy] = 8;
      692:   91:      state->supplyCount[province] = 8;
      692:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
     1308:   95:      state->supplyCount[estate] = 12;
     1308:   96:      state->supplyCount[duchy] = 12;
     1308:   97:      state->supplyCount[province] = 12;
     1308:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     2000:  106-block  0
    40000:  106-block  1
    42000:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
    40000:  108-block  0
   290000:  108-block  1
   330000:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
   310000:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    20000:  113-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    20000:  113-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    20000:  122:		  state->supplyCount[i] = 10;
    20000:  122-block  0
        -:  123:		}
    20000:  124:	      break;
    20000:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     7965:  138:  for (i = 0; i < numPlayers; i++)
     2000:  138-block  0
     5965:  138-block  1
     7965:  138-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     5965:  140:      state->deckCount[i] = 0;
    23860:  141:      for (j = 0; j < 3; j++)
     5965:  141-block  0
    17895:  141-block  1
    23860:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    17895:  143:	  state->deck[i][j] = estate;
    17895:  144:	  state->deckCount[i]++;
        -:  145:	}
    47720:  146:      for (j = 3; j < 10; j++)
     5965:  146-block  0
    41755:  146-block  1
    47720:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    41755:  148:	  state->deck[i][j] = copper;
    41755:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     7965:  154:  for (i = 0; i < numPlayers; i++)
     2000:  154-block  0
     5965:  154-block  1
     7965:  154-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
     5965:  156:      if ( shuffle(i, state) < 0 )
     5965:  156-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     7965:  163:  for (i = 0; i < numPlayers; i++)
     2000:  163-block  0
     5965:  163-block  1
     7965:  163-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     5965:  166:      state->handCount[i] = 0;
     5965:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
     2000:  176-block  0
    54000:  176-block  1
    56000:  176-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
     2000:  192-block  0
    12000:  192-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
    10000:  193-block  0
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
     2000:  196-block  0
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 7958 returned 100% blocks executed 100%
     7958:  201:int shuffle(int player, struct gameState *state) {
     7958:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     7958:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     7958:  209:  if (state->deckCount[player] < 1)
     7958:  209-block  0
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
     1059:  210:    return -1;
     1059:  210-block  0
     6899:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
     6899:  211-block  0
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    73507:  214:  while (state->deckCount[player] > 0) {
    73507:  214-block  0
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    66608:  215:    card = floor(Random() * state->deckCount[player]);
    66608:  215-block  0
call    0 returned 100%
    66608:  216:    newDeck[newDeckPos] = state->deck[player][card];
    66608:  217:    newDeckPos++;
   221241:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   154633:  218-block  0
   221241:  218-block  1
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
   154633:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    66608:  221:    state->deckCount[player]--;
    66608:  221-block  0
        -:  222:  }
    73507:  223:  for (i = 0; i < newDeckPos; i++) {
     6899:  223-block  0
    66608:  223-block  1
    73507:  223-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    66608:  224:    state->deck[player][i] = newDeck[i];
    66608:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     7958:  228:  return 0;
     6899:  228-block  0
     7958:  228-block  1
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
        -:  270:}
        -:  271:
function buyCard called 2000 returned 100% blocks executed 86%
     4000:  272:int buyCard(int supplyPos, struct gameState *state) {
     2000:  272-block  0
     2000:  272-block  1
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     2000:  280:  who = state->whoseTurn;
        -:  281:
     2000:  282:  if (state->numBuys < 1){
     2000:  282-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
     2000:  286:  } else if (supplyCount(supplyPos, state) <1){
     2000:  286-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
     2000:  290:  } else if (state->coins < getCost(supplyPos)){
     2000:  290-block  0
call    0 returned 100%
branch  1 taken 46% (fallthrough)
branch  2 taken 54%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      925:  293:    return -1;
      925:  293-block  0
        -:  294:  } else {
     1075:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
     1075:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
     1075:  297-block  0
call    0 returned 100%
        -:  298:  
     1075:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
     1075:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
     1075:  308:  return 0;
     1075:  308-block  0
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 3075 returned 100% blocks executed 100%
     3075:  320:int supplyCount(int card, struct gameState *state) {
     3075:  320-block  0
     3075:  321:  return state->supplyCount[card];
     3075:  321-block  0
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  324-block  0
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
    $$$$$:  328-block  1
    $$$$$:  328-block  2
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
    $$$$$:  333-block  1
    $$$$$:  333-block  2
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
    $$$$$:  338-block  1
    $$$$$:  338-block  2
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
        -:  341:    }
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
        -:  344:}
        -:  345:
function whoseTurn called 2000 returned 100% blocks executed 100%
     2000:  346:int whoseTurn(struct gameState *state) {
     2000:  346-block  0
     2000:  347:  return state->whoseTurn;
     2000:  347-block  0
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
    $$$$$:  356-block  1
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
    $$$$$:  380-block  1
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
    $$$$$:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
    $$$$$:  395-block  0
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
    $$$$$:  397-block  0
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
    $$$$$:  402-block  0
    $$$$$:  402-block  1
    $$$$$:  402-block  2
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    $$$$$:  406-block  0
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    $$$$$:  414-block  0
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
    $$$$$:  422-block  1
    $$$$$:  422-block  2
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
    $$$$$:  433-block  1
    $$$$$:  433-block  2
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
    $$$$$:  444-block  1
    $$$$$:  444-block  2
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
    $$$$$:  464-block  1
    $$$$$:  464-block  2
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
    $$$$$:  479-block  1
    $$$$$:  479-block  2
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
    $$$$$:  500-block  1
    $$$$$:  500-block  2
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
    $$$$$:  510-block  1
    $$$$$:  510-block  2
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
        -:  523:}
        -:  524:
function drawCard called 26769 returned 100% blocks executed 100%
    26769:  525:int drawCard(int player, struct gameState *state)
    26769:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
    26769:  528:  if (state->deckCount[player] <= 0){//Deck is empty
    26769:  528-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     7955:  533:    for (i = 0; i < state->discardCount[player];i++){
      997:  533-block  0
     6958:  533-block  1
     7955:  533-block  2
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
     6958:  534:      state->deck[player][i] = state->discard[player][i];
     6958:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      997:  538:    state->deckCount[player] = state->discardCount[player];
      997:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      997:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
      997:  542-block  0
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      997:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      997:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      997:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      997:  559:    if (deckCounter == 0)
      997:  559-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       63:  560:      return -1;
       63:  560-block  0
        -:  561:
      934:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      934:  563:    state->deckCount[player]--;
      934:  564:    state->handCount[player]++;//Increment hand count
      934:  564-block  0
        -:  565:  }
        -:  566:
        -:  567:  else{
    25772:  568:    int count = state->handCount[player];//Get current hand count for player
    25772:  568-block  0
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    25772:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    25772:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    25772:  576:    state->deckCount[player]--;
    25772:  577:    state->handCount[player]++;//Increment hand count
    25772:  577-block  0
        -:  578:  }
        -:  579:
    26706:  580:  return 0;
    26706:  580-block  0
        -:  581:}
        -:  582:
function getCost called 3075 returned 100% blocks executed 13%
     3075:  583:int getCost(int cardNumber)
     3075:  583-block  0
        -:  584:{
     3075:  585:  switch( cardNumber ) 
     3075:  585-block  0
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 48%
branch  8 taken 52%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
        -:  601:    case adventurer:
     1483:  602:      return 6;
     1483:  602-block  0
        -:  603:    case council_room:
     1592:  604:      return 5;
     1592:  604-block  0
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
        -:  644:}
        -:  645:
        -:  646:/* Function implementation of 5 player cards */
function adventurerFunc called 1000 returned 100% blocks executed 93%
     1000:  647:int adventurerFunc(int currentPlayer, struct gameState *state) {
     1000:  647-block  0
     1000:  648:  int drawntreasure = 0;
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];
     1000:  651:  int z=0;
        -:  652:
    11768:  653:  while(drawntreasure <= 2) {
     1000:  653-block  0
    11768:  653-block  1
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
    10768:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    10768:  654-block  0
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
      996:  655:      shuffle(currentPlayer, state);
      996:  655-block  0
call    0 returned 100%
        -:  656:    }
    10768:  657:    drawCard(currentPlayer, state);
    10768:  657-block  0
call    0 returned 100%
    10768:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    10768:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
     9721:  659-block  0
branch  2 taken 91% (fallthrough)
branch  3 taken 9%
     8800:  659-block  1
branch  4 taken 12% (fallthrough)
branch  5 taken 88%
     3000:  660:      drawntreasure++;
     3000:  660-block  0
        -:  661:    else{
     7768:  662:      temphand[z]=cardDrawn;
     7768:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     7768:  663-block  0
        -:  664:      // z++;
        -:  665:    }
        -:  666:  }
     1000:  667:  while(z-1 >= 0){
     1000:  667-block  0
     1000:  667-block  1
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:    z=z-1;
    $$$$$:  669-block  0
        -:  670:  }
     1000:  671:  return 0;
     1000:  671-block  0
        -:  672:}
        -:  673:
function smithyFunc called 0 returned 0% blocks executed 0%
    #####:  674:int smithyFunc(int currentPlayer, int handPos, struct gameState *state) {
    $$$$$:  674-block  0
        -:  675:  int i;
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 4; i++)
    $$$$$:  677-block  0
    $$$$$:  677-block  1
branch  0 never executed
branch  1 never executed
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
    $$$$$:  679-block  0
call    0 never executed
        -:  680:  }
        -:  681:  
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
    $$$$$:  683-block  0
call    0 never executed
        -:  684:
    #####:  685:  return 0;
        -:  686:}
        -:  687:
function councilRoomFunc called 1000 returned 100% blocks executed 100%
     1000:  688:int councilRoomFunc(int currentPlayer, int handPos, struct gameState *state) {
     1000:  688-block  0
        -:  689:  int i;
        -:  690:  //+4 Cards
     4000:  691:  for (i = 1; i < 4; i++)
     1000:  691-block  0
     4000:  691-block  1
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  692:  {
     3000:  693:    drawCard(currentPlayer, state);
     3000:  693-block  0
call    0 returned 100%
        -:  694:  }
        -:  695:  
        -:  696:  //+1 Buy
     1000:  697:  state->numBuys++;
        -:  698:  
        -:  699:  //Each other player draws a card
     5001:  700:  for (i = 0; i <= state->numPlayers; i++)
     1000:  700-block  0
     4001:  700-block  1
     5001:  700-block  2
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  701:  {
     4001:  702:    if ( i != currentPlayer )
     4001:  702-block  0
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:  703:      {
     3001:  704:        drawCard(i, state);
     3001:  704-block  0
call    0 returned 100%
        -:  705:      }
        -:  706:  }
        -:  707:  
        -:  708:  //put played card in played card pile
     1000:  709:  discardCard(handPos, currentPlayer, state, 0);
     1000:  709-block  0
call    0 returned 100%
        -:  710:
     1000:  711:  return 0;
        -:  712:}
        -:  713:
function feastFunc called 0 returned 0% blocks executed 0%
    #####:  714:int feastFunc(int currentPlayer, int choice1, struct gameState *state) {
    $$$$$:  714-block  0
        -:  715:  int i;
        -:  716:  int x;
        -:  717:  int temphand[MAX_HAND];
        -:  718:
    #####:  719:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    $$$$$:  719-block  0
    $$$$$:  719-block  1
    $$$$$:  719-block  2
branch  0 never executed
branch  1 never executed
    #####:  720:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  721:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  722:  }
        -:  723:  //Backup hand
        -:  724:
        -:  725:  //Update Coins for Buy
    #####:  726:  updateCoins(currentPlayer, state, 10);
    $$$$$:  726-block  0
call    0 never executed
    #####:  727:  x = 1;//Condition to loop on
    #####:  728:  while( x == 1) {//Buy one card
    $$$$$:  728-block  0
branch  0 never executed
branch  1 never executed
    #####:  729:    if (supplyCount(choice1, state) <= 0){
    $$$$$:  729-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  730:      if (DEBUG)
        -:  731:        printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:      }
        -:  736:    }
    #####:  737:    else if (state->coins < getCost(choice1)){
    $$$$$:  737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  738:      printf("That card is too expensive!\n");
    $$$$$:  738-block  0
call    0 never executed
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:      }
        -:  743:    }
        -:  744:    else{
        -:  745:
        -:  746:      if (DEBUG){
        -:  747:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:      }
        -:  749:
    #####:  750:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  750-block  0
call    0 never executed
    #####:  751:      x = 0;//No more buying cards
        -:  752:
        -:  753:      if (DEBUG){
        -:  754:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:      }
        -:  756:
        -:  757:    }
        -:  758:  }     
        -:  759:
        -:  760:  //Reset Hand
    #####:  761:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  761-block  0
    $$$$$:  761-block  1
    $$$$$:  761-block  2
branch  0 never executed
branch  1 never executed
    #####:  762:    state->hand[currentPlayer][i] = temphand[i];
    #####:  763:    temphand[i] = -1;
        -:  764:  }
        -:  765:  //Reset Hand
        -:  766:
    #####:  767:  return 0;
    $$$$$:  767-block  0
        -:  768:}
        -:  769:
function remodelFunc called 0 returned 0% blocks executed 0%
    #####:  770:int remodelFunc(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state) {
    $$$$$:  770-block  0
        -:  771:  int i;
        -:  772:  int j;
    #####:  773:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:  
    #####:  775:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  775-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:  {
    #####:  777:    return -1;
    $$$$$:  777-block  0
        -:  778:  }
        -:  779:
    #####:  780:  gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  780-block  0
call    0 never executed
        -:  781:
        -:  782:  //discard card from hand
    #####:  783:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  784:
        -:  785:  //discard trashed card
    #####:  786:  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  786-block  0
    $$$$$:  786-block  1
branch  0 never executed
branch  1 never executed
        -:  787:  {
    #####:  788:    if (state->hand[currentPlayer][i] == j)
    $$$$$:  788-block  0
branch  0 never executed
branch  1 never executed
        -:  789:    {
    #####:  790:      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  790-block  0
call    0 never executed
    #####:  791:      break;
        -:  792:    }
        -:  793:  }
    #####:  794:  return 0;
    $$$$$:  794-block  0
        -:  795:}
        -:  796:
function cardEffect called 2000 returned 100% blocks executed 5%
     2000:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
     2000:  797-block  0
        -:  798:{
        -:  799:  int i;
        -:  800:  int j;
        -:  801:  int k;
        -:  802:  //int x;
        -:  803:  int index;
     2000:  804:  int currentPlayer = whoseTurn(state);
     2000:  804-block  0
call    0 returned 100%
     2000:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
     2000:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  //int temphand[MAX_HAND];// moved above the if statement
        -:  809:  //int drawntreasure=0;
        -:  810:  //int cardDrawn;
        -:  811:  //int z = 0;// this is the counter for the temp hand
     2000:  812:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 37% (fallthrough)
branch  1 taken 64%
      730:  813:    nextPlayer = 0;
      730:  813-block  0
        -:  814:  }
        -:  815:  
        -:  816:  //uses switch to select card and perform actions
     2000:  817:  switch( card ) 
     2000:  817-block  0
branch  0 taken 50%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  818:  {
        -:  819:    case adventurer:
     1000:  820:      adventurerFunc(currentPlayer, state);
     1000:  820-block  0
call    0 returned 100%
     1000:  821:      break;
        -:  822:			
        -:  823:    case council_room:
     1000:  824:      councilRoomFunc(currentPlayer, handPos, state);
     1000:  824-block  0
call    0 returned 100%
     1000:  825:      break;
        -:  826:      
        -:  827:    case feast:
    #####:  828:      feastFunc(currentPlayer, choice1, state);
    $$$$$:  828-block  0
call    0 never executed
    #####:  829:      break;     			
        -:  830:			
        -:  831:    case gardens:
    #####:  832:      return -1;
    $$$$$:  832-block  0
        -:  833:			
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  837-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  837-block  1
branch  2 never executed
branch  3 never executed
        -:  838:      {
    #####:  839:        return -1;
    $$$$$:  839-block  0
        -:  840:      }
        -:  841:		
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  842-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  842-block  1
branch  2 never executed
branch  3 never executed
        -:  843:      {
    #####:  844:        return -1;
    $$$$$:  844-block  0
        -:  845:      }
        -:  846:
    #####:  847:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  847-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  848:      {
    #####:  849:        return -1;
    $$$$$:  849-block  0
        -:  850:      }
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  852-block  0
call    0 never executed
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  858-block  0
    $$$$$:  858-block  1
branch  0 never executed
branch  1 never executed
        -:  859:      {
    #####:  860:        if (state->hand[currentPlayer][i] == j)
    $$$$$:  860-block  0
branch  0 never executed
branch  1 never executed
        -:  861:          {
    #####:  862:            discardCard(i, currentPlayer, state, 0);			
    $$$$$:  862-block  0
call    0 never executed
    #####:  863:            break;
        -:  864:          }
        -:  865:      }
        -:  866:			
    #####:  867:      return 0;
    $$$$$:  867-block  0
        -:  868:			
        -:  869:    case remodel:
    #####:  870:      remodelFunc(currentPlayer, choice1, choice2, handPos, state);
    $$$$$:  870-block  0
call    0 never executed
    #####:  871:      break;
        -:  872:		
        -:  873:    case smithy:
    #####:  874:      smithyFunc(currentPlayer, handPos, state);
    $$$$$:  874-block  0
call    0 never executed
    #####:  875:      break;
        -:  876:		
        -:  877:    case village:
        -:  878:      //+1 Card
    #####:  879:      drawCard(currentPlayer, state);
    $$$$$:  879-block  0
call    0 never executed
        -:  880:			
        -:  881:      //+2 Actions
    #####:  882:      state->numActions = state->numActions + 2;
        -:  883:			
        -:  884:      //discard played card from hand
    #####:  885:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  886:      return 0;
        -:  887:		
        -:  888:    case baron:
    #####:  889:      state->numBuys++;//Increase buys by 1!
    #####:  890:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  890-block  0
branch  0 never executed
branch  1 never executed
    #####:  891:        int p = 0;//Iterator for hand!
    #####:  892:        int card_not_discarded = 1;//Flag for discard set!
    #####:  893:        while(card_not_discarded){
    $$$$$:  893-block  0
    $$$$$:  893-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  893-block  2
    #####:  894:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  894-block  0
branch  0 never executed
branch  1 never executed
    #####:  895:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:            state->discardCount[currentPlayer]++;
    #####:  898:            for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  898-block  0
    $$$$$:  898-block  1
    $$$$$:  898-block  2
branch  0 never executed
branch  1 never executed
    #####:  899:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:            }
    #####:  901:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:            state->handCount[currentPlayer]--;
    #####:  903:            card_not_discarded = 0;//Exit the loop
    $$$$$:  903-block  0
        -:  904:          }
    #####:  905:          else if (p > state->handCount[currentPlayer]){
    $$$$$:  905-block  0
branch  0 never executed
branch  1 never executed
        -:  906:            if(DEBUG) {
        -:  907:              printf("No estate cards in your hand, invalid choice\n");
        -:  908:              printf("Must gain an estate if there are any\n");
        -:  909:            }
    #####:  910:            if (supplyCount(estate, state) > 0){
    $$$$$:  910-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  911:              gainCard(estate, state, 0, currentPlayer);
    $$$$$:  911-block  0
call    0 never executed
    #####:  912:              state->supplyCount[estate]--;//Decrement estates
    #####:  913:              if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  914:          isGameOver(state);
    $$$$$:  914-block  0
call    0 never executed
        -:  915:              }
        -:  916:            }
    #####:  917:            card_not_discarded = 0;//Exit the loop
    $$$$$:  917-block  0
        -:  918:          }
        -:  919:                
        -:  920:          else{
    #####:  921:            p++;//Next card
    $$$$$:  921-block  0
        -:  922:          }
        -:  923:        }
        -:  924:      }
        -:  925:
        -:  926:      else{
    #####:  927:        if (supplyCount(estate, state) > 0){
    $$$$$:  927-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  928:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  928-block  0
call    0 never executed
    #####:  929:          state->supplyCount[estate]--;//Decrement Estates
    #####:  930:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  931:            isGameOver(state);
    $$$$$:  931-block  0
call    0 never executed
        -:  932:          }
        -:  933:        }
        -:  934:      }
        -:  935:        
        -:  936:        
    #####:  937:      return 0;
    $$$$$:  937-block  0
        -:  938:		
        -:  939:    case great_hall:
        -:  940:      //+1 Card
    #####:  941:      drawCard(currentPlayer, state);
    $$$$$:  941-block  0
call    0 never executed
        -:  942:			
        -:  943:      //+1 Actions
    #####:  944:      state->numActions++;
        -:  945:			
        -:  946:      //discard card from hand
    #####:  947:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case minion:
        -:  951:      //+1 action
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  955-block  0
call    0 never executed
        -:  956:			
    #####:  957:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  958:      {
    #####:  959:        state->coins = state->coins + 2;
    $$$$$:  959-block  0
        -:  960:      }
        -:  961:			
    #####:  962:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
        -:  963:      {
        -:  964:        //discard hand
    #####:  965:        while(numHandCards(state) > 0)
    $$$$$:  965-block  0
    $$$$$:  965-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  966:          {
    #####:  967:            discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  967-block  0
call    0 never executed
        -:  968:          }
        -:  969:            
        -:  970:        //draw 4
    #####:  971:        for (i = 0; i < 4; i++)
    $$$$$:  971-block  0
    $$$$$:  971-block  1
branch  0 never executed
branch  1 never executed
        -:  972:          {
    #####:  973:            drawCard(currentPlayer, state);
    $$$$$:  973-block  0
call    0 never executed
        -:  974:          }
        -:  975:            
        -:  976:        //other players discard hand and redraw if hand size > 4
    #####:  977:        for (i = 0; i < state->numPlayers; i++)
    $$$$$:  977-block  0
    $$$$$:  977-block  1
    $$$$$:  977-block  2
branch  0 never executed
branch  1 never executed
        -:  978:          {
    #####:  979:            if (i != currentPlayer)
    $$$$$:  979-block  0
branch  0 never executed
branch  1 never executed
        -:  980:        {
    #####:  981:          if ( state->handCount[i] > 4 )
    $$$$$:  981-block  0
branch  0 never executed
branch  1 never executed
        -:  982:            {
        -:  983:              //discard hand
    #####:  984:              while( state->handCount[i] > 0 )
    $$$$$:  984-block  0
    $$$$$:  984-block  1
branch  0 never executed
branch  1 never executed
        -:  985:          {
    #####:  986:            discardCard(handPos, i, state, 0);
    $$$$$:  986-block  0
call    0 never executed
        -:  987:          }
        -:  988:                  
        -:  989:              //draw 4
    #####:  990:              for (j = 0; j < 4; j++)
    $$$$$:  990-block  0
    $$$$$:  990-block  1
branch  0 never executed
branch  1 never executed
        -:  991:          {
    #####:  992:            drawCard(i, state);
    $$$$$:  992-block  0
call    0 never executed
        -:  993:          }
        -:  994:            }
        -:  995:        }
        -:  996:          }
        -:  997:            
        -:  998:      }
    #####:  999:      return 0;
    $$$$$:  999-block  0
        -: 1000:		
        -: 1001:    case steward:
    #####: 1002:      if (choice1 == 1)
    $$$$$: 1002-block  0
branch  0 never executed
branch  1 never executed
        -: 1003:      {
        -: 1004:        //+2 cards
    #####: 1005:        drawCard(currentPlayer, state);
    $$$$$: 1005-block  0
call    0 never executed
    #####: 1006:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1007:      }
    #####: 1008:          else if (choice1 == 2)
    $$$$$: 1008-block  0
branch  0 never executed
branch  1 never executed
        -: 1009:      {
        -: 1010:        //+2 coins
    #####: 1011:        state->coins = state->coins + 2;
    $$$$$: 1011-block  0
        -: 1012:      }
        -: 1013:          else
        -: 1014:      {
        -: 1015:        //trash 2 cards in hand
    #####: 1016:        discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1016-block  0
call    0 never executed
    #####: 1017:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1018:      }
        -: 1019:			
        -: 1020:      //discard card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1021-block  0
call    0 never executed
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case tribute:
    #####: 1025:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    #####: 1026:        if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1026-block  0
branch  0 never executed
branch  1 never executed
    #####: 1027:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1028:          state->deckCount[nextPlayer]--;
    $$$$$: 1028-block  0
        -: 1029:        }
    #####: 1030:        else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1030-block  0
branch  0 never executed
branch  1 never executed
    #####: 1031:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1032:          state->discardCount[nextPlayer]--;
    $$$$$: 1032-block  0
        -: 1033:        }
        -: 1034:        else{
        -: 1035:          //No Card to Reveal
        -: 1036:          if (DEBUG){
        -: 1037:            printf("No cards to reveal\n");
        -: 1038:          }
        -: 1039:        }
        -: 1040:            }
        -: 1041:            
        -: 1042:            else{
    #####: 1043:        if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1043-block  0
branch  0 never executed
branch  1 never executed
    #####: 1044:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1044-block  0
    $$$$$: 1044-block  1
    $$$$$: 1044-block  2
branch  0 never executed
branch  1 never executed
    #####: 1045:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1046:            state->deckCount[nextPlayer]++;
    #####: 1047:            state->discard[nextPlayer][i] = -1;
    #####: 1048:            state->discardCount[nextPlayer]--;
        -: 1049:          }
        -: 1050:                
    #####: 1051:          shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1051-block  0
call    0 never executed
        -: 1052:        } 
    #####: 1053:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:        state->deckCount[nextPlayer]--;
    #####: 1056:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1057:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1058:        state->deckCount[nextPlayer]--;
    $$$$$: 1058-block  0
        -: 1059:            }    
        -: 1060:                
    #####: 1061:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1061-block  0
branch  0 never executed
branch  1 never executed
    #####: 1062:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1063:        state->playedCardCount++;
    #####: 1064:        tributeRevealedCards[1] = -1;
    $$$$$: 1064-block  0
        -: 1065:            }
        -: 1066:
    #####: 1067:            for (i = 0; i <= 2; i ++){
    $$$$$: 1067-block  0
    $$$$$: 1067-block  1
    $$$$$: 1067-block  2
branch  0 never executed
branch  1 never executed
    #####: 1068:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1068-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1068-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1068-block  2
branch  4 never executed
branch  5 never executed
    #####: 1069:          state->coins += 2;
    $$$$$: 1069-block  0
        -: 1070:        }
        -: 1071:              
    #####: 1072:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1072-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1072-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1072-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1072-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1072-block  4
branch  8 never executed
branch  9 never executed
    #####: 1073:          drawCard(currentPlayer, state);
    $$$$$: 1073-block  0
call    0 never executed
    #####: 1074:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1075:        }
        -: 1076:        else{//Action Card
    #####: 1077:          state->numActions = state->numActions + 2;
    $$$$$: 1077-block  0
        -: 1078:        }
        -: 1079:      }
        -: 1080:	    
    #####: 1081:      return 0;
    $$$$$: 1081-block  0
        -: 1082:		
        -: 1083:    case ambassador:
    #####: 1084:      j = 0;		//used to check if player has enough cards to discard
        -: 1085:
    #####: 1086:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1086-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1086-block  1
branch  2 never executed
branch  3 never executed
        -: 1087:      {
    #####: 1088:        return -1;				
    $$$$$: 1088-block  0
        -: 1089:      }
        -: 1090:
    #####: 1091:          if (choice1 == handPos)
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
        -: 1092:      {
    #####: 1093:        return -1;
    $$$$$: 1093-block  0
        -: 1094:      }
        -: 1095:
    #####: 1096:          for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1096-block  0
    $$$$$: 1096-block  1
    $$$$$: 1096-block  2
branch  0 never executed
branch  1 never executed
        -: 1097:      {
    #####: 1098:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1098-block  2
branch  4 never executed
branch  5 never executed
        -: 1099:          {
    #####: 1100:            j++;
    $$$$$: 1100-block  0
        -: 1101:          }
        -: 1102:      }
    #####: 1103:          if (j < choice2)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
        -: 1104:      {
    #####: 1105:        return -1;				
    $$$$$: 1105-block  0
        -: 1106:      }
        -: 1107:
        -: 1108:          if (DEBUG) 
        -: 1109:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1110:
        -: 1111:          //increase supply count for choosen card by amount being discarded
    #####: 1112:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1113:          
        -: 1114:          //each other player gains a copy of revealed card
    #####: 1115:          for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1115-block  0
    $$$$$: 1115-block  1
    $$$$$: 1115-block  2
branch  0 never executed
branch  1 never executed
        -: 1116:      {
    #####: 1117:        if (i != currentPlayer)
    $$$$$: 1117-block  0
branch  0 never executed
branch  1 never executed
        -: 1118:          {
    #####: 1119:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1119-block  0
call    0 never executed
        -: 1120:          }
        -: 1121:      }
        -: 1122:
        -: 1123:          //discard played card from hand
    #####: 1124:          discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1124-block  0
call    0 never executed
        -: 1125:
        -: 1126:          //trash copies of cards returned to supply
    #####: 1127:          for (j = 0; j < choice2; j++)
    $$$$$: 1127-block  0
    $$$$$: 1127-block  1
branch  0 never executed
branch  1 never executed
        -: 1128:      {
    #####: 1129:        for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1129-block  0
    $$$$$: 1129-block  1
    $$$$$: 1129-block  2
branch  0 never executed
branch  1 never executed
        -: 1130:          {
    #####: 1131:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1131-block  0
branch  0 never executed
branch  1 never executed
        -: 1132:        {
    #####: 1133:          discardCard(i, currentPlayer, state, 1);
    $$$$$: 1133-block  0
call    0 never executed
    #####: 1134:          break;
        -: 1135:        }
        -: 1136:          }
        -: 1137:      }			
        -: 1138:
    #####: 1139:      return 0;
    $$$$$: 1139-block  0
        -: 1140:		
        -: 1141:    case cutpurse:
        -: 1142:
    #####: 1143:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1143-block  0
call    0 never executed
    #####: 1144:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1144-block  0
    $$$$$: 1144-block  1
branch  0 never executed
branch  1 never executed
        -: 1145:      {
    #####: 1146:        if (i != currentPlayer)
    $$$$$: 1146-block  0
branch  0 never executed
branch  1 never executed
        -: 1147:          {
    #####: 1148:            for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1148-block  0
    $$$$$: 1148-block  1
    $$$$$: 1148-block  2
branch  0 never executed
branch  1 never executed
        -: 1149:        {
    #####: 1150:          if (state->hand[i][j] == copper)
    $$$$$: 1150-block  0
branch  0 never executed
branch  1 never executed
        -: 1151:            {
    #####: 1152:              discardCard(j, i, state, 0);
    $$$$$: 1152-block  0
call    0 never executed
    #####: 1153:              break;
        -: 1154:            }
    #####: 1155:          if (j == state->handCount[i])
    $$$$$: 1155-block  0
branch  0 never executed
branch  1 never executed
        -: 1156:            {
    #####: 1157:              for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1157-block  0
    $$$$$: 1157-block  1
    $$$$$: 1157-block  2
branch  0 never executed
branch  1 never executed
        -: 1158:          {
        -: 1159:            if (DEBUG)
        -: 1160:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1161:          }	
    #####: 1162:              break;
    $$$$$: 1162-block  0
        -: 1163:            }		
        -: 1164:        }
        -: 1165:              
        -: 1166:          }
        -: 1167:            
        -: 1168:      }				
        -: 1169:
        -: 1170:      //discard played card from hand
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1171-block  0
call    0 never executed
        -: 1172:
    #####: 1173:      return 0;
        -: 1174:
        -: 1175:		
        -: 1176:    case embargo: 
        -: 1177:      //+2 Coins
    #####: 1178:      state->coins = state->coins + 2;
        -: 1179:			
        -: 1180:      //see if selected pile is in play
    #####: 1181:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1181-block  0
branch  0 never executed
branch  1 never executed
        -: 1182:      {
    #####: 1183:        return -1;
    $$$$$: 1183-block  0
        -: 1184:      }
        -: 1185:			
        -: 1186:      //add embargo token to selected supply pile
    #####: 1187:      state->embargoTokens[choice1]++;
        -: 1188:			
        -: 1189:      //trash card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1190-block  0
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case outpost:
        -: 1194:      //set outpost flag
    #####: 1195:      state->outpostPlayed++;
        -: 1196:			
        -: 1197:      //discard card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1198-block  0
call    0 never executed
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case salvager:
        -: 1202:      //+1 buy
    #####: 1203:      state->numBuys++;
        -: 1204:			
    #####: 1205:      if (choice1)
    $$$$$: 1205-block  0
branch  0 never executed
branch  1 never executed
        -: 1206:      {
        -: 1207:        //gain coins equal to trashed card
    #####: 1208:        state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1208-block  0
call    0 never executed
call    1 never executed
        -: 1209:        //trash card
    #####: 1210:        discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1211:      }
        -: 1212:			
        -: 1213:      //discard card
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1214-block  0
call    0 never executed
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case sea_hag:
    #####: 1218:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1218-block  0
    $$$$$: 1218-block  1
    $$$$$: 1218-block  2
branch  0 never executed
branch  1 never executed
    #####: 1219:        if (i != currentPlayer){
    $$$$$: 1219-block  0
branch  0 never executed
branch  1 never executed
    #####: 1220:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1221:          state->discardCount[i]++;
    #####: 1222:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1222-block  0
        -: 1223:        }
        -: 1224:      }
    #####: 1225:      return 0;
    $$$$$: 1225-block  0
        -: 1226:		
        -: 1227:    case treasure_map:
        -: 1228:      //search hand for another treasure_map
    #####: 1229:      index = -1;
    #####: 1230:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1230-block  0
    $$$$$: 1230-block  1
    $$$$$: 1230-block  2
branch  0 never executed
branch  1 never executed
        -: 1231:      {
    #####: 1232:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1232-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1232-block  1
branch  2 never executed
branch  3 never executed
        -: 1233:          {
    #####: 1234:            index = i;
    #####: 1235:            break;
    $$$$$: 1235-block  0
        -: 1236:          }
        -: 1237:      }
    #####: 1238:      if (index > -1)
    $$$$$: 1238-block  0
branch  0 never executed
branch  1 never executed
        -: 1239:      {
        -: 1240:        //trash both treasure cards
    #####: 1241:        discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1241-block  0
call    0 never executed
    #####: 1242:        discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1243:
        -: 1244:        //gain 4 Gold cards
    #####: 1245:        for (i = 0; i < 4; i++)
    $$$$$: 1245-block  0
branch  0 never executed
branch  1 never executed
        -: 1246:          {
    #####: 1247:            gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1247-block  0
call    0 never executed
        -: 1248:          }
        -: 1249:            
        -: 1250:        //return success
    #####: 1251:        return 1;
    $$$$$: 1251-block  0
        -: 1252:      }
        -: 1253:			
        -: 1254:      //no second treasure_map found in hand
    #####: 1255:      return -1;
    $$$$$: 1255-block  0
        -: 1256:}
        -: 1257:	
     2000: 1258:  return -1;
     2000: 1258-block  0
     2000: 1258-block  1
        -: 1259:}
        -: 1260:
function discardCard called 1000 returned 100% blocks executed 89%
     1000: 1261:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
     1000: 1261-block  0
        -: 1262:{
        -: 1263:	
        -: 1264:  //if card is not trashed, added to Played pile 
     1000: 1265:  if (trashFlag < 1)
     1000: 1265-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1266:    {
        -: 1267:      //add card to played pile
     1000: 1268:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1269:      state->playedCardCount++;
     1000: 1269-block  0
        -: 1270:    }
        -: 1271:	
        -: 1272:  //set played card to -1
     1000: 1273:  state->hand[currentPlayer][handPos] = -1;
        -: 1274:	
        -: 1275:  //remove card from player's hand
     1000: 1276:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
     1000: 1276-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
        1: 1279:      state->handCount[currentPlayer]--;
        1: 1279-block  0
        -: 1280:    }
      999: 1281:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
      999: 1281-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
    $$$$$: 1284-block  0
        -: 1285:    }
        -: 1286:  else 	
        -: 1287:    {
        -: 1288:      //replace discarded card with last card in hand
      999: 1289:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1290:      //set last card to -1
      999: 1291:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1292:      //reduce number of cards in hand
      999: 1293:      state->handCount[currentPlayer]--;
      999: 1293-block  0
        -: 1294:    }
        -: 1295:	
     1000: 1296:  return 0;
     1000: 1296-block  0
        -: 1297:}
        -: 1298:
function gainCard called 1075 returned 100% blocks executed 70%
     1075: 1299:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
     1075: 1299-block  0
        -: 1300:{
        -: 1301:  //Note: supplyPos is enum of choosen card
        -: 1302:	
        -: 1303:  //check if supply pile is empty (0) or card is not used in game (-1)
     1075: 1304:  if ( supplyCount(supplyPos, state) < 1 )
     1075: 1304-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1305:    {
    #####: 1306:      return -1;
    $$$$$: 1306-block  0
        -: 1307:    }
        -: 1308:	
        -: 1309:  //added card for [whoseTurn] current player:
        -: 1310:  // toFlag = 0 : add to discard
        -: 1311:  // toFlag = 1 : add to deck
        -: 1312:  // toFlag = 2 : add to hand
        -: 1313:
     1075: 1314:  if (toFlag == 1)
     1075: 1314-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1315:    {
    #####: 1316:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1317:      state->deckCount[player]++;
    $$$$$: 1317-block  0
        -: 1318:    }
     1075: 1319:  else if (toFlag == 2)
     1075: 1319-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1320:    {
    #####: 1321:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1322:      state->handCount[player]++;
    $$$$$: 1322-block  0
        -: 1323:    }
        -: 1324:  else
        -: 1325:    {
     1075: 1326:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1075: 1327:      state->discardCount[player]++;
     1075: 1327-block  0
        -: 1328:    }
        -: 1329:	
        -: 1330:  //decrease number in supply pile
     1075: 1331:  state->supplyCount[supplyPos]--;
        -: 1332:	 
     1075: 1333:  return 0;
     1075: 1333-block  0
        -: 1334:}
        -: 1335:
function updateCoins called 2000 returned 100% blocks executed 82%
     2000: 1336:int updateCoins(int player, struct gameState *state, int bonus)
     2000: 1336-block  0
        -: 1337:{
        -: 1338:  int i;
        -: 1339:	
        -: 1340:  //reset coin count
     2000: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
    12000: 1344:  for (i = 0; i < state->handCount[player]; i++)
     2000: 1344-block  0
    10000: 1344-block  1
    12000: 1344-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1345:    {
    10000: 1346:      if (state->hand[player][i] == copper)
    10000: 1346-block  0
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
        -: 1347:	{
     7746: 1348:	  state->coins += 1;
     7746: 1348-block  0
        -: 1349:	}
     2254: 1350:      else if (state->hand[player][i] == silver)
     2254: 1350-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1351:	{
    #####: 1352:	  state->coins += 2;
    $$$$$: 1352-block  0
        -: 1353:	}
     2254: 1354:      else if (state->hand[player][i] == gold)
     2254: 1354-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1355:	{
    #####: 1356:	  state->coins += 3;
    $$$$$: 1356-block  0
        -: 1357:	}	
        -: 1358:    }	
        -: 1359:
        -: 1360:  //add bonus
     2000: 1361:  state->coins += bonus;
        -: 1362:
     2000: 1363:  return 0;
     2000: 1363-block  0
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:

 >>>>> smithy: Test 1 completed with 0 passes. <<<<<
 >>>>> smithy: Test 2 completed with 984 passes. <<<<<
 >>>>> smithy: Test 3 completed with 1000 passes. <<<<<

File 'dominion.c'
Lines executed:35.94% of 562
Branches executed:41.01% of 417
Taken at least once:27.10% of 417
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 154091 returned 100% blocks executed 100%
   154091:    8:int compare(const void* a, const void* b) {
   154091:    8-block  0
   154091:    9:  if (*(int*)a > *(int*)b)
   154091:    9-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
     9015:   10:    return 1;
     9015:   10-block  0
   145076:   11:  if (*(int*)a < *(int*)b)
   145076:   11-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
    40928:   12:    return -1;
    40928:   12-block  0
   104148:   13:  return 0;
   104148:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 3000 returned 100% blocks executed 89%
     3000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     3000:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     3000:   44:  SelectStream(1);
     3000:   44-block  0
call    0 returned 100%
     3000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     3000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     3000:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     3000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    33000:   57:  for (i = 0; i < 10; i++)
     3000:   57-block  0
    30000:   57-block  1
    33000:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   330000:   59:      for (j = 0; j < 10; j++)
    30000:   59-block  0
   300000:   59-block  1
   330000:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   300000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   300000:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
   270000:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     3000:   73:  if (numPlayers == 2)
     3000:   73-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   74:    {
     1046:   75:      state->supplyCount[curse] = 10;
     1046:   75-block  0
        -:   76:    }
     1954:   77:  else if (numPlayers == 3)
     1954:   77-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
      979:   79:      state->supplyCount[curse] = 20;
      979:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
      975:   83:      state->supplyCount[curse] = 30;
      975:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     3000:   87:  if (numPlayers == 2)
     3000:   87-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   88:    {
     1046:   89:      state->supplyCount[estate] = 8;
     1046:   90:      state->supplyCount[duchy] = 8;
     1046:   91:      state->supplyCount[province] = 8;
     1046:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
     1954:   95:      state->supplyCount[estate] = 12;
     1954:   96:      state->supplyCount[duchy] = 12;
     1954:   97:      state->supplyCount[province] = 12;
     1954:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     3000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     3000:  102:  state->supplyCount[silver] = 40;
     3000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    63000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     3000:  106-block  0
    60000:  106-block  1
    63000:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   495000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
    60000:  108-block  0
   435000:  108-block  1
   495000:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   465000:  110:	  if (kingdomCards[j] == i)
   465000:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    30000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    30000:  113-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    30000:  113-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    30000:  122:		  state->supplyCount[i] = 10;
    30000:  122-block  0
        -:  123:		}
    30000:  124:	      break;
    30000:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   435000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    11929:  138:  for (i = 0; i < numPlayers; i++)
     3000:  138-block  0
     8929:  138-block  1
    11929:  138-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     8929:  140:      state->deckCount[i] = 0;
    35716:  141:      for (j = 0; j < 3; j++)
     8929:  141-block  0
    26787:  141-block  1
    35716:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    26787:  143:	  state->deck[i][j] = estate;
    26787:  144:	  state->deckCount[i]++;
        -:  145:	}
    71432:  146:      for (j = 3; j < 10; j++)
     8929:  146-block  0
    62503:  146-block  1
    71432:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    62503:  148:	  state->deck[i][j] = copper;
    62503:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    11929:  154:  for (i = 0; i < numPlayers; i++)
     3000:  154-block  0
     8929:  154-block  1
    11929:  154-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
     8929:  156:      if ( shuffle(i, state) < 0 )
     8929:  156-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    11929:  163:  for (i = 0; i < numPlayers; i++)
     3000:  163-block  0
     8929:  163-block  1
    11929:  163-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     8929:  166:      state->handCount[i] = 0;
     8929:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    84000:  176:  for (i = 0; i <= treasure_map; i++)
     3000:  176-block  0
    81000:  176-block  1
    84000:  176-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    81000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     3000:  182:  state->outpostPlayed = 0;
     3000:  183:  state->phase = 0;
     3000:  184:  state->numActions = 1;
     3000:  185:  state->numBuys = 1;
     3000:  186:  state->playedCardCount = 0;
     3000:  187:  state->whoseTurn = 0;
     3000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    18000:  192:  for (it = 0; it < 5; it++){
     3000:  192-block  0
    18000:  192-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    15000:  193:    drawCard(state->whoseTurn, state);
    15000:  193-block  0
call    0 returned 100%
        -:  194:  }
        -:  195:
     3000:  196:  updateCoins(state->whoseTurn, state, 0);
     3000:  196-block  0
call    0 returned 100%
        -:  197:
     3000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 11426 returned 100% blocks executed 100%
    11426:  201:int shuffle(int player, struct gameState *state) {
    11426:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    11426:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    11426:  209:  if (state->deckCount[player] < 1)
    11426:  209-block  0
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
     1059:  210:    return -1;
     1059:  210-block  0
    10367:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
    10367:  211-block  0
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   110390:  214:  while (state->deckCount[player] > 0) {
   110390:  214-block  0
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   100023:  215:    card = floor(Random() * state->deckCount[player]);
   100023:  215-block  0
call    0 returned 100%
   100023:  216:    newDeck[newDeckPos] = state->deck[player][card];
   100023:  217:    newDeckPos++;
   332144:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   232121:  218-block  0
   332144:  218-block  1
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
   232121:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   100023:  221:    state->deckCount[player]--;
   100023:  221-block  0
        -:  222:  }
   110390:  223:  for (i = 0; i < newDeckPos; i++) {
    10367:  223-block  0
   100023:  223-block  1
   110390:  223-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   100023:  224:    state->deck[player][i] = newDeck[i];
   100023:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    11426:  228:  return 0;
    10367:  228-block  0
    11426:  228-block  1
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
        -:  270:}
        -:  271:
function buyCard called 3000 returned 100% blocks executed 86%
     6000:  272:int buyCard(int supplyPos, struct gameState *state) {
     3000:  272-block  0
     3000:  272-block  1
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     3000:  280:  who = state->whoseTurn;
        -:  281:
     3000:  282:  if (state->numBuys < 1){
     3000:  282-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
     3000:  286:  } else if (supplyCount(supplyPos, state) <1){
     3000:  286-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
     3000:  290:  } else if (state->coins < getCost(supplyPos)){
     3000:  290-block  0
call    0 returned 100%
branch  1 taken 41% (fallthrough)
branch  2 taken 59%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
     1242:  293:    return -1;
     1242:  293-block  0
        -:  294:  } else {
     1758:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
     1758:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
     1758:  297-block  0
call    0 returned 100%
        -:  298:  
     1758:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
     1758:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
     1758:  308:  return 0;
     1758:  308-block  0
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 5758 returned 100% blocks executed 100%
     5758:  320:int supplyCount(int card, struct gameState *state) {
     5758:  320-block  0
     5758:  321:  return state->supplyCount[card];
     5758:  321-block  0
        -:  322:}
        -:  323:
function fullDeckCount called 2000 returned 100% blocks executed 94%
     2000:  324:int fullDeckCount(int player, int card, struct gameState *state) {
     2000:  324-block  0
        -:  325:  int i;
     2000:  326:  int count = 0;
        -:  327:
     8763:  328:  for (i = 0; i < state->deckCount[player]; i++)
     2000:  328-block  0
     6763:  328-block  1
     8763:  328-block  2
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  329:    {
     6763:  330:      if (state->deck[player][i] == card) count++;
     6763:  330-block  0
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
      139:  330-block  1
        -:  331:    }
        -:  332:
    27872:  333:  for (i = 0; i < state->handCount[player]; i++)
     2000:  333-block  0
    25872:  333-block  1
    27872:  333-block  2
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -:  334:    {
    25872:  335:      if (state->hand[player][i] == card) count++;
    25872:  335-block  0
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
     3005:  335-block  1
        -:  336:    }
        -:  337:
    13151:  338:  for (i = 0; i < state->discardCount[player]; i++)
     2000:  338-block  0
    11151:  338-block  1
    13151:  338-block  2
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -:  339:    {
    11151:  340:      if (state->discard[player][i] == card) count++;
    11151:  340-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  340-block  1
        -:  341:    }
        -:  342:
     2000:  343:  return count;
     2000:  343-block  0
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  346-block  0
     4000:  347:  return state->whoseTurn;
     4000:  347-block  0
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
    $$$$$:  356-block  1
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
    $$$$$:  380-block  1
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
    $$$$$:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
    $$$$$:  395-block  0
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
    $$$$$:  397-block  0
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
    $$$$$:  402-block  0
    $$$$$:  402-block  1
    $$$$$:  402-block  2
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    $$$$$:  406-block  0
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    $$$$$:  414-block  0
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
    $$$$$:  422-block  1
    $$$$$:  422-block  2
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
    $$$$$:  433-block  1
    $$$$$:  433-block  2
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
    $$$$$:  444-block  1
    $$$$$:  444-block  2
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
    $$$$$:  464-block  1
    $$$$$:  464-block  2
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
    $$$$$:  479-block  1
    $$$$$:  479-block  2
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
    $$$$$:  500-block  1
    $$$$$:  500-block  2
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
    $$$$$:  510-block  1
    $$$$$:  510-block  2
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
        -:  523:}
        -:  524:
function drawCard called 39769 returned 100% blocks executed 100%
    39769:  525:int drawCard(int player, struct gameState *state)
    39769:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
    39769:  528:  if (state->deckCount[player] <= 0){//Deck is empty
    39769:  528-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    12234:  533:    for (i = 0; i < state->discardCount[player];i++){
     1501:  533-block  0
    10733:  533-block  1
    12234:  533-block  2
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
    10733:  534:      state->deck[player][i] = state->discard[player][i];
    10733:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     1501:  538:    state->deckCount[player] = state->discardCount[player];
     1501:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1501:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
     1501:  542-block  0
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     1501:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1501:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     1501:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1501:  559:    if (deckCounter == 0)
     1501:  559-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       63:  560:      return -1;
       63:  560-block  0
        -:  561:
     1438:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1438:  563:    state->deckCount[player]--;
     1438:  564:    state->handCount[player]++;//Increment hand count
     1438:  564-block  0
        -:  565:  }
        -:  566:
        -:  567:  else{
    38268:  568:    int count = state->handCount[player];//Get current hand count for player
    38268:  568-block  0
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    38268:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    38268:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    38268:  576:    state->deckCount[player]--;
    38268:  577:    state->handCount[player]++;//Increment hand count
    38268:  577-block  0
        -:  578:  }
        -:  579:
    39706:  580:  return 0;
    39706:  580-block  0
        -:  581:}
        -:  582:
function getCost called 4758 returned 100% blocks executed 17%
     4758:  583:int getCost(int cardNumber)
     4758:  583-block  0
        -:  584:{
     4758:  585:  switch( cardNumber ) 
     4758:  585-block  0
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 31%
branch  8 taken 33%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 35%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
        -:  601:    case adventurer:
     1483:  602:      return 6;
     1483:  602-block  0
        -:  603:    case council_room:
     1592:  604:      return 5;
     1592:  604-block  0
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
        -:  613:    case smithy:
     1683:  614:      return 4;
     1683:  614-block  0
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
        -:  644:}
        -:  645:
        -:  646:/* Function implementation of 5 player cards */
function adventurerFunc called 1000 returned 100% blocks executed 93%
     1000:  647:int adventurerFunc(int currentPlayer, struct gameState *state) {
     1000:  647-block  0
     1000:  648:  int drawntreasure = 0;
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];
     1000:  651:  int z=0;
        -:  652:
    11768:  653:  while(drawntreasure <= 2) {
     1000:  653-block  0
    11768:  653-block  1
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
    10768:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    10768:  654-block  0
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
      996:  655:      shuffle(currentPlayer, state);
      996:  655-block  0
call    0 returned 100%
        -:  656:    }
    10768:  657:    drawCard(currentPlayer, state);
    10768:  657-block  0
call    0 returned 100%
    10768:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    10768:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
     9721:  659-block  0
branch  2 taken 91% (fallthrough)
branch  3 taken 9%
     8800:  659-block  1
branch  4 taken 12% (fallthrough)
branch  5 taken 88%
     3000:  660:      drawntreasure++;
     3000:  660-block  0
        -:  661:    else{
     7768:  662:      temphand[z]=cardDrawn;
     7768:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     7768:  663-block  0
        -:  664:      // z++;
        -:  665:    }
        -:  666:  }
     1000:  667:  while(z-1 >= 0){
     1000:  667-block  0
     1000:  667-block  1
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:    z=z-1;
    $$$$$:  669-block  0
        -:  670:  }
     1000:  671:  return 0;
     1000:  671-block  0
        -:  672:}
        -:  673:
function smithyFunc called 2000 returned 100% blocks executed 100%
     2000:  674:int smithyFunc(int currentPlayer, int handPos, struct gameState *state) {
     2000:  674-block  0
        -:  675:  int i;
        -:  676:  //+3 Cards
    10000:  677:  for (i = 0; i < 4; i++)
     2000:  677-block  0
    10000:  677-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  678:  {
     8000:  679:    drawCard(currentPlayer, state);
     8000:  679-block  0
call    0 returned 100%
        -:  680:  }
        -:  681:  
        -:  682:  //discard card from hand
     2000:  683:  discardCard(handPos, currentPlayer, state, 1);
     2000:  683-block  0
call    0 returned 100%
        -:  684:
     2000:  685:  return 0;
        -:  686:}
        -:  687:
function councilRoomFunc called 1000 returned 100% blocks executed 100%
     1000:  688:int councilRoomFunc(int currentPlayer, int handPos, struct gameState *state) {
     1000:  688-block  0
        -:  689:  int i;
        -:  690:  //+4 Cards
     4000:  691:  for (i = 1; i < 4; i++)
     1000:  691-block  0
     4000:  691-block  1
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  692:  {
     3000:  693:    drawCard(currentPlayer, state);
     3000:  693-block  0
call    0 returned 100%
        -:  694:  }
        -:  695:  
        -:  696:  //+1 Buy
     1000:  697:  state->numBuys++;
        -:  698:  
        -:  699:  //Each other player draws a card
     5001:  700:  for (i = 0; i <= state->numPlayers; i++)
     1000:  700-block  0
     4001:  700-block  1
     5001:  700-block  2
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  701:  {
     4001:  702:    if ( i != currentPlayer )
     4001:  702-block  0
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:  703:      {
     3001:  704:        drawCard(i, state);
     3001:  704-block  0
call    0 returned 100%
        -:  705:      }
        -:  706:  }
        -:  707:  
        -:  708:  //put played card in played card pile
     1000:  709:  discardCard(handPos, currentPlayer, state, 0);
     1000:  709-block  0
call    0 returned 100%
        -:  710:
     1000:  711:  return 0;
        -:  712:}
        -:  713:
function feastFunc called 0 returned 0% blocks executed 0%
    #####:  714:int feastFunc(int currentPlayer, int choice1, struct gameState *state) {
    $$$$$:  714-block  0
        -:  715:  int i;
        -:  716:  int x;
        -:  717:  int temphand[MAX_HAND];
        -:  718:
    #####:  719:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    $$$$$:  719-block  0
    $$$$$:  719-block  1
    $$$$$:  719-block  2
branch  0 never executed
branch  1 never executed
    #####:  720:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  721:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  722:  }
        -:  723:  //Backup hand
        -:  724:
        -:  725:  //Update Coins for Buy
    #####:  726:  updateCoins(currentPlayer, state, 10);
    $$$$$:  726-block  0
call    0 never executed
    #####:  727:  x = 1;//Condition to loop on
    #####:  728:  while( x == 1) {//Buy one card
    $$$$$:  728-block  0
branch  0 never executed
branch  1 never executed
    #####:  729:    if (supplyCount(choice1, state) <= 0){
    $$$$$:  729-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  730:      if (DEBUG)
        -:  731:        printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:      }
        -:  736:    }
    #####:  737:    else if (state->coins < getCost(choice1)){
    $$$$$:  737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  738:      printf("That card is too expensive!\n");
    $$$$$:  738-block  0
call    0 never executed
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:      }
        -:  743:    }
        -:  744:    else{
        -:  745:
        -:  746:      if (DEBUG){
        -:  747:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:      }
        -:  749:
    #####:  750:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  750-block  0
call    0 never executed
    #####:  751:      x = 0;//No more buying cards
        -:  752:
        -:  753:      if (DEBUG){
        -:  754:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:      }
        -:  756:
        -:  757:    }
        -:  758:  }     
        -:  759:
        -:  760:  //Reset Hand
    #####:  761:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  761-block  0
    $$$$$:  761-block  1
    $$$$$:  761-block  2
branch  0 never executed
branch  1 never executed
    #####:  762:    state->hand[currentPlayer][i] = temphand[i];
    #####:  763:    temphand[i] = -1;
        -:  764:  }
        -:  765:  //Reset Hand
        -:  766:
    #####:  767:  return 0;
    $$$$$:  767-block  0
        -:  768:}
        -:  769:
function remodelFunc called 0 returned 0% blocks executed 0%
    #####:  770:int remodelFunc(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state) {
    $$$$$:  770-block  0
        -:  771:  int i;
        -:  772:  int j;
    #####:  773:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:  
    #####:  775:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  775-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:  {
    #####:  777:    return -1;
    $$$$$:  777-block  0
        -:  778:  }
        -:  779:
    #####:  780:  gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  780-block  0
call    0 never executed
        -:  781:
        -:  782:  //discard card from hand
    #####:  783:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  784:
        -:  785:  //discard trashed card
    #####:  786:  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  786-block  0
    $$$$$:  786-block  1
branch  0 never executed
branch  1 never executed
        -:  787:  {
    #####:  788:    if (state->hand[currentPlayer][i] == j)
    $$$$$:  788-block  0
branch  0 never executed
branch  1 never executed
        -:  789:    {
    #####:  790:      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  790-block  0
call    0 never executed
    #####:  791:      break;
        -:  792:    }
        -:  793:  }
    #####:  794:  return 0;
    $$$$$:  794-block  0
        -:  795:}
        -:  796:
function cardEffect called 4000 returned 100% blocks executed 6%
     4000:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
     4000:  797-block  0
        -:  798:{
        -:  799:  int i;
        -:  800:  int j;
        -:  801:  int k;
        -:  802:  //int x;
        -:  803:  int index;
     4000:  804:  int currentPlayer = whoseTurn(state);
     4000:  804-block  0
call    0 returned 100%
     4000:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
     4000:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  //int temphand[MAX_HAND];// moved above the if statement
        -:  809:  //int drawntreasure=0;
        -:  810:  //int cardDrawn;
        -:  811:  //int z = 0;// this is the counter for the temp hand
     4000:  812:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
     1486:  813:    nextPlayer = 0;
     1486:  813-block  0
        -:  814:  }
        -:  815:  
        -:  816:  //uses switch to select card and perform actions
     4000:  817:  switch( card ) 
     4000:  817-block  0
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  818:  {
        -:  819:    case adventurer:
     1000:  820:      adventurerFunc(currentPlayer, state);
     1000:  820-block  0
call    0 returned 100%
     1000:  821:      break;
        -:  822:			
        -:  823:    case council_room:
     1000:  824:      councilRoomFunc(currentPlayer, handPos, state);
     1000:  824-block  0
call    0 returned 100%
     1000:  825:      break;
        -:  826:      
        -:  827:    case feast:
    #####:  828:      feastFunc(currentPlayer, choice1, state);
    $$$$$:  828-block  0
call    0 never executed
    #####:  829:      break;     			
        -:  830:			
        -:  831:    case gardens:
    #####:  832:      return -1;
    $$$$$:  832-block  0
        -:  833:			
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  837-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  837-block  1
branch  2 never executed
branch  3 never executed
        -:  838:      {
    #####:  839:        return -1;
    $$$$$:  839-block  0
        -:  840:      }
        -:  841:		
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  842-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  842-block  1
branch  2 never executed
branch  3 never executed
        -:  843:      {
    #####:  844:        return -1;
    $$$$$:  844-block  0
        -:  845:      }
        -:  846:
    #####:  847:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  847-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  848:      {
    #####:  849:        return -1;
    $$$$$:  849-block  0
        -:  850:      }
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  852-block  0
call    0 never executed
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  858-block  0
    $$$$$:  858-block  1
branch  0 never executed
branch  1 never executed
        -:  859:      {
    #####:  860:        if (state->hand[currentPlayer][i] == j)
    $$$$$:  860-block  0
branch  0 never executed
branch  1 never executed
        -:  861:          {
    #####:  862:            discardCard(i, currentPlayer, state, 0);			
    $$$$$:  862-block  0
call    0 never executed
    #####:  863:            break;
        -:  864:          }
        -:  865:      }
        -:  866:			
    #####:  867:      return 0;
    $$$$$:  867-block  0
        -:  868:			
        -:  869:    case remodel:
    #####:  870:      remodelFunc(currentPlayer, choice1, choice2, handPos, state);
    $$$$$:  870-block  0
call    0 never executed
    #####:  871:      break;
        -:  872:		
        -:  873:    case smithy:
     2000:  874:      smithyFunc(currentPlayer, handPos, state);
     2000:  874-block  0
call    0 returned 100%
     2000:  875:      break;
        -:  876:		
        -:  877:    case village:
        -:  878:      //+1 Card
    #####:  879:      drawCard(currentPlayer, state);
    $$$$$:  879-block  0
call    0 never executed
        -:  880:			
        -:  881:      //+2 Actions
    #####:  882:      state->numActions = state->numActions + 2;
        -:  883:			
        -:  884:      //discard played card from hand
    #####:  885:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  886:      return 0;
        -:  887:		
        -:  888:    case baron:
    #####:  889:      state->numBuys++;//Increase buys by 1!
    #####:  890:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  890-block  0
branch  0 never executed
branch  1 never executed
    #####:  891:        int p = 0;//Iterator for hand!
    #####:  892:        int card_not_discarded = 1;//Flag for discard set!
    #####:  893:        while(card_not_discarded){
    $$$$$:  893-block  0
    $$$$$:  893-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  893-block  2
    #####:  894:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  894-block  0
branch  0 never executed
branch  1 never executed
    #####:  895:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:            state->discardCount[currentPlayer]++;
    #####:  898:            for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  898-block  0
    $$$$$:  898-block  1
    $$$$$:  898-block  2
branch  0 never executed
branch  1 never executed
    #####:  899:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:            }
    #####:  901:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:            state->handCount[currentPlayer]--;
    #####:  903:            card_not_discarded = 0;//Exit the loop
    $$$$$:  903-block  0
        -:  904:          }
    #####:  905:          else if (p > state->handCount[currentPlayer]){
    $$$$$:  905-block  0
branch  0 never executed
branch  1 never executed
        -:  906:            if(DEBUG) {
        -:  907:              printf("No estate cards in your hand, invalid choice\n");
        -:  908:              printf("Must gain an estate if there are any\n");
        -:  909:            }
    #####:  910:            if (supplyCount(estate, state) > 0){
    $$$$$:  910-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  911:              gainCard(estate, state, 0, currentPlayer);
    $$$$$:  911-block  0
call    0 never executed
    #####:  912:              state->supplyCount[estate]--;//Decrement estates
    #####:  913:              if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  914:          isGameOver(state);
    $$$$$:  914-block  0
call    0 never executed
        -:  915:              }
        -:  916:            }
    #####:  917:            card_not_discarded = 0;//Exit the loop
    $$$$$:  917-block  0
        -:  918:          }
        -:  919:                
        -:  920:          else{
    #####:  921:            p++;//Next card
    $$$$$:  921-block  0
        -:  922:          }
        -:  923:        }
        -:  924:      }
        -:  925:
        -:  926:      else{
    #####:  927:        if (supplyCount(estate, state) > 0){
    $$$$$:  927-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  928:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  928-block  0
call    0 never executed
    #####:  929:          state->supplyCount[estate]--;//Decrement Estates
    #####:  930:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  931:            isGameOver(state);
    $$$$$:  931-block  0
call    0 never executed
        -:  932:          }
        -:  933:        }
        -:  934:      }
        -:  935:        
        -:  936:        
    #####:  937:      return 0;
    $$$$$:  937-block  0
        -:  938:		
        -:  939:    case great_hall:
        -:  940:      //+1 Card
    #####:  941:      drawCard(currentPlayer, state);
    $$$$$:  941-block  0
call    0 never executed
        -:  942:			
        -:  943:      //+1 Actions
    #####:  944:      state->numActions++;
        -:  945:			
        -:  946:      //discard card from hand
    #####:  947:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case minion:
        -:  951:      //+1 action
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  955-block  0
call    0 never executed
        -:  956:			
    #####:  957:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  958:      {
    #####:  959:        state->coins = state->coins + 2;
    $$$$$:  959-block  0
        -:  960:      }
        -:  961:			
    #####:  962:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
        -:  963:      {
        -:  964:        //discard hand
    #####:  965:        while(numHandCards(state) > 0)
    $$$$$:  965-block  0
    $$$$$:  965-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  966:          {
    #####:  967:            discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  967-block  0
call    0 never executed
        -:  968:          }
        -:  969:            
        -:  970:        //draw 4
    #####:  971:        for (i = 0; i < 4; i++)
    $$$$$:  971-block  0
    $$$$$:  971-block  1
branch  0 never executed
branch  1 never executed
        -:  972:          {
    #####:  973:            drawCard(currentPlayer, state);
    $$$$$:  973-block  0
call    0 never executed
        -:  974:          }
        -:  975:            
        -:  976:        //other players discard hand and redraw if hand size > 4
    #####:  977:        for (i = 0; i < state->numPlayers; i++)
    $$$$$:  977-block  0
    $$$$$:  977-block  1
    $$$$$:  977-block  2
branch  0 never executed
branch  1 never executed
        -:  978:          {
    #####:  979:            if (i != currentPlayer)
    $$$$$:  979-block  0
branch  0 never executed
branch  1 never executed
        -:  980:        {
    #####:  981:          if ( state->handCount[i] > 4 )
    $$$$$:  981-block  0
branch  0 never executed
branch  1 never executed
        -:  982:            {
        -:  983:              //discard hand
    #####:  984:              while( state->handCount[i] > 0 )
    $$$$$:  984-block  0
    $$$$$:  984-block  1
branch  0 never executed
branch  1 never executed
        -:  985:          {
    #####:  986:            discardCard(handPos, i, state, 0);
    $$$$$:  986-block  0
call    0 never executed
        -:  987:          }
        -:  988:                  
        -:  989:              //draw 4
    #####:  990:              for (j = 0; j < 4; j++)
    $$$$$:  990-block  0
    $$$$$:  990-block  1
branch  0 never executed
branch  1 never executed
        -:  991:          {
    #####:  992:            drawCard(i, state);
    $$$$$:  992-block  0
call    0 never executed
        -:  993:          }
        -:  994:            }
        -:  995:        }
        -:  996:          }
        -:  997:            
        -:  998:      }
    #####:  999:      return 0;
    $$$$$:  999-block  0
        -: 1000:		
        -: 1001:    case steward:
    #####: 1002:      if (choice1 == 1)
    $$$$$: 1002-block  0
branch  0 never executed
branch  1 never executed
        -: 1003:      {
        -: 1004:        //+2 cards
    #####: 1005:        drawCard(currentPlayer, state);
    $$$$$: 1005-block  0
call    0 never executed
    #####: 1006:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1007:      }
    #####: 1008:          else if (choice1 == 2)
    $$$$$: 1008-block  0
branch  0 never executed
branch  1 never executed
        -: 1009:      {
        -: 1010:        //+2 coins
    #####: 1011:        state->coins = state->coins + 2;
    $$$$$: 1011-block  0
        -: 1012:      }
        -: 1013:          else
        -: 1014:      {
        -: 1015:        //trash 2 cards in hand
    #####: 1016:        discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1016-block  0
call    0 never executed
    #####: 1017:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1018:      }
        -: 1019:			
        -: 1020:      //discard card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1021-block  0
call    0 never executed
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case tribute:
    #####: 1025:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    #####: 1026:        if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1026-block  0
branch  0 never executed
branch  1 never executed
    #####: 1027:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1028:          state->deckCount[nextPlayer]--;
    $$$$$: 1028-block  0
        -: 1029:        }
    #####: 1030:        else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1030-block  0
branch  0 never executed
branch  1 never executed
    #####: 1031:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1032:          state->discardCount[nextPlayer]--;
    $$$$$: 1032-block  0
        -: 1033:        }
        -: 1034:        else{
        -: 1035:          //No Card to Reveal
        -: 1036:          if (DEBUG){
        -: 1037:            printf("No cards to reveal\n");
        -: 1038:          }
        -: 1039:        }
        -: 1040:            }
        -: 1041:            
        -: 1042:            else{
    #####: 1043:        if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1043-block  0
branch  0 never executed
branch  1 never executed
    #####: 1044:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1044-block  0
    $$$$$: 1044-block  1
    $$$$$: 1044-block  2
branch  0 never executed
branch  1 never executed
    #####: 1045:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1046:            state->deckCount[nextPlayer]++;
    #####: 1047:            state->discard[nextPlayer][i] = -1;
    #####: 1048:            state->discardCount[nextPlayer]--;
        -: 1049:          }
        -: 1050:                
    #####: 1051:          shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1051-block  0
call    0 never executed
        -: 1052:        } 
    #####: 1053:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:        state->deckCount[nextPlayer]--;
    #####: 1056:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1057:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1058:        state->deckCount[nextPlayer]--;
    $$$$$: 1058-block  0
        -: 1059:            }    
        -: 1060:                
    #####: 1061:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1061-block  0
branch  0 never executed
branch  1 never executed
    #####: 1062:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1063:        state->playedCardCount++;
    #####: 1064:        tributeRevealedCards[1] = -1;
    $$$$$: 1064-block  0
        -: 1065:            }
        -: 1066:
    #####: 1067:            for (i = 0; i <= 2; i ++){
    $$$$$: 1067-block  0
    $$$$$: 1067-block  1
    $$$$$: 1067-block  2
branch  0 never executed
branch  1 never executed
    #####: 1068:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1068-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1068-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1068-block  2
branch  4 never executed
branch  5 never executed
    #####: 1069:          state->coins += 2;
    $$$$$: 1069-block  0
        -: 1070:        }
        -: 1071:              
    #####: 1072:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1072-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1072-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1072-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1072-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1072-block  4
branch  8 never executed
branch  9 never executed
    #####: 1073:          drawCard(currentPlayer, state);
    $$$$$: 1073-block  0
call    0 never executed
    #####: 1074:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1075:        }
        -: 1076:        else{//Action Card
    #####: 1077:          state->numActions = state->numActions + 2;
    $$$$$: 1077-block  0
        -: 1078:        }
        -: 1079:      }
        -: 1080:	    
    #####: 1081:      return 0;
    $$$$$: 1081-block  0
        -: 1082:		
        -: 1083:    case ambassador:
    #####: 1084:      j = 0;		//used to check if player has enough cards to discard
        -: 1085:
    #####: 1086:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1086-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1086-block  1
branch  2 never executed
branch  3 never executed
        -: 1087:      {
    #####: 1088:        return -1;				
    $$$$$: 1088-block  0
        -: 1089:      }
        -: 1090:
    #####: 1091:          if (choice1 == handPos)
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
        -: 1092:      {
    #####: 1093:        return -1;
    $$$$$: 1093-block  0
        -: 1094:      }
        -: 1095:
    #####: 1096:          for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1096-block  0
    $$$$$: 1096-block  1
    $$$$$: 1096-block  2
branch  0 never executed
branch  1 never executed
        -: 1097:      {
    #####: 1098:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1098-block  2
branch  4 never executed
branch  5 never executed
        -: 1099:          {
    #####: 1100:            j++;
    $$$$$: 1100-block  0
        -: 1101:          }
        -: 1102:      }
    #####: 1103:          if (j < choice2)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
        -: 1104:      {
    #####: 1105:        return -1;				
    $$$$$: 1105-block  0
        -: 1106:      }
        -: 1107:
        -: 1108:          if (DEBUG) 
        -: 1109:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1110:
        -: 1111:          //increase supply count for choosen card by amount being discarded
    #####: 1112:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1113:          
        -: 1114:          //each other player gains a copy of revealed card
    #####: 1115:          for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1115-block  0
    $$$$$: 1115-block  1
    $$$$$: 1115-block  2
branch  0 never executed
branch  1 never executed
        -: 1116:      {
    #####: 1117:        if (i != currentPlayer)
    $$$$$: 1117-block  0
branch  0 never executed
branch  1 never executed
        -: 1118:          {
    #####: 1119:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1119-block  0
call    0 never executed
        -: 1120:          }
        -: 1121:      }
        -: 1122:
        -: 1123:          //discard played card from hand
    #####: 1124:          discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1124-block  0
call    0 never executed
        -: 1125:
        -: 1126:          //trash copies of cards returned to supply
    #####: 1127:          for (j = 0; j < choice2; j++)
    $$$$$: 1127-block  0
    $$$$$: 1127-block  1
branch  0 never executed
branch  1 never executed
        -: 1128:      {
    #####: 1129:        for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1129-block  0
    $$$$$: 1129-block  1
    $$$$$: 1129-block  2
branch  0 never executed
branch  1 never executed
        -: 1130:          {
    #####: 1131:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1131-block  0
branch  0 never executed
branch  1 never executed
        -: 1132:        {
    #####: 1133:          discardCard(i, currentPlayer, state, 1);
    $$$$$: 1133-block  0
call    0 never executed
    #####: 1134:          break;
        -: 1135:        }
        -: 1136:          }
        -: 1137:      }			
        -: 1138:
    #####: 1139:      return 0;
    $$$$$: 1139-block  0
        -: 1140:		
        -: 1141:    case cutpurse:
        -: 1142:
    #####: 1143:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1143-block  0
call    0 never executed
    #####: 1144:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1144-block  0
    $$$$$: 1144-block  1
branch  0 never executed
branch  1 never executed
        -: 1145:      {
    #####: 1146:        if (i != currentPlayer)
    $$$$$: 1146-block  0
branch  0 never executed
branch  1 never executed
        -: 1147:          {
    #####: 1148:            for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1148-block  0
    $$$$$: 1148-block  1
    $$$$$: 1148-block  2
branch  0 never executed
branch  1 never executed
        -: 1149:        {
    #####: 1150:          if (state->hand[i][j] == copper)
    $$$$$: 1150-block  0
branch  0 never executed
branch  1 never executed
        -: 1151:            {
    #####: 1152:              discardCard(j, i, state, 0);
    $$$$$: 1152-block  0
call    0 never executed
    #####: 1153:              break;
        -: 1154:            }
    #####: 1155:          if (j == state->handCount[i])
    $$$$$: 1155-block  0
branch  0 never executed
branch  1 never executed
        -: 1156:            {
    #####: 1157:              for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1157-block  0
    $$$$$: 1157-block  1
    $$$$$: 1157-block  2
branch  0 never executed
branch  1 never executed
        -: 1158:          {
        -: 1159:            if (DEBUG)
        -: 1160:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1161:          }	
    #####: 1162:              break;
    $$$$$: 1162-block  0
        -: 1163:            }		
        -: 1164:        }
        -: 1165:              
        -: 1166:          }
        -: 1167:            
        -: 1168:      }				
        -: 1169:
        -: 1170:      //discard played card from hand
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1171-block  0
call    0 never executed
        -: 1172:
    #####: 1173:      return 0;
        -: 1174:
        -: 1175:		
        -: 1176:    case embargo: 
        -: 1177:      //+2 Coins
    #####: 1178:      state->coins = state->coins + 2;
        -: 1179:			
        -: 1180:      //see if selected pile is in play
    #####: 1181:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1181-block  0
branch  0 never executed
branch  1 never executed
        -: 1182:      {
    #####: 1183:        return -1;
    $$$$$: 1183-block  0
        -: 1184:      }
        -: 1185:			
        -: 1186:      //add embargo token to selected supply pile
    #####: 1187:      state->embargoTokens[choice1]++;
        -: 1188:			
        -: 1189:      //trash card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1190-block  0
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case outpost:
        -: 1194:      //set outpost flag
    #####: 1195:      state->outpostPlayed++;
        -: 1196:			
        -: 1197:      //discard card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1198-block  0
call    0 never executed
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case salvager:
        -: 1202:      //+1 buy
    #####: 1203:      state->numBuys++;
        -: 1204:			
    #####: 1205:      if (choice1)
    $$$$$: 1205-block  0
branch  0 never executed
branch  1 never executed
        -: 1206:      {
        -: 1207:        //gain coins equal to trashed card
    #####: 1208:        state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1208-block  0
call    0 never executed
call    1 never executed
        -: 1209:        //trash card
    #####: 1210:        discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1211:      }
        -: 1212:			
        -: 1213:      //discard card
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1214-block  0
call    0 never executed
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case sea_hag:
    #####: 1218:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1218-block  0
    $$$$$: 1218-block  1
    $$$$$: 1218-block  2
branch  0 never executed
branch  1 never executed
    #####: 1219:        if (i != currentPlayer){
    $$$$$: 1219-block  0
branch  0 never executed
branch  1 never executed
    #####: 1220:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1221:          state->discardCount[i]++;
    #####: 1222:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1222-block  0
        -: 1223:        }
        -: 1224:      }
    #####: 1225:      return 0;
    $$$$$: 1225-block  0
        -: 1226:		
        -: 1227:    case treasure_map:
        -: 1228:      //search hand for another treasure_map
    #####: 1229:      index = -1;
    #####: 1230:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1230-block  0
    $$$$$: 1230-block  1
    $$$$$: 1230-block  2
branch  0 never executed
branch  1 never executed
        -: 1231:      {
    #####: 1232:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1232-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1232-block  1
branch  2 never executed
branch  3 never executed
        -: 1233:          {
    #####: 1234:            index = i;
    #####: 1235:            break;
    $$$$$: 1235-block  0
        -: 1236:          }
        -: 1237:      }
    #####: 1238:      if (index > -1)
    $$$$$: 1238-block  0
branch  0 never executed
branch  1 never executed
        -: 1239:      {
        -: 1240:        //trash both treasure cards
    #####: 1241:        discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1241-block  0
call    0 never executed
    #####: 1242:        discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1243:
        -: 1244:        //gain 4 Gold cards
    #####: 1245:        for (i = 0; i < 4; i++)
    $$$$$: 1245-block  0
branch  0 never executed
branch  1 never executed
        -: 1246:          {
    #####: 1247:            gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1247-block  0
call    0 never executed
        -: 1248:          }
        -: 1249:            
        -: 1250:        //return success
    #####: 1251:        return 1;
    $$$$$: 1251-block  0
        -: 1252:      }
        -: 1253:			
        -: 1254:      //no second treasure_map found in hand
    #####: 1255:      return -1;
    $$$$$: 1255-block  0
        -: 1256:}
        -: 1257:	
     4000: 1258:  return -1;
     4000: 1258-block  0
     4000: 1258-block  1
        -: 1259:}
        -: 1260:
function discardCard called 3000 returned 100% blocks executed 89%
     3000: 1261:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
     3000: 1261-block  0
        -: 1262:{
        -: 1263:	
        -: 1264:  //if card is not trashed, added to Played pile 
     3000: 1265:  if (trashFlag < 1)
     3000: 1265-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1266:    {
        -: 1267:      //add card to played pile
     1000: 1268:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1269:      state->playedCardCount++;
     1000: 1269-block  0
        -: 1270:    }
        -: 1271:	
        -: 1272:  //set played card to -1
     3000: 1273:  state->hand[currentPlayer][handPos] = -1;
        -: 1274:	
        -: 1275:  //remove card from player's hand
     3000: 1276:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
     3000: 1276-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
        4: 1279:      state->handCount[currentPlayer]--;
        4: 1279-block  0
        -: 1280:    }
     2996: 1281:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
     2996: 1281-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
    $$$$$: 1284-block  0
        -: 1285:    }
        -: 1286:  else 	
        -: 1287:    {
        -: 1288:      //replace discarded card with last card in hand
     2996: 1289:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1290:      //set last card to -1
     2996: 1291:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1292:      //reduce number of cards in hand
     2996: 1293:      state->handCount[currentPlayer]--;
     2996: 1293-block  0
        -: 1294:    }
        -: 1295:	
     3000: 1296:  return 0;
     3000: 1296-block  0
        -: 1297:}
        -: 1298:
function gainCard called 2758 returned 100% blocks executed 80%
     2758: 1299:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
     2758: 1299-block  0
        -: 1300:{
        -: 1301:  //Note: supplyPos is enum of choosen card
        -: 1302:	
        -: 1303:  //check if supply pile is empty (0) or card is not used in game (-1)
     2758: 1304:  if ( supplyCount(supplyPos, state) < 1 )
     2758: 1304-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1305:    {
    #####: 1306:      return -1;
    $$$$$: 1306-block  0
        -: 1307:    }
        -: 1308:	
        -: 1309:  //added card for [whoseTurn] current player:
        -: 1310:  // toFlag = 0 : add to discard
        -: 1311:  // toFlag = 1 : add to deck
        -: 1312:  // toFlag = 2 : add to hand
        -: 1313:
     2758: 1314:  if (toFlag == 1)
     2758: 1314-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1315:    {
    #####: 1316:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1317:      state->deckCount[player]++;
    $$$$$: 1317-block  0
        -: 1318:    }
     2758: 1319:  else if (toFlag == 2)
     2758: 1319-block  0
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        -: 1320:    {
     1000: 1321:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     1000: 1322:      state->handCount[player]++;
     1000: 1322-block  0
        -: 1323:    }
        -: 1324:  else
        -: 1325:    {
     1758: 1326:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1758: 1327:      state->discardCount[player]++;
     1758: 1327-block  0
        -: 1328:    }
        -: 1329:	
        -: 1330:  //decrease number in supply pile
     2758: 1331:  state->supplyCount[supplyPos]--;
        -: 1332:	 
     2758: 1333:  return 0;
     2758: 1333-block  0
        -: 1334:}
        -: 1335:
function updateCoins called 3000 returned 100% blocks executed 82%
     3000: 1336:int updateCoins(int player, struct gameState *state, int bonus)
     3000: 1336-block  0
        -: 1337:{
        -: 1338:  int i;
        -: 1339:	
        -: 1340:  //reset coin count
     3000: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
    18000: 1344:  for (i = 0; i < state->handCount[player]; i++)
     3000: 1344-block  0
    15000: 1344-block  1
    18000: 1344-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1345:    {
    15000: 1346:      if (state->hand[player][i] == copper)
    15000: 1346-block  0
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
        -: 1347:	{
    11612: 1348:	  state->coins += 1;
    11612: 1348-block  0
        -: 1349:	}
     3388: 1350:      else if (state->hand[player][i] == silver)
     3388: 1350-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1351:	{
    #####: 1352:	  state->coins += 2;
    $$$$$: 1352-block  0
        -: 1353:	}
     3388: 1354:      else if (state->hand[player][i] == gold)
     3388: 1354-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1355:	{
    #####: 1356:	  state->coins += 3;
    $$$$$: 1356-block  0
        -: 1357:	}	
        -: 1358:    }	
        -: 1359:
        -: 1360:  //add bonus
     3000: 1361:  state->coins += bonus;
        -: 1362:
     3000: 1363:  return 0;
     3000: 1363-block  0
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:
