----------------- Testing function: isGameOver ----------------
TEST 1: Province supply = 0
isGameOver state = 1, expected = 1

TEST 2: Province supply > 1
isGameOver state = 0, expected = 0

TEST 3: Three supply piles = 0
isGameOver state = 1, expected = 1

 >>>>> Success: Testing complete isGameOver <<<<<

File 'dominion.c'
Lines executed:17.41% of 557
Branches executed:17.27% of 417
Taken at least once:14.15% of 417
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    8-block  0
       30:    9:  if (*(int*)a > *(int*)b)
       30:    9-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    $$$$$:   10-block  0
       30:   11:  if (*(int*)a < *(int*)b)
       30:   11-block  0
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:   12:    return -1;
        8:   12-block  0
       22:   13:  return 0;
       22:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 83%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        1:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   44-block  0
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        1:   57-block  0
       10:   57-block  1
       11:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
       10:   59-block  0
      100:   59-block  1
      110:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      100:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
       90:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        1:   73-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        1:   75-block  0
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    $$$$$:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        1:   87-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        1:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
    $$$$$:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        1:  106-block  0
       20:  106-block  1
       21:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
       20:  108-block  0
      145:  108-block  1
      165:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
      155:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       10:  113-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:  113-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       10:  122:		  state->supplyCount[i] = 10;
       10:  122-block  0
        -:  123:		}
       10:  124:	      break;
       10:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        1:  138-block  0
        2:  138-block  1
        3:  138-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        2:  141-block  0
        6:  141-block  1
        8:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        2:  146-block  0
       14:  146-block  1
       16:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        1:  154-block  0
        2:  154-block  1
        3:  154-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        2:  156-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        1:  163-block  0
        2:  163-block  1
        3:  163-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        1:  176-block  0
       27:  176-block  1
       28:  176-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        1:  192-block  0
        6:  192-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
        5:  193-block  0
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        1:  196-block  0
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        2:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
        2:  209-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
    $$$$$:  210-block  0
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        2:  211-block  0
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       22:  214:  while (state->deckCount[player] > 0) {
       22:  214-block  0
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  215-block  0
call    0 returned 100%
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       70:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       50:  218-block  0
       70:  218-block  1
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       50:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
       20:  221-block  0
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
        2:  223-block  0
       20:  223-block  1
       22:  223-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        2:  228-block  0
        2:  228-block  1
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  324-block  0
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
    $$$$$:  328-block  1
    $$$$$:  328-block  2
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
    $$$$$:  333-block  1
    $$$$$:  333-block  2
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
    $$$$$:  338-block  1
    $$$$$:  338-block  2
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
        -:  341:    }
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    $$$$$:  346-block  0
    #####:  347:  return state->whoseTurn;
    $$$$$:  347-block  0
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
    $$$$$:  356-block  1
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
    $$$$$:  380-block  1
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        6:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        6:  395-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        2:  397-block  0
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        4:  402-block  0
      100:  402-block  1
      104:  402-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
      100:  404-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        6:  406-block  0
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        4:  409-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  410:    {
        2:  411:      return 1;
        2:  411-block  0
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        2:  414-block  0
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
    $$$$$:  422-block  1
    $$$$$:  422-block  2
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
    $$$$$:  433-block  1
    $$$$$:  433-block  2
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
    $$$$$:  444-block  1
    $$$$$:  444-block  2
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
    $$$$$:  464-block  1
    $$$$$:  464-block  2
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
    $$$$$:  479-block  1
    $$$$$:  479-block  2
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
    $$$$$:  500-block  1
    $$$$$:  500-block  2
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
    $$$$$:  510-block  1
    $$$$$:  510-block  2
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
        -:  523:}
        -:  524:
function drawCard called 5 returned 100% blocks executed 38%
        5:  525:int drawCard(int player, struct gameState *state)
        5:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        5:  528-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    $$$$$:  533-block  0
    $$$$$:  533-block  1
    $$$$$:  533-block  2
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
    $$$$$:  542-block  0
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    $$$$$:  559-block  0
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
    $$$$$:  560-block  0
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    $$$$$:  564-block  0
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        5:  568-block  0
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        5:  577-block  0
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        5:  580-block  0
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
        -:  644:}
        -:  645:
        -:  646:/* Function implementation of 5 player cards */
function adventurerFunc called 0 returned 0% blocks executed 0%
    #####:  647:int adventurerFunc(int currentPlayer, struct gameState *state) {
    $$$$$:  647-block  0
    #####:  648:  int drawntreasure = 0;
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];
    #####:  651:  int z=0;
        -:  652:
    #####:  653:  while(drawntreasure <= 2) {
    $$$$$:  653-block  0
    $$$$$:  653-block  1
branch  0 never executed
branch  1 never executed
    #####:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    $$$$$:  654-block  0
branch  0 never executed
branch  1 never executed
    #####:  655:      shuffle(currentPlayer, state);
    $$$$$:  655-block  0
call    0 never executed
        -:  656:    }
    #####:  657:    drawCard(currentPlayer, state);
    $$$$$:  657-block  0
call    0 never executed
    #####:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
    $$$$$:  659-block  0
branch  2 never executed
branch  3 never executed
    $$$$$:  659-block  1
branch  4 never executed
branch  5 never executed
    #####:  660:      drawntreasure++;
    $$$$$:  660-block  0
        -:  661:    else{
    #####:  662:      temphand[z]=cardDrawn;
    #####:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    $$$$$:  663-block  0
        -:  664:      // z++;
        -:  665:    }
        -:  666:  }
    #####:  667:  while(z-1 >= 0){
    $$$$$:  667-block  0
    $$$$$:  667-block  1
branch  0 never executed
branch  1 never executed
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:    z=z-1;
    $$$$$:  669-block  0
        -:  670:  }
    #####:  671:  return 0;
    $$$$$:  671-block  0
        -:  672:}
        -:  673:
function smithyFunc called 0 returned 0% blocks executed 0%
    #####:  674:int smithyFunc(int currentPlayer, int handPos, struct gameState *state) {
    $$$$$:  674-block  0
        -:  675:  int i;
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 4; i++)
    $$$$$:  677-block  0
    $$$$$:  677-block  1
branch  0 never executed
branch  1 never executed
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
    $$$$$:  679-block  0
call    0 never executed
        -:  680:  }
        -:  681:  
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
    $$$$$:  683-block  0
call    0 never executed
        -:  684:
    #####:  685:  return 0;
        -:  686:}
        -:  687:
function councilRoomFunc called 0 returned 0% blocks executed 0%
    #####:  688:int councilRoomFunc(int currentPlayer, int handPos, struct gameState *state) {
    $$$$$:  688-block  0
        -:  689:  int i;
        -:  690:  //+4 Cards
    #####:  691:  for (i = 1; i < 4; i++)
    $$$$$:  691-block  0
    $$$$$:  691-block  1
branch  0 never executed
branch  1 never executed
        -:  692:  {
    #####:  693:    drawCard(currentPlayer, state);
    $$$$$:  693-block  0
call    0 never executed
        -:  694:  }
        -:  695:  
        -:  696:  //+1 Buy
    #####:  697:  state->numBuys++;
        -:  698:  
        -:  699:  //Each other player draws a card
    #####:  700:  for (i = 0; i <= state->numPlayers; i++)
    $$$$$:  700-block  0
    $$$$$:  700-block  1
    $$$$$:  700-block  2
branch  0 never executed
branch  1 never executed
        -:  701:  {
    #####:  702:    if ( i != currentPlayer )
    $$$$$:  702-block  0
branch  0 never executed
branch  1 never executed
        -:  703:      {
    #####:  704:        drawCard(i, state);
    $$$$$:  704-block  0
call    0 never executed
        -:  705:      }
        -:  706:  }
        -:  707:  
        -:  708:  //put played card in played card pile
    #####:  709:  discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  709-block  0
call    0 never executed
        -:  710:
    #####:  711:  return 0;
        -:  712:}
        -:  713:
function feastFunc called 0 returned 0% blocks executed 0%
    #####:  714:int feastFunc(int currentPlayer, int choice1, struct gameState *state) {
    $$$$$:  714-block  0
        -:  715:  int i;
        -:  716:  int x;
        -:  717:  int temphand[MAX_HAND];
        -:  718:
    #####:  719:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    $$$$$:  719-block  0
    $$$$$:  719-block  1
    $$$$$:  719-block  2
branch  0 never executed
branch  1 never executed
    #####:  720:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  721:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  722:  }
        -:  723:  //Backup hand
        -:  724:
        -:  725:  //Update Coins for Buy
    #####:  726:  updateCoins(currentPlayer, state, 10);
    $$$$$:  726-block  0
call    0 never executed
    #####:  727:  x = 1;//Condition to loop on
    #####:  728:  while( x == 1) {//Buy one card
    $$$$$:  728-block  0
branch  0 never executed
branch  1 never executed
    #####:  729:    if (supplyCount(choice1, state) <= 0){
    $$$$$:  729-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  730:      if (DEBUG)
        -:  731:        printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:      }
        -:  736:    }
    #####:  737:    else if (state->coins < getCost(choice1)){
    $$$$$:  737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  738:      printf("That card is too expensive!\n");
    $$$$$:  738-block  0
call    0 never executed
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:      }
        -:  743:    }
        -:  744:    else{
        -:  745:
        -:  746:      if (DEBUG){
        -:  747:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:      }
        -:  749:
    #####:  750:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  750-block  0
call    0 never executed
    #####:  751:      x = 0;//No more buying cards
        -:  752:
        -:  753:      if (DEBUG){
        -:  754:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:      }
        -:  756:
        -:  757:    }
        -:  758:  }     
        -:  759:
        -:  760:  //Reset Hand
    #####:  761:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  761-block  0
    $$$$$:  761-block  1
    $$$$$:  761-block  2
branch  0 never executed
branch  1 never executed
    #####:  762:    state->hand[currentPlayer][i] = temphand[i];
    #####:  763:    temphand[i] = -1;
        -:  764:  }
        -:  765:  //Reset Hand
        -:  766:
    #####:  767:  return 0;
    $$$$$:  767-block  0
        -:  768:}
        -:  769:
function remodelFunc called 0 returned 0% blocks executed 0%
    #####:  770:int remodelFunc(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state) {
    $$$$$:  770-block  0
        -:  771:  int i;
        -:  772:  int j;
    #####:  773:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:  
    #####:  775:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  775-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:  {
    #####:  777:    return -1;
    $$$$$:  777-block  0
        -:  778:  }
        -:  779:
    #####:  780:  gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  780-block  0
call    0 never executed
        -:  781:
        -:  782:  //discard card from hand
    #####:  783:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  784:
        -:  785:  //discard trashed card
    #####:  786:  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  786-block  0
    $$$$$:  786-block  1
branch  0 never executed
branch  1 never executed
        -:  787:  {
    #####:  788:    if (state->hand[currentPlayer][i] == j)
    $$$$$:  788-block  0
branch  0 never executed
branch  1 never executed
        -:  789:    {
    #####:  790:      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  790-block  0
call    0 never executed
    #####:  791:      break;
        -:  792:    }
        -:  793:  }
    #####:  794:  return 0;
    $$$$$:  794-block  0
        -:  795:}
        -:  796:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    $$$$$:  797-block  0
        -:  798:{
        -:  799:  int i;
        -:  800:  int j;
        -:  801:  int k;
        -:  802:  //int x;
        -:  803:  int index;
    #####:  804:  int currentPlayer = whoseTurn(state);
    $$$$$:  804-block  0
call    0 never executed
    #####:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
    #####:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  //int temphand[MAX_HAND];// moved above the if statement
        -:  809:  //int drawntreasure=0;
        -:  810:  //int cardDrawn;
        -:  811:  //int z = 0;// this is the counter for the temp hand
    #####:  812:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  813:    nextPlayer = 0;
    $$$$$:  813-block  0
        -:  814:  }
        -:  815:  
        -:  816:  //uses switch to select card and perform actions
    #####:  817:  switch( card ) 
    $$$$$:  817-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  818:  {
        -:  819:    case adventurer:
    #####:  820:      adventurerFunc(currentPlayer, state);
    $$$$$:  820-block  0
call    0 never executed
        -:  821:			
        -:  822:    case council_room:
    #####:  823:      councilRoomFunc(currentPlayer, handPos, state);
    $$$$$:  823-block  0
call    0 never executed
        -:  824:			
        -:  825:    case feast:
    #####:  826:      feastFunc(currentPlayer, choice1, state);      			
    $$$$$:  826-block  0
call    0 never executed
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
    $$$$$:  829-block  0
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:      {
    #####:  836:        return -1;
    $$$$$:  836-block  0
        -:  837:      }
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:      {
    #####:  841:        return -1;
    $$$$$:  841-block  0
        -:  842:      }
        -:  843:
    #####:  844:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:      {
    #####:  846:        return -1;
    $$$$$:  846-block  0
        -:  847:      }
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  849-block  0
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  855-block  0
    $$$$$:  855-block  1
branch  0 never executed
branch  1 never executed
        -:  856:      {
    #####:  857:        if (state->hand[currentPlayer][i] == j)
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:          {
    #####:  859:            discardCard(i, currentPlayer, state, 0);			
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:            break;
        -:  861:          }
        -:  862:      }
        -:  863:			
    #####:  864:      return 0;
    $$$$$:  864-block  0
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      remodelFunc(currentPlayer, choice1, choice2, handPos, state);
    $$$$$:  867-block  0
call    0 never executed
        -:  868:		
        -:  869:    case smithy:
    #####:  870:      smithyFunc(currentPlayer, handPos, state); 
    $$$$$:  870-block  0
call    0 never executed
        -:  871:		
        -:  872:    case village:
        -:  873:      //+1 Card
    #####:  874:      drawCard(currentPlayer, state);
    $$$$$:  874-block  0
call    0 never executed
        -:  875:			
        -:  876:      //+2 Actions
    #####:  877:      state->numActions = state->numActions + 2;
        -:  878:			
        -:  879:      //discard played card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  885-block  0
branch  0 never executed
branch  1 never executed
    #####:  886:        int p = 0;//Iterator for hand!
    #####:  887:        int card_not_discarded = 1;//Flag for discard set!
    #####:  888:        while(card_not_discarded){
    $$$$$:  888-block  0
    $$$$$:  888-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  888-block  2
    #####:  889:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  889-block  0
branch  0 never executed
branch  1 never executed
    #####:  890:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:            state->discardCount[currentPlayer]++;
    #####:  893:            for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  893-block  0
    $$$$$:  893-block  1
    $$$$$:  893-block  2
branch  0 never executed
branch  1 never executed
    #####:  894:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:            }
    #####:  896:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:            state->handCount[currentPlayer]--;
    #####:  898:            card_not_discarded = 0;//Exit the loop
    $$$$$:  898-block  0
        -:  899:          }
    #####:  900:          else if (p > state->handCount[currentPlayer]){
    $$$$$:  900-block  0
branch  0 never executed
branch  1 never executed
        -:  901:            if(DEBUG) {
        -:  902:              printf("No estate cards in your hand, invalid choice\n");
        -:  903:              printf("Must gain an estate if there are any\n");
        -:  904:            }
    #####:  905:            if (supplyCount(estate, state) > 0){
    $$$$$:  905-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:              gainCard(estate, state, 0, currentPlayer);
    $$$$$:  906-block  0
call    0 never executed
    #####:  907:              state->supplyCount[estate]--;//Decrement estates
    #####:  908:              if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:          isGameOver(state);
    $$$$$:  909-block  0
call    0 never executed
        -:  910:              }
        -:  911:            }
    #####:  912:            card_not_discarded = 0;//Exit the loop
    $$$$$:  912-block  0
        -:  913:          }
        -:  914:                
        -:  915:          else{
    #####:  916:            p++;//Next card
    $$$$$:  916-block  0
        -:  917:          }
        -:  918:        }
        -:  919:      }
        -:  920:
        -:  921:      else{
    #####:  922:        if (supplyCount(estate, state) > 0){
    $$$$$:  922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:          state->supplyCount[estate]--;//Decrement Estates
    #####:  925:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:            isGameOver(state);
    $$$$$:  926-block  0
call    0 never executed
        -:  927:          }
        -:  928:        }
        -:  929:      }
        -:  930:        
        -:  931:        
    #####:  932:      return 0;
    $$$$$:  932-block  0
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  950-block  0
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:      {
    #####:  954:        state->coins = state->coins + 2;
    $$$$$:  954-block  0
        -:  955:      }
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  957-block  0
branch  0 never executed
branch  1 never executed
        -:  958:      {
        -:  959:        //discard hand
    #####:  960:        while(numHandCards(state) > 0)
    $$$$$:  960-block  0
    $$$$$:  960-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:          {
    #####:  962:            discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  962-block  0
call    0 never executed
        -:  963:          }
        -:  964:            
        -:  965:        //draw 4
    #####:  966:        for (i = 0; i < 4; i++)
    $$$$$:  966-block  0
    $$$$$:  966-block  1
branch  0 never executed
branch  1 never executed
        -:  967:          {
    #####:  968:            drawCard(currentPlayer, state);
    $$$$$:  968-block  0
call    0 never executed
        -:  969:          }
        -:  970:            
        -:  971:        //other players discard hand and redraw if hand size > 4
    #####:  972:        for (i = 0; i < state->numPlayers; i++)
    $$$$$:  972-block  0
    $$$$$:  972-block  1
    $$$$$:  972-block  2
branch  0 never executed
branch  1 never executed
        -:  973:          {
    #####:  974:            if (i != currentPlayer)
    $$$$$:  974-block  0
branch  0 never executed
branch  1 never executed
        -:  975:        {
    #####:  976:          if ( state->handCount[i] > 4 )
    $$$$$:  976-block  0
branch  0 never executed
branch  1 never executed
        -:  977:            {
        -:  978:              //discard hand
    #####:  979:              while( state->handCount[i] > 0 )
    $$$$$:  979-block  0
    $$$$$:  979-block  1
branch  0 never executed
branch  1 never executed
        -:  980:          {
    #####:  981:            discardCard(handPos, i, state, 0);
    $$$$$:  981-block  0
call    0 never executed
        -:  982:          }
        -:  983:                  
        -:  984:              //draw 4
    #####:  985:              for (j = 0; j < 4; j++)
    $$$$$:  985-block  0
    $$$$$:  985-block  1
branch  0 never executed
branch  1 never executed
        -:  986:          {
    #####:  987:            drawCard(i, state);
    $$$$$:  987-block  0
call    0 never executed
        -:  988:          }
        -:  989:            }
        -:  990:        }
        -:  991:          }
        -:  992:            
        -:  993:      }
    #####:  994:      return 0;
    $$$$$:  994-block  0
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
    $$$$$:  997-block  0
branch  0 never executed
branch  1 never executed
        -:  998:      {
        -:  999:        //+2 cards
    #####: 1000:        drawCard(currentPlayer, state);
    $$$$$: 1000-block  0
call    0 never executed
    #####: 1001:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:      }
    #####: 1003:          else if (choice1 == 2)
    $$$$$: 1003-block  0
branch  0 never executed
branch  1 never executed
        -: 1004:      {
        -: 1005:        //+2 coins
    #####: 1006:        state->coins = state->coins + 2;
    $$$$$: 1006-block  0
        -: 1007:      }
        -: 1008:          else
        -: 1009:      {
        -: 1010:        //trash 2 cards in hand
    #####: 1011:        discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1011-block  0
call    0 never executed
    #####: 1012:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:      }
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1016-block  0
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1020-block  0
branch  0 never executed
branch  1 never executed
    #####: 1021:        if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1021-block  0
branch  0 never executed
branch  1 never executed
    #####: 1022:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:          state->deckCount[nextPlayer]--;
    $$$$$: 1023-block  0
        -: 1024:        }
    #####: 1025:        else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    #####: 1026:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:          state->discardCount[nextPlayer]--;
    $$$$$: 1027-block  0
        -: 1028:        }
        -: 1029:        else{
        -: 1030:          //No Card to Reveal
        -: 1031:          if (DEBUG){
        -: 1032:            printf("No cards to reveal\n");
        -: 1033:          }
        -: 1034:        }
        -: 1035:            }
        -: 1036:            
        -: 1037:            else{
    #####: 1038:        if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
    #####: 1039:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1039-block  0
    $$$$$: 1039-block  1
    $$$$$: 1039-block  2
branch  0 never executed
branch  1 never executed
    #####: 1040:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:            state->deckCount[nextPlayer]++;
    #####: 1042:            state->discard[nextPlayer][i] = -1;
    #####: 1043:            state->discardCount[nextPlayer]--;
        -: 1044:          }
        -: 1045:                
    #####: 1046:          shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1046-block  0
call    0 never executed
        -: 1047:        } 
    #####: 1048:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:        state->deckCount[nextPlayer]--;
    #####: 1051:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:        state->deckCount[nextPlayer]--;
    $$$$$: 1053-block  0
        -: 1054:            }    
        -: 1055:                
    #####: 1056:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:        state->playedCardCount++;
    #####: 1059:        tributeRevealedCards[1] = -1;
    $$$$$: 1059-block  0
        -: 1060:            }
        -: 1061:
    #####: 1062:            for (i = 0; i <= 2; i ++){
    $$$$$: 1062-block  0
    $$$$$: 1062-block  1
    $$$$$: 1062-block  2
branch  0 never executed
branch  1 never executed
    #####: 1063:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1063-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1063-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1063-block  2
branch  4 never executed
branch  5 never executed
    #####: 1064:          state->coins += 2;
    $$$$$: 1064-block  0
        -: 1065:        }
        -: 1066:              
    #####: 1067:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1067-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1067-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1067-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1067-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1067-block  4
branch  8 never executed
branch  9 never executed
    #####: 1068:          drawCard(currentPlayer, state);
    $$$$$: 1068-block  0
call    0 never executed
    #####: 1069:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:        }
        -: 1071:        else{//Action Card
    #####: 1072:          state->numActions = state->numActions + 2;
    $$$$$: 1072-block  0
        -: 1073:        }
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
    $$$$$: 1076-block  0
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1081-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1081-block  1
branch  2 never executed
branch  3 never executed
        -: 1082:      {
    #####: 1083:        return -1;				
    $$$$$: 1083-block  0
        -: 1084:      }
        -: 1085:
    #####: 1086:          if (choice1 == handPos)
    $$$$$: 1086-block  0
branch  0 never executed
branch  1 never executed
        -: 1087:      {
    #####: 1088:        return -1;
    $$$$$: 1088-block  0
        -: 1089:      }
        -: 1090:
    #####: 1091:          for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1091-block  0
    $$$$$: 1091-block  1
    $$$$$: 1091-block  2
branch  0 never executed
branch  1 never executed
        -: 1092:      {
    #####: 1093:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1093-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1093-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1093-block  2
branch  4 never executed
branch  5 never executed
        -: 1094:          {
    #####: 1095:            j++;
    $$$$$: 1095-block  0
        -: 1096:          }
        -: 1097:      }
    #####: 1098:          if (j < choice2)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
        -: 1099:      {
    #####: 1100:        return -1;				
    $$$$$: 1100-block  0
        -: 1101:      }
        -: 1102:
        -: 1103:          if (DEBUG) 
        -: 1104:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:          //increase supply count for choosen card by amount being discarded
    #####: 1107:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:          
        -: 1109:          //each other player gains a copy of revealed card
    #####: 1110:          for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1110-block  0
    $$$$$: 1110-block  1
    $$$$$: 1110-block  2
branch  0 never executed
branch  1 never executed
        -: 1111:      {
    #####: 1112:        if (i != currentPlayer)
    $$$$$: 1112-block  0
branch  0 never executed
branch  1 never executed
        -: 1113:          {
    #####: 1114:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1114-block  0
call    0 never executed
        -: 1115:          }
        -: 1116:      }
        -: 1117:
        -: 1118:          //discard played card from hand
    #####: 1119:          discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1119-block  0
call    0 never executed
        -: 1120:
        -: 1121:          //trash copies of cards returned to supply
    #####: 1122:          for (j = 0; j < choice2; j++)
    $$$$$: 1122-block  0
    $$$$$: 1122-block  1
branch  0 never executed
branch  1 never executed
        -: 1123:      {
    #####: 1124:        for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1124-block  0
    $$$$$: 1124-block  1
    $$$$$: 1124-block  2
branch  0 never executed
branch  1 never executed
        -: 1125:          {
    #####: 1126:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1126-block  0
branch  0 never executed
branch  1 never executed
        -: 1127:        {
    #####: 1128:          discardCard(i, currentPlayer, state, 1);
    $$$$$: 1128-block  0
call    0 never executed
    #####: 1129:          break;
        -: 1130:        }
        -: 1131:          }
        -: 1132:      }			
        -: 1133:
    #####: 1134:      return 0;
    $$$$$: 1134-block  0
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1139-block  0
    $$$$$: 1139-block  1
branch  0 never executed
branch  1 never executed
        -: 1140:      {
    #####: 1141:        if (i != currentPlayer)
    $$$$$: 1141-block  0
branch  0 never executed
branch  1 never executed
        -: 1142:          {
    #####: 1143:            for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1143-block  0
    $$$$$: 1143-block  1
    $$$$$: 1143-block  2
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:          if (state->hand[i][j] == copper)
    $$$$$: 1145-block  0
branch  0 never executed
branch  1 never executed
        -: 1146:            {
    #####: 1147:              discardCard(j, i, state, 0);
    $$$$$: 1147-block  0
call    0 never executed
    #####: 1148:              break;
        -: 1149:            }
    #####: 1150:          if (j == state->handCount[i])
    $$$$$: 1150-block  0
branch  0 never executed
branch  1 never executed
        -: 1151:            {
    #####: 1152:              for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1152-block  0
    $$$$$: 1152-block  1
    $$$$$: 1152-block  2
branch  0 never executed
branch  1 never executed
        -: 1153:          {
        -: 1154:            if (DEBUG)
        -: 1155:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:          }	
    #####: 1157:              break;
    $$$$$: 1157-block  0
        -: 1158:            }		
        -: 1159:        }
        -: 1160:              
        -: 1161:          }
        -: 1162:            
        -: 1163:      }				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1166-block  0
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:      {
    #####: 1178:        return -1;
    $$$$$: 1178-block  0
        -: 1179:      }
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1185-block  0
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1193-block  0
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
    $$$$$: 1200-block  0
branch  0 never executed
branch  1 never executed
        -: 1201:      {
        -: 1202:        //gain coins equal to trashed card
    #####: 1203:        state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1203-block  0
call    0 never executed
call    1 never executed
        -: 1204:        //trash card
    #####: 1205:        discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:      }
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1209-block  0
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1213-block  0
    $$$$$: 1213-block  1
    $$$$$: 1213-block  2
branch  0 never executed
branch  1 never executed
    #####: 1214:        if (i != currentPlayer){
    $$$$$: 1214-block  0
branch  0 never executed
branch  1 never executed
    #####: 1215:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:          state->discardCount[i]++;
    #####: 1217:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1217-block  0
        -: 1218:        }
        -: 1219:      }
    #####: 1220:      return 0;
    $$$$$: 1220-block  0
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1225-block  0
    $$$$$: 1225-block  1
    $$$$$: 1225-block  2
branch  0 never executed
branch  1 never executed
        -: 1226:      {
    #####: 1227:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1227-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1227-block  1
branch  2 never executed
branch  3 never executed
        -: 1228:          {
    #####: 1229:            index = i;
    #####: 1230:            break;
    $$$$$: 1230-block  0
        -: 1231:          }
        -: 1232:      }
    #####: 1233:      if (index > -1)
    $$$$$: 1233-block  0
branch  0 never executed
branch  1 never executed
        -: 1234:      {
        -: 1235:        //trash both treasure cards
    #####: 1236:        discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1236-block  0
call    0 never executed
    #####: 1237:        discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:        //gain 4 Gold cards
    #####: 1240:        for (i = 0; i < 4; i++)
    $$$$$: 1240-block  0
branch  0 never executed
branch  1 never executed
        -: 1241:          {
    #####: 1242:            gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1242-block  0
call    0 never executed
        -: 1243:          }
        -: 1244:            
        -: 1245:        //return success
    #####: 1246:        return 1;
    $$$$$: 1246-block  0
        -: 1247:      }
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
    $$$$$: 1250-block  0
        -: 1251:}
        -: 1252:	
    #####: 1253:  return -1;
    $$$$$: 1253-block  0
    $$$$$: 1253-block  1
        -: 1254:}
        -: 1255:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    $$$$$: 1256-block  0
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
    #####: 1260:  if (trashFlag < 1)
    $$$$$: 1260-block  0
branch  0 never executed
branch  1 never executed
        -: 1261:    {
        -: 1262:      //add card to played pile
    #####: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1264:      state->playedCardCount++;
    $$$$$: 1264-block  0
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
    #####: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
    #####: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    $$$$$: 1271-block  0
branch  0 never executed
branch  1 never executed
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
    $$$$$: 1274-block  0
        -: 1275:    }
    #####: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    $$$$$: 1276-block  0
branch  0 never executed
branch  1 never executed
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
    $$$$$: 1279-block  0
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
    #####: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
    #####: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
    $$$$$: 1288-block  0
        -: 1289:    }
        -: 1290:	
    #####: 1291:  return 0;
    $$$$$: 1291-block  0
        -: 1292:}
        -: 1293:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1294-block  0
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1299-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:    {
    #####: 1301:      return -1;
    $$$$$: 1301-block  0
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
    $$$$$: 1309-block  0
branch  0 never executed
branch  1 never executed
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
    $$$$$: 1312-block  0
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
    $$$$$: 1314-block  0
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
    $$$$$: 1317-block  0
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
    $$$$$: 1322-block  0
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
    $$$$$: 1328-block  0
        -: 1329:}
        -: 1330:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        1: 1331-block  0
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
        1: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
        6: 1339:  for (i = 0; i < state->handCount[player]; i++)
        1: 1339-block  0
        5: 1339-block  1
        6: 1339-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
        5: 1341:      if (state->hand[player][i] == copper)
        5: 1341-block  0
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
        4: 1343:	  state->coins += 1;
        4: 1343-block  0
        -: 1344:	}
        1: 1345:      else if (state->hand[player][i] == silver)
        1: 1345-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
    $$$$$: 1347-block  0
        -: 1348:	}
        1: 1349:      else if (state->hand[player][i] == gold)
        1: 1349-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
    $$$$$: 1351-block  0
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
        1: 1356:  state->coins += bonus;
        -: 1357:
        1: 1358:  return 0;
        1: 1358-block  0
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
----------------- Testing function: fullDeckCount ----------------
TEST 1: Player number invalid (-1) 
fullDeckCount state = 0, expected = 0

TEST 2: x1 adventurer card in player 0's hand and deck
fullDeckCount state = 2, expected = 2

TEST 3: Add x1 adventurer card in player 0's discard pile
fullDeckCount state = 3, expected = 3

 >>>>> Success: Testing complete fullDeckCount <<<<<

File 'dominion.c'
Lines executed:19.03% of 557
Branches executed:20.14% of 417
Taken at least once:16.79% of 417
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 60 returned 100% blocks executed 83%
       60:    8:int compare(const void* a, const void* b) {
       60:    8-block  0
       60:    9:  if (*(int*)a > *(int*)b)
       60:    9-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    $$$$$:   10-block  0
       60:   11:  if (*(int*)a < *(int*)b)
       60:   11-block  0
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       16:   12:    return -1;
       16:   12-block  0
       44:   13:  return 0;
       44:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 2 returned 100% blocks executed 83%
        2:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        2:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        2:   44:  SelectStream(1);
        2:   44-block  0
call    0 returned 100%
        2:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        2:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        2:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
        2:   57-block  0
       20:   57-block  1
       22:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
       20:   59-block  0
      200:   59-block  1
      220:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      200:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
      180:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
        2:   73-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        2:   75-block  0
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    $$$$$:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
        2:   87-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        2:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
    $$$$$:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        2:  106-block  0
       40:  106-block  1
       42:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
       40:  108-block  0
      290:  108-block  1
      330:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
      310:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       20:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       20:  113-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       20:  113-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       20:  122:		  state->supplyCount[i] = 10;
       20:  122-block  0
        -:  123:		}
       20:  124:	      break;
       20:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        6:  138:  for (i = 0; i < numPlayers; i++)
        2:  138-block  0
        4:  138-block  1
        6:  138-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        4:  140:      state->deckCount[i] = 0;
       16:  141:      for (j = 0; j < 3; j++)
        4:  141-block  0
       12:  141-block  1
       16:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       12:  143:	  state->deck[i][j] = estate;
       12:  144:	  state->deckCount[i]++;
        -:  145:	}
       32:  146:      for (j = 3; j < 10; j++)
        4:  146-block  0
       28:  146-block  1
       32:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       28:  148:	  state->deck[i][j] = copper;
       28:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        6:  154:  for (i = 0; i < numPlayers; i++)
        2:  154-block  0
        4:  154-block  1
        6:  154-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        4:  156:      if ( shuffle(i, state) < 0 )
        4:  156-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        6:  163:  for (i = 0; i < numPlayers; i++)
        2:  163-block  0
        4:  163-block  1
        6:  163-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        4:  166:      state->handCount[i] = 0;
        4:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
        2:  176-block  0
       54:  176-block  1
       56:  176-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
        2:  192-block  0
       12:  192-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  193:    drawCard(state->whoseTurn, state);
       10:  193-block  0
call    0 returned 100%
        -:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
        2:  196-block  0
call    0 returned 100%
        -:  197:
        2:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 4 returned 100% blocks executed 94%
        4:  201:int shuffle(int player, struct gameState *state) {
        4:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        4:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        4:  209:  if (state->deckCount[player] < 1)
        4:  209-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
    $$$$$:  210-block  0
        4:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        4:  211-block  0
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       44:  214:  while (state->deckCount[player] > 0) {
       44:  214-block  0
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       40:  215:    card = floor(Random() * state->deckCount[player]);
       40:  215-block  0
call    0 returned 100%
       40:  216:    newDeck[newDeckPos] = state->deck[player][card];
       40:  217:    newDeckPos++;
      140:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      100:  218-block  0
      140:  218-block  1
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      100:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       40:  221:    state->deckCount[player]--;
       40:  221-block  0
        -:  222:  }
       44:  223:  for (i = 0; i < newDeckPos; i++) {
        4:  223-block  0
       40:  223-block  1
       44:  223-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       40:  224:    state->deck[player][i] = newDeck[i];
       40:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        4:  228:  return 0;
        4:  228-block  0
        4:  228-block  1
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
        -:  322:}
        -:  323:
function fullDeckCount called 6 returned 100% blocks executed 100%
        6:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        6:  324-block  0
        -:  325:  int i;
        6:  326:  int count = 0;
        -:  327:
       26:  328:  for (i = 0; i < state->deckCount[player]; i++)
        6:  328-block  0
       20:  328-block  1
       26:  328-block  2
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  329:    {
       20:  330:      if (state->deck[player][i] == card) count++;
       20:  330-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        4:  330-block  1
        -:  331:    }
        -:  332:
       26:  333:  for (i = 0; i < state->handCount[player]; i++)
        6:  333-block  0
       20:  333-block  1
       26:  333-block  2
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  334:    {
       20:  335:      if (state->hand[player][i] == card) count++;
       20:  335-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        4:  335-block  1
        -:  336:    }
        -:  337:
        8:  338:  for (i = 0; i < state->discardCount[player]; i++)
        6:  338-block  0
        2:  338-block  1
        8:  338-block  2
branch  0 taken 25%
branch  1 taken 75% (fallthrough)
        -:  339:    {
        2:  340:      if (state->discard[player][i] == card) count++;
        2:  340-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  340-block  1
        -:  341:    }
        -:  342:
        6:  343:  return count;
        6:  343-block  0
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    $$$$$:  346-block  0
    #####:  347:  return state->whoseTurn;
    $$$$$:  347-block  0
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
    $$$$$:  356-block  1
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
    $$$$$:  380-block  1
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        6:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        6:  395-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        2:  397-block  0
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        4:  402-block  0
      100:  402-block  1
      104:  402-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
      100:  404-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        6:  406-block  0
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        4:  409-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  410:    {
        2:  411:      return 1;
        2:  411-block  0
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        2:  414-block  0
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
    $$$$$:  422-block  1
    $$$$$:  422-block  2
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
    $$$$$:  433-block  1
    $$$$$:  433-block  2
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
    $$$$$:  444-block  1
    $$$$$:  444-block  2
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
    $$$$$:  464-block  1
    $$$$$:  464-block  2
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
    $$$$$:  479-block  1
    $$$$$:  479-block  2
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
    $$$$$:  500-block  1
    $$$$$:  500-block  2
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
    $$$$$:  510-block  1
    $$$$$:  510-block  2
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
        -:  523:}
        -:  524:
function drawCard called 10 returned 100% blocks executed 38%
       10:  525:int drawCard(int player, struct gameState *state)
       10:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
       10:  528:  if (state->deckCount[player] <= 0){//Deck is empty
       10:  528-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    $$$$$:  533-block  0
    $$$$$:  533-block  1
    $$$$$:  533-block  2
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
    $$$$$:  542-block  0
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    $$$$$:  559-block  0
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
    $$$$$:  560-block  0
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    $$$$$:  564-block  0
        -:  565:  }
        -:  566:
        -:  567:  else{
       10:  568:    int count = state->handCount[player];//Get current hand count for player
       10:  568-block  0
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       10:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  576:    state->deckCount[player]--;
       10:  577:    state->handCount[player]++;//Increment hand count
       10:  577-block  0
        -:  578:  }
        -:  579:
       10:  580:  return 0;
       10:  580-block  0
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
        -:  644:}
        -:  645:
        -:  646:/* Function implementation of 5 player cards */
function adventurerFunc called 0 returned 0% blocks executed 0%
    #####:  647:int adventurerFunc(int currentPlayer, struct gameState *state) {
    $$$$$:  647-block  0
    #####:  648:  int drawntreasure = 0;
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];
    #####:  651:  int z=0;
        -:  652:
    #####:  653:  while(drawntreasure <= 2) {
    $$$$$:  653-block  0
    $$$$$:  653-block  1
branch  0 never executed
branch  1 never executed
    #####:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    $$$$$:  654-block  0
branch  0 never executed
branch  1 never executed
    #####:  655:      shuffle(currentPlayer, state);
    $$$$$:  655-block  0
call    0 never executed
        -:  656:    }
    #####:  657:    drawCard(currentPlayer, state);
    $$$$$:  657-block  0
call    0 never executed
    #####:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
    $$$$$:  659-block  0
branch  2 never executed
branch  3 never executed
    $$$$$:  659-block  1
branch  4 never executed
branch  5 never executed
    #####:  660:      drawntreasure++;
    $$$$$:  660-block  0
        -:  661:    else{
    #####:  662:      temphand[z]=cardDrawn;
    #####:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    $$$$$:  663-block  0
        -:  664:      // z++;
        -:  665:    }
        -:  666:  }
    #####:  667:  while(z-1 >= 0){
    $$$$$:  667-block  0
    $$$$$:  667-block  1
branch  0 never executed
branch  1 never executed
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:    z=z-1;
    $$$$$:  669-block  0
        -:  670:  }
    #####:  671:  return 0;
    $$$$$:  671-block  0
        -:  672:}
        -:  673:
function smithyFunc called 0 returned 0% blocks executed 0%
    #####:  674:int smithyFunc(int currentPlayer, int handPos, struct gameState *state) {
    $$$$$:  674-block  0
        -:  675:  int i;
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 4; i++)
    $$$$$:  677-block  0
    $$$$$:  677-block  1
branch  0 never executed
branch  1 never executed
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
    $$$$$:  679-block  0
call    0 never executed
        -:  680:  }
        -:  681:  
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
    $$$$$:  683-block  0
call    0 never executed
        -:  684:
    #####:  685:  return 0;
        -:  686:}
        -:  687:
function councilRoomFunc called 0 returned 0% blocks executed 0%
    #####:  688:int councilRoomFunc(int currentPlayer, int handPos, struct gameState *state) {
    $$$$$:  688-block  0
        -:  689:  int i;
        -:  690:  //+4 Cards
    #####:  691:  for (i = 1; i < 4; i++)
    $$$$$:  691-block  0
    $$$$$:  691-block  1
branch  0 never executed
branch  1 never executed
        -:  692:  {
    #####:  693:    drawCard(currentPlayer, state);
    $$$$$:  693-block  0
call    0 never executed
        -:  694:  }
        -:  695:  
        -:  696:  //+1 Buy
    #####:  697:  state->numBuys++;
        -:  698:  
        -:  699:  //Each other player draws a card
    #####:  700:  for (i = 0; i <= state->numPlayers; i++)
    $$$$$:  700-block  0
    $$$$$:  700-block  1
    $$$$$:  700-block  2
branch  0 never executed
branch  1 never executed
        -:  701:  {
    #####:  702:    if ( i != currentPlayer )
    $$$$$:  702-block  0
branch  0 never executed
branch  1 never executed
        -:  703:      {
    #####:  704:        drawCard(i, state);
    $$$$$:  704-block  0
call    0 never executed
        -:  705:      }
        -:  706:  }
        -:  707:  
        -:  708:  //put played card in played card pile
    #####:  709:  discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  709-block  0
call    0 never executed
        -:  710:
    #####:  711:  return 0;
        -:  712:}
        -:  713:
function feastFunc called 0 returned 0% blocks executed 0%
    #####:  714:int feastFunc(int currentPlayer, int choice1, struct gameState *state) {
    $$$$$:  714-block  0
        -:  715:  int i;
        -:  716:  int x;
        -:  717:  int temphand[MAX_HAND];
        -:  718:
    #####:  719:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    $$$$$:  719-block  0
    $$$$$:  719-block  1
    $$$$$:  719-block  2
branch  0 never executed
branch  1 never executed
    #####:  720:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  721:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  722:  }
        -:  723:  //Backup hand
        -:  724:
        -:  725:  //Update Coins for Buy
    #####:  726:  updateCoins(currentPlayer, state, 10);
    $$$$$:  726-block  0
call    0 never executed
    #####:  727:  x = 1;//Condition to loop on
    #####:  728:  while( x == 1) {//Buy one card
    $$$$$:  728-block  0
branch  0 never executed
branch  1 never executed
    #####:  729:    if (supplyCount(choice1, state) <= 0){
    $$$$$:  729-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  730:      if (DEBUG)
        -:  731:        printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:      }
        -:  736:    }
    #####:  737:    else if (state->coins < getCost(choice1)){
    $$$$$:  737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  738:      printf("That card is too expensive!\n");
    $$$$$:  738-block  0
call    0 never executed
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:      }
        -:  743:    }
        -:  744:    else{
        -:  745:
        -:  746:      if (DEBUG){
        -:  747:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:      }
        -:  749:
    #####:  750:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  750-block  0
call    0 never executed
    #####:  751:      x = 0;//No more buying cards
        -:  752:
        -:  753:      if (DEBUG){
        -:  754:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:      }
        -:  756:
        -:  757:    }
        -:  758:  }     
        -:  759:
        -:  760:  //Reset Hand
    #####:  761:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  761-block  0
    $$$$$:  761-block  1
    $$$$$:  761-block  2
branch  0 never executed
branch  1 never executed
    #####:  762:    state->hand[currentPlayer][i] = temphand[i];
    #####:  763:    temphand[i] = -1;
        -:  764:  }
        -:  765:  //Reset Hand
        -:  766:
    #####:  767:  return 0;
    $$$$$:  767-block  0
        -:  768:}
        -:  769:
function remodelFunc called 0 returned 0% blocks executed 0%
    #####:  770:int remodelFunc(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state) {
    $$$$$:  770-block  0
        -:  771:  int i;
        -:  772:  int j;
    #####:  773:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:  
    #####:  775:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  775-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:  {
    #####:  777:    return -1;
    $$$$$:  777-block  0
        -:  778:  }
        -:  779:
    #####:  780:  gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  780-block  0
call    0 never executed
        -:  781:
        -:  782:  //discard card from hand
    #####:  783:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  784:
        -:  785:  //discard trashed card
    #####:  786:  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  786-block  0
    $$$$$:  786-block  1
branch  0 never executed
branch  1 never executed
        -:  787:  {
    #####:  788:    if (state->hand[currentPlayer][i] == j)
    $$$$$:  788-block  0
branch  0 never executed
branch  1 never executed
        -:  789:    {
    #####:  790:      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  790-block  0
call    0 never executed
    #####:  791:      break;
        -:  792:    }
        -:  793:  }
    #####:  794:  return 0;
    $$$$$:  794-block  0
        -:  795:}
        -:  796:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    $$$$$:  797-block  0
        -:  798:{
        -:  799:  int i;
        -:  800:  int j;
        -:  801:  int k;
        -:  802:  //int x;
        -:  803:  int index;
    #####:  804:  int currentPlayer = whoseTurn(state);
    $$$$$:  804-block  0
call    0 never executed
    #####:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
    #####:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  //int temphand[MAX_HAND];// moved above the if statement
        -:  809:  //int drawntreasure=0;
        -:  810:  //int cardDrawn;
        -:  811:  //int z = 0;// this is the counter for the temp hand
    #####:  812:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  813:    nextPlayer = 0;
    $$$$$:  813-block  0
        -:  814:  }
        -:  815:  
        -:  816:  //uses switch to select card and perform actions
    #####:  817:  switch( card ) 
    $$$$$:  817-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  818:  {
        -:  819:    case adventurer:
    #####:  820:      adventurerFunc(currentPlayer, state);
    $$$$$:  820-block  0
call    0 never executed
        -:  821:			
        -:  822:    case council_room:
    #####:  823:      councilRoomFunc(currentPlayer, handPos, state);
    $$$$$:  823-block  0
call    0 never executed
        -:  824:			
        -:  825:    case feast:
    #####:  826:      feastFunc(currentPlayer, choice1, state);      			
    $$$$$:  826-block  0
call    0 never executed
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
    $$$$$:  829-block  0
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:      {
    #####:  836:        return -1;
    $$$$$:  836-block  0
        -:  837:      }
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:      {
    #####:  841:        return -1;
    $$$$$:  841-block  0
        -:  842:      }
        -:  843:
    #####:  844:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:      {
    #####:  846:        return -1;
    $$$$$:  846-block  0
        -:  847:      }
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  849-block  0
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  855-block  0
    $$$$$:  855-block  1
branch  0 never executed
branch  1 never executed
        -:  856:      {
    #####:  857:        if (state->hand[currentPlayer][i] == j)
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:          {
    #####:  859:            discardCard(i, currentPlayer, state, 0);			
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:            break;
        -:  861:          }
        -:  862:      }
        -:  863:			
    #####:  864:      return 0;
    $$$$$:  864-block  0
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      remodelFunc(currentPlayer, choice1, choice2, handPos, state);
    $$$$$:  867-block  0
call    0 never executed
        -:  868:		
        -:  869:    case smithy:
    #####:  870:      smithyFunc(currentPlayer, handPos, state); 
    $$$$$:  870-block  0
call    0 never executed
        -:  871:		
        -:  872:    case village:
        -:  873:      //+1 Card
    #####:  874:      drawCard(currentPlayer, state);
    $$$$$:  874-block  0
call    0 never executed
        -:  875:			
        -:  876:      //+2 Actions
    #####:  877:      state->numActions = state->numActions + 2;
        -:  878:			
        -:  879:      //discard played card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  885-block  0
branch  0 never executed
branch  1 never executed
    #####:  886:        int p = 0;//Iterator for hand!
    #####:  887:        int card_not_discarded = 1;//Flag for discard set!
    #####:  888:        while(card_not_discarded){
    $$$$$:  888-block  0
    $$$$$:  888-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  888-block  2
    #####:  889:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  889-block  0
branch  0 never executed
branch  1 never executed
    #####:  890:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:            state->discardCount[currentPlayer]++;
    #####:  893:            for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  893-block  0
    $$$$$:  893-block  1
    $$$$$:  893-block  2
branch  0 never executed
branch  1 never executed
    #####:  894:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:            }
    #####:  896:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:            state->handCount[currentPlayer]--;
    #####:  898:            card_not_discarded = 0;//Exit the loop
    $$$$$:  898-block  0
        -:  899:          }
    #####:  900:          else if (p > state->handCount[currentPlayer]){
    $$$$$:  900-block  0
branch  0 never executed
branch  1 never executed
        -:  901:            if(DEBUG) {
        -:  902:              printf("No estate cards in your hand, invalid choice\n");
        -:  903:              printf("Must gain an estate if there are any\n");
        -:  904:            }
    #####:  905:            if (supplyCount(estate, state) > 0){
    $$$$$:  905-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:              gainCard(estate, state, 0, currentPlayer);
    $$$$$:  906-block  0
call    0 never executed
    #####:  907:              state->supplyCount[estate]--;//Decrement estates
    #####:  908:              if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:          isGameOver(state);
    $$$$$:  909-block  0
call    0 never executed
        -:  910:              }
        -:  911:            }
    #####:  912:            card_not_discarded = 0;//Exit the loop
    $$$$$:  912-block  0
        -:  913:          }
        -:  914:                
        -:  915:          else{
    #####:  916:            p++;//Next card
    $$$$$:  916-block  0
        -:  917:          }
        -:  918:        }
        -:  919:      }
        -:  920:
        -:  921:      else{
    #####:  922:        if (supplyCount(estate, state) > 0){
    $$$$$:  922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:          state->supplyCount[estate]--;//Decrement Estates
    #####:  925:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:            isGameOver(state);
    $$$$$:  926-block  0
call    0 never executed
        -:  927:          }
        -:  928:        }
        -:  929:      }
        -:  930:        
        -:  931:        
    #####:  932:      return 0;
    $$$$$:  932-block  0
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  950-block  0
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:      {
    #####:  954:        state->coins = state->coins + 2;
    $$$$$:  954-block  0
        -:  955:      }
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  957-block  0
branch  0 never executed
branch  1 never executed
        -:  958:      {
        -:  959:        //discard hand
    #####:  960:        while(numHandCards(state) > 0)
    $$$$$:  960-block  0
    $$$$$:  960-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:          {
    #####:  962:            discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  962-block  0
call    0 never executed
        -:  963:          }
        -:  964:            
        -:  965:        //draw 4
    #####:  966:        for (i = 0; i < 4; i++)
    $$$$$:  966-block  0
    $$$$$:  966-block  1
branch  0 never executed
branch  1 never executed
        -:  967:          {
    #####:  968:            drawCard(currentPlayer, state);
    $$$$$:  968-block  0
call    0 never executed
        -:  969:          }
        -:  970:            
        -:  971:        //other players discard hand and redraw if hand size > 4
    #####:  972:        for (i = 0; i < state->numPlayers; i++)
    $$$$$:  972-block  0
    $$$$$:  972-block  1
    $$$$$:  972-block  2
branch  0 never executed
branch  1 never executed
        -:  973:          {
    #####:  974:            if (i != currentPlayer)
    $$$$$:  974-block  0
branch  0 never executed
branch  1 never executed
        -:  975:        {
    #####:  976:          if ( state->handCount[i] > 4 )
    $$$$$:  976-block  0
branch  0 never executed
branch  1 never executed
        -:  977:            {
        -:  978:              //discard hand
    #####:  979:              while( state->handCount[i] > 0 )
    $$$$$:  979-block  0
    $$$$$:  979-block  1
branch  0 never executed
branch  1 never executed
        -:  980:          {
    #####:  981:            discardCard(handPos, i, state, 0);
    $$$$$:  981-block  0
call    0 never executed
        -:  982:          }
        -:  983:                  
        -:  984:              //draw 4
    #####:  985:              for (j = 0; j < 4; j++)
    $$$$$:  985-block  0
    $$$$$:  985-block  1
branch  0 never executed
branch  1 never executed
        -:  986:          {
    #####:  987:            drawCard(i, state);
    $$$$$:  987-block  0
call    0 never executed
        -:  988:          }
        -:  989:            }
        -:  990:        }
        -:  991:          }
        -:  992:            
        -:  993:      }
    #####:  994:      return 0;
    $$$$$:  994-block  0
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
    $$$$$:  997-block  0
branch  0 never executed
branch  1 never executed
        -:  998:      {
        -:  999:        //+2 cards
    #####: 1000:        drawCard(currentPlayer, state);
    $$$$$: 1000-block  0
call    0 never executed
    #####: 1001:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:      }
    #####: 1003:          else if (choice1 == 2)
    $$$$$: 1003-block  0
branch  0 never executed
branch  1 never executed
        -: 1004:      {
        -: 1005:        //+2 coins
    #####: 1006:        state->coins = state->coins + 2;
    $$$$$: 1006-block  0
        -: 1007:      }
        -: 1008:          else
        -: 1009:      {
        -: 1010:        //trash 2 cards in hand
    #####: 1011:        discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1011-block  0
call    0 never executed
    #####: 1012:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:      }
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1016-block  0
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1020-block  0
branch  0 never executed
branch  1 never executed
    #####: 1021:        if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1021-block  0
branch  0 never executed
branch  1 never executed
    #####: 1022:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:          state->deckCount[nextPlayer]--;
    $$$$$: 1023-block  0
        -: 1024:        }
    #####: 1025:        else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    #####: 1026:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:          state->discardCount[nextPlayer]--;
    $$$$$: 1027-block  0
        -: 1028:        }
        -: 1029:        else{
        -: 1030:          //No Card to Reveal
        -: 1031:          if (DEBUG){
        -: 1032:            printf("No cards to reveal\n");
        -: 1033:          }
        -: 1034:        }
        -: 1035:            }
        -: 1036:            
        -: 1037:            else{
    #####: 1038:        if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
    #####: 1039:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1039-block  0
    $$$$$: 1039-block  1
    $$$$$: 1039-block  2
branch  0 never executed
branch  1 never executed
    #####: 1040:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:            state->deckCount[nextPlayer]++;
    #####: 1042:            state->discard[nextPlayer][i] = -1;
    #####: 1043:            state->discardCount[nextPlayer]--;
        -: 1044:          }
        -: 1045:                
    #####: 1046:          shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1046-block  0
call    0 never executed
        -: 1047:        } 
    #####: 1048:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:        state->deckCount[nextPlayer]--;
    #####: 1051:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:        state->deckCount[nextPlayer]--;
    $$$$$: 1053-block  0
        -: 1054:            }    
        -: 1055:                
    #####: 1056:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:        state->playedCardCount++;
    #####: 1059:        tributeRevealedCards[1] = -1;
    $$$$$: 1059-block  0
        -: 1060:            }
        -: 1061:
    #####: 1062:            for (i = 0; i <= 2; i ++){
    $$$$$: 1062-block  0
    $$$$$: 1062-block  1
    $$$$$: 1062-block  2
branch  0 never executed
branch  1 never executed
    #####: 1063:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1063-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1063-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1063-block  2
branch  4 never executed
branch  5 never executed
    #####: 1064:          state->coins += 2;
    $$$$$: 1064-block  0
        -: 1065:        }
        -: 1066:              
    #####: 1067:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1067-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1067-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1067-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1067-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1067-block  4
branch  8 never executed
branch  9 never executed
    #####: 1068:          drawCard(currentPlayer, state);
    $$$$$: 1068-block  0
call    0 never executed
    #####: 1069:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:        }
        -: 1071:        else{//Action Card
    #####: 1072:          state->numActions = state->numActions + 2;
    $$$$$: 1072-block  0
        -: 1073:        }
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
    $$$$$: 1076-block  0
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1081-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1081-block  1
branch  2 never executed
branch  3 never executed
        -: 1082:      {
    #####: 1083:        return -1;				
    $$$$$: 1083-block  0
        -: 1084:      }
        -: 1085:
    #####: 1086:          if (choice1 == handPos)
    $$$$$: 1086-block  0
branch  0 never executed
branch  1 never executed
        -: 1087:      {
    #####: 1088:        return -1;
    $$$$$: 1088-block  0
        -: 1089:      }
        -: 1090:
    #####: 1091:          for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1091-block  0
    $$$$$: 1091-block  1
    $$$$$: 1091-block  2
branch  0 never executed
branch  1 never executed
        -: 1092:      {
    #####: 1093:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1093-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1093-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1093-block  2
branch  4 never executed
branch  5 never executed
        -: 1094:          {
    #####: 1095:            j++;
    $$$$$: 1095-block  0
        -: 1096:          }
        -: 1097:      }
    #####: 1098:          if (j < choice2)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
        -: 1099:      {
    #####: 1100:        return -1;				
    $$$$$: 1100-block  0
        -: 1101:      }
        -: 1102:
        -: 1103:          if (DEBUG) 
        -: 1104:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:          //increase supply count for choosen card by amount being discarded
    #####: 1107:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:          
        -: 1109:          //each other player gains a copy of revealed card
    #####: 1110:          for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1110-block  0
    $$$$$: 1110-block  1
    $$$$$: 1110-block  2
branch  0 never executed
branch  1 never executed
        -: 1111:      {
    #####: 1112:        if (i != currentPlayer)
    $$$$$: 1112-block  0
branch  0 never executed
branch  1 never executed
        -: 1113:          {
    #####: 1114:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1114-block  0
call    0 never executed
        -: 1115:          }
        -: 1116:      }
        -: 1117:
        -: 1118:          //discard played card from hand
    #####: 1119:          discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1119-block  0
call    0 never executed
        -: 1120:
        -: 1121:          //trash copies of cards returned to supply
    #####: 1122:          for (j = 0; j < choice2; j++)
    $$$$$: 1122-block  0
    $$$$$: 1122-block  1
branch  0 never executed
branch  1 never executed
        -: 1123:      {
    #####: 1124:        for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1124-block  0
    $$$$$: 1124-block  1
    $$$$$: 1124-block  2
branch  0 never executed
branch  1 never executed
        -: 1125:          {
    #####: 1126:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1126-block  0
branch  0 never executed
branch  1 never executed
        -: 1127:        {
    #####: 1128:          discardCard(i, currentPlayer, state, 1);
    $$$$$: 1128-block  0
call    0 never executed
    #####: 1129:          break;
        -: 1130:        }
        -: 1131:          }
        -: 1132:      }			
        -: 1133:
    #####: 1134:      return 0;
    $$$$$: 1134-block  0
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1139-block  0
    $$$$$: 1139-block  1
branch  0 never executed
branch  1 never executed
        -: 1140:      {
    #####: 1141:        if (i != currentPlayer)
    $$$$$: 1141-block  0
branch  0 never executed
branch  1 never executed
        -: 1142:          {
    #####: 1143:            for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1143-block  0
    $$$$$: 1143-block  1
    $$$$$: 1143-block  2
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:          if (state->hand[i][j] == copper)
    $$$$$: 1145-block  0
branch  0 never executed
branch  1 never executed
        -: 1146:            {
    #####: 1147:              discardCard(j, i, state, 0);
    $$$$$: 1147-block  0
call    0 never executed
    #####: 1148:              break;
        -: 1149:            }
    #####: 1150:          if (j == state->handCount[i])
    $$$$$: 1150-block  0
branch  0 never executed
branch  1 never executed
        -: 1151:            {
    #####: 1152:              for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1152-block  0
    $$$$$: 1152-block  1
    $$$$$: 1152-block  2
branch  0 never executed
branch  1 never executed
        -: 1153:          {
        -: 1154:            if (DEBUG)
        -: 1155:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:          }	
    #####: 1157:              break;
    $$$$$: 1157-block  0
        -: 1158:            }		
        -: 1159:        }
        -: 1160:              
        -: 1161:          }
        -: 1162:            
        -: 1163:      }				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1166-block  0
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:      {
    #####: 1178:        return -1;
    $$$$$: 1178-block  0
        -: 1179:      }
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1185-block  0
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1193-block  0
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
    $$$$$: 1200-block  0
branch  0 never executed
branch  1 never executed
        -: 1201:      {
        -: 1202:        //gain coins equal to trashed card
    #####: 1203:        state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1203-block  0
call    0 never executed
call    1 never executed
        -: 1204:        //trash card
    #####: 1205:        discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:      }
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1209-block  0
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1213-block  0
    $$$$$: 1213-block  1
    $$$$$: 1213-block  2
branch  0 never executed
branch  1 never executed
    #####: 1214:        if (i != currentPlayer){
    $$$$$: 1214-block  0
branch  0 never executed
branch  1 never executed
    #####: 1215:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:          state->discardCount[i]++;
    #####: 1217:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1217-block  0
        -: 1218:        }
        -: 1219:      }
    #####: 1220:      return 0;
    $$$$$: 1220-block  0
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1225-block  0
    $$$$$: 1225-block  1
    $$$$$: 1225-block  2
branch  0 never executed
branch  1 never executed
        -: 1226:      {
    #####: 1227:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1227-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1227-block  1
branch  2 never executed
branch  3 never executed
        -: 1228:          {
    #####: 1229:            index = i;
    #####: 1230:            break;
    $$$$$: 1230-block  0
        -: 1231:          }
        -: 1232:      }
    #####: 1233:      if (index > -1)
    $$$$$: 1233-block  0
branch  0 never executed
branch  1 never executed
        -: 1234:      {
        -: 1235:        //trash both treasure cards
    #####: 1236:        discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1236-block  0
call    0 never executed
    #####: 1237:        discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:        //gain 4 Gold cards
    #####: 1240:        for (i = 0; i < 4; i++)
    $$$$$: 1240-block  0
branch  0 never executed
branch  1 never executed
        -: 1241:          {
    #####: 1242:            gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1242-block  0
call    0 never executed
        -: 1243:          }
        -: 1244:            
        -: 1245:        //return success
    #####: 1246:        return 1;
    $$$$$: 1246-block  0
        -: 1247:      }
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
    $$$$$: 1250-block  0
        -: 1251:}
        -: 1252:	
    #####: 1253:  return -1;
    $$$$$: 1253-block  0
    $$$$$: 1253-block  1
        -: 1254:}
        -: 1255:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    $$$$$: 1256-block  0
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
    #####: 1260:  if (trashFlag < 1)
    $$$$$: 1260-block  0
branch  0 never executed
branch  1 never executed
        -: 1261:    {
        -: 1262:      //add card to played pile
    #####: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1264:      state->playedCardCount++;
    $$$$$: 1264-block  0
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
    #####: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
    #####: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    $$$$$: 1271-block  0
branch  0 never executed
branch  1 never executed
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
    $$$$$: 1274-block  0
        -: 1275:    }
    #####: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    $$$$$: 1276-block  0
branch  0 never executed
branch  1 never executed
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
    $$$$$: 1279-block  0
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
    #####: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
    #####: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
    $$$$$: 1288-block  0
        -: 1289:    }
        -: 1290:	
    #####: 1291:  return 0;
    $$$$$: 1291-block  0
        -: 1292:}
        -: 1293:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1294-block  0
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1299-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:    {
    #####: 1301:      return -1;
    $$$$$: 1301-block  0
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
    $$$$$: 1309-block  0
branch  0 never executed
branch  1 never executed
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
    $$$$$: 1312-block  0
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
    $$$$$: 1314-block  0
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
    $$$$$: 1317-block  0
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
    $$$$$: 1322-block  0
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
    $$$$$: 1328-block  0
        -: 1329:}
        -: 1330:
function updateCoins called 2 returned 100% blocks executed 82%
        2: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        2: 1331-block  0
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
        2: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
       12: 1339:  for (i = 0; i < state->handCount[player]; i++)
        2: 1339-block  0
       10: 1339-block  1
       12: 1339-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
       10: 1341:      if (state->hand[player][i] == copper)
       10: 1341-block  0
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
        8: 1343:	  state->coins += 1;
        8: 1343-block  0
        -: 1344:	}
        2: 1345:      else if (state->hand[player][i] == silver)
        2: 1345-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
    $$$$$: 1347-block  0
        -: 1348:	}
        2: 1349:      else if (state->hand[player][i] == gold)
        2: 1349-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
    $$$$$: 1351-block  0
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
        2: 1356:  state->coins += bonus;
        -: 1357:
        2: 1358:  return 0;
        2: 1358-block  0
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
----------------- Testing function: updateCoins ----------------
TEST 1: Player number invalid (-1) 
updateCoins state = 0, expected = 0

TEST 2: Player 0 has 1 copper, 1 silver, and 1 gold 
updateCoins state = 6, expected = 6

TEST 3: Player 0 has 3 cards in hand: 1 copper, 1 silver, 1 gold and 1 bonus  
updateCoins state = 7, expected = 7

 >>>>> Success: Testing complete updateCoins <<<<<

File 'dominion.c'
Lines executed:19.39% of 557
Branches executed:20.14% of 417
Taken at least once:17.27% of 417
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 90 returned 100% blocks executed 83%
       90:    8:int compare(const void* a, const void* b) {
       90:    8-block  0
       90:    9:  if (*(int*)a > *(int*)b)
       90:    9-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    $$$$$:   10-block  0
       90:   11:  if (*(int*)a < *(int*)b)
       90:   11-block  0
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       24:   12:    return -1;
       24:   12-block  0
       66:   13:  return 0;
       66:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 3 returned 100% blocks executed 83%
        3:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        3:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
        3:   44-block  0
call    0 returned 100%
        3:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        3:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++)
        3:   57-block  0
       30:   57-block  1
       33:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      330:   59:      for (j = 0; j < 10; j++)
       30:   59-block  0
      300:   59-block  1
      330:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      300:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
      270:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
        3:   73-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        3:   75-block  0
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    $$$$$:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
        3:   87-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        3:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
    $$$$$:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       63:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        3:  106-block  0
       60:  106-block  1
       63:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      495:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
       60:  108-block  0
      435:  108-block  1
      495:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
      465:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       30:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       30:  113-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       30:  113-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       30:  122:		  state->supplyCount[i] = 10;
       30:  122-block  0
        -:  123:		}
       30:  124:	      break;
       30:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        9:  138:  for (i = 0; i < numPlayers; i++)
        3:  138-block  0
        6:  138-block  1
        9:  138-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        6:  140:      state->deckCount[i] = 0;
       24:  141:      for (j = 0; j < 3; j++)
        6:  141-block  0
       18:  141-block  1
       24:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       18:  143:	  state->deck[i][j] = estate;
       18:  144:	  state->deckCount[i]++;
        -:  145:	}
       48:  146:      for (j = 3; j < 10; j++)
        6:  146-block  0
       42:  146-block  1
       48:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       42:  148:	  state->deck[i][j] = copper;
       42:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        9:  154:  for (i = 0; i < numPlayers; i++)
        3:  154-block  0
        6:  154-block  1
        9:  154-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        6:  156:      if ( shuffle(i, state) < 0 )
        6:  156-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        9:  163:  for (i = 0; i < numPlayers; i++)
        3:  163-block  0
        6:  163-block  1
        9:  163-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        6:  166:      state->handCount[i] = 0;
        6:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       84:  176:  for (i = 0; i <= treasure_map; i++)
        3:  176-block  0
       81:  176-block  1
       84:  176-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       18:  192:  for (it = 0; it < 5; it++){
        3:  192-block  0
       18:  192-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  193:    drawCard(state->whoseTurn, state);
       15:  193-block  0
call    0 returned 100%
        -:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
        3:  196-block  0
call    0 returned 100%
        -:  197:
        3:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 6 returned 100% blocks executed 94%
        6:  201:int shuffle(int player, struct gameState *state) {
        6:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        6:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        6:  209:  if (state->deckCount[player] < 1)
        6:  209-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
    $$$$$:  210-block  0
        6:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        6:  211-block  0
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       66:  214:  while (state->deckCount[player] > 0) {
       66:  214-block  0
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  215:    card = floor(Random() * state->deckCount[player]);
       60:  215-block  0
call    0 returned 100%
       60:  216:    newDeck[newDeckPos] = state->deck[player][card];
       60:  217:    newDeckPos++;
      210:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      150:  218-block  0
      210:  218-block  1
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      150:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       60:  221:    state->deckCount[player]--;
       60:  221-block  0
        -:  222:  }
       66:  223:  for (i = 0; i < newDeckPos; i++) {
        6:  223-block  0
       60:  223-block  1
       66:  223-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  224:    state->deck[player][i] = newDeck[i];
       60:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        6:  228:  return 0;
        6:  228-block  0
        6:  228-block  1
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
        -:  322:}
        -:  323:
function fullDeckCount called 6 returned 100% blocks executed 100%
        6:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        6:  324-block  0
        -:  325:  int i;
        6:  326:  int count = 0;
        -:  327:
       26:  328:  for (i = 0; i < state->deckCount[player]; i++)
        6:  328-block  0
       20:  328-block  1
       26:  328-block  2
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  329:    {
       20:  330:      if (state->deck[player][i] == card) count++;
       20:  330-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        4:  330-block  1
        -:  331:    }
        -:  332:
       26:  333:  for (i = 0; i < state->handCount[player]; i++)
        6:  333-block  0
       20:  333-block  1
       26:  333-block  2
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  334:    {
       20:  335:      if (state->hand[player][i] == card) count++;
       20:  335-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        4:  335-block  1
        -:  336:    }
        -:  337:
        8:  338:  for (i = 0; i < state->discardCount[player]; i++)
        6:  338-block  0
        2:  338-block  1
        8:  338-block  2
branch  0 taken 25%
branch  1 taken 75% (fallthrough)
        -:  339:    {
        2:  340:      if (state->discard[player][i] == card) count++;
        2:  340-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  340-block  1
        -:  341:    }
        -:  342:
        6:  343:  return count;
        6:  343-block  0
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    $$$$$:  346-block  0
    #####:  347:  return state->whoseTurn;
    $$$$$:  347-block  0
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
    $$$$$:  356-block  1
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
    $$$$$:  380-block  1
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        6:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        6:  395-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        2:  397-block  0
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        4:  402-block  0
      100:  402-block  1
      104:  402-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
      100:  404-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        6:  406-block  0
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        4:  409-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  410:    {
        2:  411:      return 1;
        2:  411-block  0
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        2:  414-block  0
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
    $$$$$:  422-block  1
    $$$$$:  422-block  2
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
    $$$$$:  433-block  1
    $$$$$:  433-block  2
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
    $$$$$:  444-block  1
    $$$$$:  444-block  2
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
    $$$$$:  464-block  1
    $$$$$:  464-block  2
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
    $$$$$:  479-block  1
    $$$$$:  479-block  2
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
    $$$$$:  500-block  1
    $$$$$:  500-block  2
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
    $$$$$:  510-block  1
    $$$$$:  510-block  2
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
        -:  523:}
        -:  524:
function drawCard called 15 returned 100% blocks executed 38%
       15:  525:int drawCard(int player, struct gameState *state)
       15:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
       15:  528:  if (state->deckCount[player] <= 0){//Deck is empty
       15:  528-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    $$$$$:  533-block  0
    $$$$$:  533-block  1
    $$$$$:  533-block  2
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
    $$$$$:  542-block  0
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    $$$$$:  559-block  0
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
    $$$$$:  560-block  0
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    $$$$$:  564-block  0
        -:  565:  }
        -:  566:
        -:  567:  else{
       15:  568:    int count = state->handCount[player];//Get current hand count for player
       15:  568-block  0
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       15:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  576:    state->deckCount[player]--;
       15:  577:    state->handCount[player]++;//Increment hand count
       15:  577-block  0
        -:  578:  }
        -:  579:
       15:  580:  return 0;
       15:  580-block  0
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
        -:  644:}
        -:  645:
        -:  646:/* Function implementation of 5 player cards */
function adventurerFunc called 0 returned 0% blocks executed 0%
    #####:  647:int adventurerFunc(int currentPlayer, struct gameState *state) {
    $$$$$:  647-block  0
    #####:  648:  int drawntreasure = 0;
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];
    #####:  651:  int z=0;
        -:  652:
    #####:  653:  while(drawntreasure <= 2) {
    $$$$$:  653-block  0
    $$$$$:  653-block  1
branch  0 never executed
branch  1 never executed
    #####:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    $$$$$:  654-block  0
branch  0 never executed
branch  1 never executed
    #####:  655:      shuffle(currentPlayer, state);
    $$$$$:  655-block  0
call    0 never executed
        -:  656:    }
    #####:  657:    drawCard(currentPlayer, state);
    $$$$$:  657-block  0
call    0 never executed
    #####:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
    $$$$$:  659-block  0
branch  2 never executed
branch  3 never executed
    $$$$$:  659-block  1
branch  4 never executed
branch  5 never executed
    #####:  660:      drawntreasure++;
    $$$$$:  660-block  0
        -:  661:    else{
    #####:  662:      temphand[z]=cardDrawn;
    #####:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    $$$$$:  663-block  0
        -:  664:      // z++;
        -:  665:    }
        -:  666:  }
    #####:  667:  while(z-1 >= 0){
    $$$$$:  667-block  0
    $$$$$:  667-block  1
branch  0 never executed
branch  1 never executed
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:    z=z-1;
    $$$$$:  669-block  0
        -:  670:  }
    #####:  671:  return 0;
    $$$$$:  671-block  0
        -:  672:}
        -:  673:
function smithyFunc called 0 returned 0% blocks executed 0%
    #####:  674:int smithyFunc(int currentPlayer, int handPos, struct gameState *state) {
    $$$$$:  674-block  0
        -:  675:  int i;
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 4; i++)
    $$$$$:  677-block  0
    $$$$$:  677-block  1
branch  0 never executed
branch  1 never executed
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
    $$$$$:  679-block  0
call    0 never executed
        -:  680:  }
        -:  681:  
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
    $$$$$:  683-block  0
call    0 never executed
        -:  684:
    #####:  685:  return 0;
        -:  686:}
        -:  687:
function councilRoomFunc called 0 returned 0% blocks executed 0%
    #####:  688:int councilRoomFunc(int currentPlayer, int handPos, struct gameState *state) {
    $$$$$:  688-block  0
        -:  689:  int i;
        -:  690:  //+4 Cards
    #####:  691:  for (i = 1; i < 4; i++)
    $$$$$:  691-block  0
    $$$$$:  691-block  1
branch  0 never executed
branch  1 never executed
        -:  692:  {
    #####:  693:    drawCard(currentPlayer, state);
    $$$$$:  693-block  0
call    0 never executed
        -:  694:  }
        -:  695:  
        -:  696:  //+1 Buy
    #####:  697:  state->numBuys++;
        -:  698:  
        -:  699:  //Each other player draws a card
    #####:  700:  for (i = 0; i <= state->numPlayers; i++)
    $$$$$:  700-block  0
    $$$$$:  700-block  1
    $$$$$:  700-block  2
branch  0 never executed
branch  1 never executed
        -:  701:  {
    #####:  702:    if ( i != currentPlayer )
    $$$$$:  702-block  0
branch  0 never executed
branch  1 never executed
        -:  703:      {
    #####:  704:        drawCard(i, state);
    $$$$$:  704-block  0
call    0 never executed
        -:  705:      }
        -:  706:  }
        -:  707:  
        -:  708:  //put played card in played card pile
    #####:  709:  discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  709-block  0
call    0 never executed
        -:  710:
    #####:  711:  return 0;
        -:  712:}
        -:  713:
function feastFunc called 0 returned 0% blocks executed 0%
    #####:  714:int feastFunc(int currentPlayer, int choice1, struct gameState *state) {
    $$$$$:  714-block  0
        -:  715:  int i;
        -:  716:  int x;
        -:  717:  int temphand[MAX_HAND];
        -:  718:
    #####:  719:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    $$$$$:  719-block  0
    $$$$$:  719-block  1
    $$$$$:  719-block  2
branch  0 never executed
branch  1 never executed
    #####:  720:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  721:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  722:  }
        -:  723:  //Backup hand
        -:  724:
        -:  725:  //Update Coins for Buy
    #####:  726:  updateCoins(currentPlayer, state, 10);
    $$$$$:  726-block  0
call    0 never executed
    #####:  727:  x = 1;//Condition to loop on
    #####:  728:  while( x == 1) {//Buy one card
    $$$$$:  728-block  0
branch  0 never executed
branch  1 never executed
    #####:  729:    if (supplyCount(choice1, state) <= 0){
    $$$$$:  729-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  730:      if (DEBUG)
        -:  731:        printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:      }
        -:  736:    }
    #####:  737:    else if (state->coins < getCost(choice1)){
    $$$$$:  737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  738:      printf("That card is too expensive!\n");
    $$$$$:  738-block  0
call    0 never executed
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:      }
        -:  743:    }
        -:  744:    else{
        -:  745:
        -:  746:      if (DEBUG){
        -:  747:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:      }
        -:  749:
    #####:  750:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  750-block  0
call    0 never executed
    #####:  751:      x = 0;//No more buying cards
        -:  752:
        -:  753:      if (DEBUG){
        -:  754:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:      }
        -:  756:
        -:  757:    }
        -:  758:  }     
        -:  759:
        -:  760:  //Reset Hand
    #####:  761:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  761-block  0
    $$$$$:  761-block  1
    $$$$$:  761-block  2
branch  0 never executed
branch  1 never executed
    #####:  762:    state->hand[currentPlayer][i] = temphand[i];
    #####:  763:    temphand[i] = -1;
        -:  764:  }
        -:  765:  //Reset Hand
        -:  766:
    #####:  767:  return 0;
    $$$$$:  767-block  0
        -:  768:}
        -:  769:
function remodelFunc called 0 returned 0% blocks executed 0%
    #####:  770:int remodelFunc(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state) {
    $$$$$:  770-block  0
        -:  771:  int i;
        -:  772:  int j;
    #####:  773:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:  
    #####:  775:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  775-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:  {
    #####:  777:    return -1;
    $$$$$:  777-block  0
        -:  778:  }
        -:  779:
    #####:  780:  gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  780-block  0
call    0 never executed
        -:  781:
        -:  782:  //discard card from hand
    #####:  783:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  784:
        -:  785:  //discard trashed card
    #####:  786:  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  786-block  0
    $$$$$:  786-block  1
branch  0 never executed
branch  1 never executed
        -:  787:  {
    #####:  788:    if (state->hand[currentPlayer][i] == j)
    $$$$$:  788-block  0
branch  0 never executed
branch  1 never executed
        -:  789:    {
    #####:  790:      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  790-block  0
call    0 never executed
    #####:  791:      break;
        -:  792:    }
        -:  793:  }
    #####:  794:  return 0;
    $$$$$:  794-block  0
        -:  795:}
        -:  796:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    $$$$$:  797-block  0
        -:  798:{
        -:  799:  int i;
        -:  800:  int j;
        -:  801:  int k;
        -:  802:  //int x;
        -:  803:  int index;
    #####:  804:  int currentPlayer = whoseTurn(state);
    $$$$$:  804-block  0
call    0 never executed
    #####:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
    #####:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  //int temphand[MAX_HAND];// moved above the if statement
        -:  809:  //int drawntreasure=0;
        -:  810:  //int cardDrawn;
        -:  811:  //int z = 0;// this is the counter for the temp hand
    #####:  812:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  813:    nextPlayer = 0;
    $$$$$:  813-block  0
        -:  814:  }
        -:  815:  
        -:  816:  //uses switch to select card and perform actions
    #####:  817:  switch( card ) 
    $$$$$:  817-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  818:  {
        -:  819:    case adventurer:
    #####:  820:      adventurerFunc(currentPlayer, state);
    $$$$$:  820-block  0
call    0 never executed
        -:  821:			
        -:  822:    case council_room:
    #####:  823:      councilRoomFunc(currentPlayer, handPos, state);
    $$$$$:  823-block  0
call    0 never executed
        -:  824:			
        -:  825:    case feast:
    #####:  826:      feastFunc(currentPlayer, choice1, state);      			
    $$$$$:  826-block  0
call    0 never executed
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
    $$$$$:  829-block  0
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:      {
    #####:  836:        return -1;
    $$$$$:  836-block  0
        -:  837:      }
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:      {
    #####:  841:        return -1;
    $$$$$:  841-block  0
        -:  842:      }
        -:  843:
    #####:  844:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:      {
    #####:  846:        return -1;
    $$$$$:  846-block  0
        -:  847:      }
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  849-block  0
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  855-block  0
    $$$$$:  855-block  1
branch  0 never executed
branch  1 never executed
        -:  856:      {
    #####:  857:        if (state->hand[currentPlayer][i] == j)
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:          {
    #####:  859:            discardCard(i, currentPlayer, state, 0);			
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:            break;
        -:  861:          }
        -:  862:      }
        -:  863:			
    #####:  864:      return 0;
    $$$$$:  864-block  0
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      remodelFunc(currentPlayer, choice1, choice2, handPos, state);
    $$$$$:  867-block  0
call    0 never executed
        -:  868:		
        -:  869:    case smithy:
    #####:  870:      smithyFunc(currentPlayer, handPos, state); 
    $$$$$:  870-block  0
call    0 never executed
        -:  871:		
        -:  872:    case village:
        -:  873:      //+1 Card
    #####:  874:      drawCard(currentPlayer, state);
    $$$$$:  874-block  0
call    0 never executed
        -:  875:			
        -:  876:      //+2 Actions
    #####:  877:      state->numActions = state->numActions + 2;
        -:  878:			
        -:  879:      //discard played card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  885-block  0
branch  0 never executed
branch  1 never executed
    #####:  886:        int p = 0;//Iterator for hand!
    #####:  887:        int card_not_discarded = 1;//Flag for discard set!
    #####:  888:        while(card_not_discarded){
    $$$$$:  888-block  0
    $$$$$:  888-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  888-block  2
    #####:  889:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  889-block  0
branch  0 never executed
branch  1 never executed
    #####:  890:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:            state->discardCount[currentPlayer]++;
    #####:  893:            for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  893-block  0
    $$$$$:  893-block  1
    $$$$$:  893-block  2
branch  0 never executed
branch  1 never executed
    #####:  894:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:            }
    #####:  896:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:            state->handCount[currentPlayer]--;
    #####:  898:            card_not_discarded = 0;//Exit the loop
    $$$$$:  898-block  0
        -:  899:          }
    #####:  900:          else if (p > state->handCount[currentPlayer]){
    $$$$$:  900-block  0
branch  0 never executed
branch  1 never executed
        -:  901:            if(DEBUG) {
        -:  902:              printf("No estate cards in your hand, invalid choice\n");
        -:  903:              printf("Must gain an estate if there are any\n");
        -:  904:            }
    #####:  905:            if (supplyCount(estate, state) > 0){
    $$$$$:  905-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:              gainCard(estate, state, 0, currentPlayer);
    $$$$$:  906-block  0
call    0 never executed
    #####:  907:              state->supplyCount[estate]--;//Decrement estates
    #####:  908:              if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:          isGameOver(state);
    $$$$$:  909-block  0
call    0 never executed
        -:  910:              }
        -:  911:            }
    #####:  912:            card_not_discarded = 0;//Exit the loop
    $$$$$:  912-block  0
        -:  913:          }
        -:  914:                
        -:  915:          else{
    #####:  916:            p++;//Next card
    $$$$$:  916-block  0
        -:  917:          }
        -:  918:        }
        -:  919:      }
        -:  920:
        -:  921:      else{
    #####:  922:        if (supplyCount(estate, state) > 0){
    $$$$$:  922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:          state->supplyCount[estate]--;//Decrement Estates
    #####:  925:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:            isGameOver(state);
    $$$$$:  926-block  0
call    0 never executed
        -:  927:          }
        -:  928:        }
        -:  929:      }
        -:  930:        
        -:  931:        
    #####:  932:      return 0;
    $$$$$:  932-block  0
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  950-block  0
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:      {
    #####:  954:        state->coins = state->coins + 2;
    $$$$$:  954-block  0
        -:  955:      }
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  957-block  0
branch  0 never executed
branch  1 never executed
        -:  958:      {
        -:  959:        //discard hand
    #####:  960:        while(numHandCards(state) > 0)
    $$$$$:  960-block  0
    $$$$$:  960-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:          {
    #####:  962:            discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  962-block  0
call    0 never executed
        -:  963:          }
        -:  964:            
        -:  965:        //draw 4
    #####:  966:        for (i = 0; i < 4; i++)
    $$$$$:  966-block  0
    $$$$$:  966-block  1
branch  0 never executed
branch  1 never executed
        -:  967:          {
    #####:  968:            drawCard(currentPlayer, state);
    $$$$$:  968-block  0
call    0 never executed
        -:  969:          }
        -:  970:            
        -:  971:        //other players discard hand and redraw if hand size > 4
    #####:  972:        for (i = 0; i < state->numPlayers; i++)
    $$$$$:  972-block  0
    $$$$$:  972-block  1
    $$$$$:  972-block  2
branch  0 never executed
branch  1 never executed
        -:  973:          {
    #####:  974:            if (i != currentPlayer)
    $$$$$:  974-block  0
branch  0 never executed
branch  1 never executed
        -:  975:        {
    #####:  976:          if ( state->handCount[i] > 4 )
    $$$$$:  976-block  0
branch  0 never executed
branch  1 never executed
        -:  977:            {
        -:  978:              //discard hand
    #####:  979:              while( state->handCount[i] > 0 )
    $$$$$:  979-block  0
    $$$$$:  979-block  1
branch  0 never executed
branch  1 never executed
        -:  980:          {
    #####:  981:            discardCard(handPos, i, state, 0);
    $$$$$:  981-block  0
call    0 never executed
        -:  982:          }
        -:  983:                  
        -:  984:              //draw 4
    #####:  985:              for (j = 0; j < 4; j++)
    $$$$$:  985-block  0
    $$$$$:  985-block  1
branch  0 never executed
branch  1 never executed
        -:  986:          {
    #####:  987:            drawCard(i, state);
    $$$$$:  987-block  0
call    0 never executed
        -:  988:          }
        -:  989:            }
        -:  990:        }
        -:  991:          }
        -:  992:            
        -:  993:      }
    #####:  994:      return 0;
    $$$$$:  994-block  0
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
    $$$$$:  997-block  0
branch  0 never executed
branch  1 never executed
        -:  998:      {
        -:  999:        //+2 cards
    #####: 1000:        drawCard(currentPlayer, state);
    $$$$$: 1000-block  0
call    0 never executed
    #####: 1001:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:      }
    #####: 1003:          else if (choice1 == 2)
    $$$$$: 1003-block  0
branch  0 never executed
branch  1 never executed
        -: 1004:      {
        -: 1005:        //+2 coins
    #####: 1006:        state->coins = state->coins + 2;
    $$$$$: 1006-block  0
        -: 1007:      }
        -: 1008:          else
        -: 1009:      {
        -: 1010:        //trash 2 cards in hand
    #####: 1011:        discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1011-block  0
call    0 never executed
    #####: 1012:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:      }
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1016-block  0
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1020-block  0
branch  0 never executed
branch  1 never executed
    #####: 1021:        if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1021-block  0
branch  0 never executed
branch  1 never executed
    #####: 1022:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:          state->deckCount[nextPlayer]--;
    $$$$$: 1023-block  0
        -: 1024:        }
    #####: 1025:        else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    #####: 1026:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:          state->discardCount[nextPlayer]--;
    $$$$$: 1027-block  0
        -: 1028:        }
        -: 1029:        else{
        -: 1030:          //No Card to Reveal
        -: 1031:          if (DEBUG){
        -: 1032:            printf("No cards to reveal\n");
        -: 1033:          }
        -: 1034:        }
        -: 1035:            }
        -: 1036:            
        -: 1037:            else{
    #####: 1038:        if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
    #####: 1039:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1039-block  0
    $$$$$: 1039-block  1
    $$$$$: 1039-block  2
branch  0 never executed
branch  1 never executed
    #####: 1040:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:            state->deckCount[nextPlayer]++;
    #####: 1042:            state->discard[nextPlayer][i] = -1;
    #####: 1043:            state->discardCount[nextPlayer]--;
        -: 1044:          }
        -: 1045:                
    #####: 1046:          shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1046-block  0
call    0 never executed
        -: 1047:        } 
    #####: 1048:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:        state->deckCount[nextPlayer]--;
    #####: 1051:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:        state->deckCount[nextPlayer]--;
    $$$$$: 1053-block  0
        -: 1054:            }    
        -: 1055:                
    #####: 1056:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:        state->playedCardCount++;
    #####: 1059:        tributeRevealedCards[1] = -1;
    $$$$$: 1059-block  0
        -: 1060:            }
        -: 1061:
    #####: 1062:            for (i = 0; i <= 2; i ++){
    $$$$$: 1062-block  0
    $$$$$: 1062-block  1
    $$$$$: 1062-block  2
branch  0 never executed
branch  1 never executed
    #####: 1063:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1063-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1063-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1063-block  2
branch  4 never executed
branch  5 never executed
    #####: 1064:          state->coins += 2;
    $$$$$: 1064-block  0
        -: 1065:        }
        -: 1066:              
    #####: 1067:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1067-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1067-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1067-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1067-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1067-block  4
branch  8 never executed
branch  9 never executed
    #####: 1068:          drawCard(currentPlayer, state);
    $$$$$: 1068-block  0
call    0 never executed
    #####: 1069:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:        }
        -: 1071:        else{//Action Card
    #####: 1072:          state->numActions = state->numActions + 2;
    $$$$$: 1072-block  0
        -: 1073:        }
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
    $$$$$: 1076-block  0
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1081-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1081-block  1
branch  2 never executed
branch  3 never executed
        -: 1082:      {
    #####: 1083:        return -1;				
    $$$$$: 1083-block  0
        -: 1084:      }
        -: 1085:
    #####: 1086:          if (choice1 == handPos)
    $$$$$: 1086-block  0
branch  0 never executed
branch  1 never executed
        -: 1087:      {
    #####: 1088:        return -1;
    $$$$$: 1088-block  0
        -: 1089:      }
        -: 1090:
    #####: 1091:          for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1091-block  0
    $$$$$: 1091-block  1
    $$$$$: 1091-block  2
branch  0 never executed
branch  1 never executed
        -: 1092:      {
    #####: 1093:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1093-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1093-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1093-block  2
branch  4 never executed
branch  5 never executed
        -: 1094:          {
    #####: 1095:            j++;
    $$$$$: 1095-block  0
        -: 1096:          }
        -: 1097:      }
    #####: 1098:          if (j < choice2)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
        -: 1099:      {
    #####: 1100:        return -1;				
    $$$$$: 1100-block  0
        -: 1101:      }
        -: 1102:
        -: 1103:          if (DEBUG) 
        -: 1104:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:          //increase supply count for choosen card by amount being discarded
    #####: 1107:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:          
        -: 1109:          //each other player gains a copy of revealed card
    #####: 1110:          for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1110-block  0
    $$$$$: 1110-block  1
    $$$$$: 1110-block  2
branch  0 never executed
branch  1 never executed
        -: 1111:      {
    #####: 1112:        if (i != currentPlayer)
    $$$$$: 1112-block  0
branch  0 never executed
branch  1 never executed
        -: 1113:          {
    #####: 1114:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1114-block  0
call    0 never executed
        -: 1115:          }
        -: 1116:      }
        -: 1117:
        -: 1118:          //discard played card from hand
    #####: 1119:          discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1119-block  0
call    0 never executed
        -: 1120:
        -: 1121:          //trash copies of cards returned to supply
    #####: 1122:          for (j = 0; j < choice2; j++)
    $$$$$: 1122-block  0
    $$$$$: 1122-block  1
branch  0 never executed
branch  1 never executed
        -: 1123:      {
    #####: 1124:        for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1124-block  0
    $$$$$: 1124-block  1
    $$$$$: 1124-block  2
branch  0 never executed
branch  1 never executed
        -: 1125:          {
    #####: 1126:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1126-block  0
branch  0 never executed
branch  1 never executed
        -: 1127:        {
    #####: 1128:          discardCard(i, currentPlayer, state, 1);
    $$$$$: 1128-block  0
call    0 never executed
    #####: 1129:          break;
        -: 1130:        }
        -: 1131:          }
        -: 1132:      }			
        -: 1133:
    #####: 1134:      return 0;
    $$$$$: 1134-block  0
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1139-block  0
    $$$$$: 1139-block  1
branch  0 never executed
branch  1 never executed
        -: 1140:      {
    #####: 1141:        if (i != currentPlayer)
    $$$$$: 1141-block  0
branch  0 never executed
branch  1 never executed
        -: 1142:          {
    #####: 1143:            for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1143-block  0
    $$$$$: 1143-block  1
    $$$$$: 1143-block  2
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:          if (state->hand[i][j] == copper)
    $$$$$: 1145-block  0
branch  0 never executed
branch  1 never executed
        -: 1146:            {
    #####: 1147:              discardCard(j, i, state, 0);
    $$$$$: 1147-block  0
call    0 never executed
    #####: 1148:              break;
        -: 1149:            }
    #####: 1150:          if (j == state->handCount[i])
    $$$$$: 1150-block  0
branch  0 never executed
branch  1 never executed
        -: 1151:            {
    #####: 1152:              for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1152-block  0
    $$$$$: 1152-block  1
    $$$$$: 1152-block  2
branch  0 never executed
branch  1 never executed
        -: 1153:          {
        -: 1154:            if (DEBUG)
        -: 1155:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:          }	
    #####: 1157:              break;
    $$$$$: 1157-block  0
        -: 1158:            }		
        -: 1159:        }
        -: 1160:              
        -: 1161:          }
        -: 1162:            
        -: 1163:      }				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1166-block  0
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:      {
    #####: 1178:        return -1;
    $$$$$: 1178-block  0
        -: 1179:      }
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1185-block  0
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1193-block  0
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
    $$$$$: 1200-block  0
branch  0 never executed
branch  1 never executed
        -: 1201:      {
        -: 1202:        //gain coins equal to trashed card
    #####: 1203:        state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1203-block  0
call    0 never executed
call    1 never executed
        -: 1204:        //trash card
    #####: 1205:        discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:      }
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1209-block  0
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1213-block  0
    $$$$$: 1213-block  1
    $$$$$: 1213-block  2
branch  0 never executed
branch  1 never executed
    #####: 1214:        if (i != currentPlayer){
    $$$$$: 1214-block  0
branch  0 never executed
branch  1 never executed
    #####: 1215:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:          state->discardCount[i]++;
    #####: 1217:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1217-block  0
        -: 1218:        }
        -: 1219:      }
    #####: 1220:      return 0;
    $$$$$: 1220-block  0
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1225-block  0
    $$$$$: 1225-block  1
    $$$$$: 1225-block  2
branch  0 never executed
branch  1 never executed
        -: 1226:      {
    #####: 1227:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1227-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1227-block  1
branch  2 never executed
branch  3 never executed
        -: 1228:          {
    #####: 1229:            index = i;
    #####: 1230:            break;
    $$$$$: 1230-block  0
        -: 1231:          }
        -: 1232:      }
    #####: 1233:      if (index > -1)
    $$$$$: 1233-block  0
branch  0 never executed
branch  1 never executed
        -: 1234:      {
        -: 1235:        //trash both treasure cards
    #####: 1236:        discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1236-block  0
call    0 never executed
    #####: 1237:        discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:        //gain 4 Gold cards
    #####: 1240:        for (i = 0; i < 4; i++)
    $$$$$: 1240-block  0
branch  0 never executed
branch  1 never executed
        -: 1241:          {
    #####: 1242:            gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1242-block  0
call    0 never executed
        -: 1243:          }
        -: 1244:            
        -: 1245:        //return success
    #####: 1246:        return 1;
    $$$$$: 1246-block  0
        -: 1247:      }
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
    $$$$$: 1250-block  0
        -: 1251:}
        -: 1252:	
    #####: 1253:  return -1;
    $$$$$: 1253-block  0
    $$$$$: 1253-block  1
        -: 1254:}
        -: 1255:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    $$$$$: 1256-block  0
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
    #####: 1260:  if (trashFlag < 1)
    $$$$$: 1260-block  0
branch  0 never executed
branch  1 never executed
        -: 1261:    {
        -: 1262:      //add card to played pile
    #####: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1264:      state->playedCardCount++;
    $$$$$: 1264-block  0
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
    #####: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
    #####: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    $$$$$: 1271-block  0
branch  0 never executed
branch  1 never executed
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
    $$$$$: 1274-block  0
        -: 1275:    }
    #####: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    $$$$$: 1276-block  0
branch  0 never executed
branch  1 never executed
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
    $$$$$: 1279-block  0
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
    #####: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
    #####: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
    $$$$$: 1288-block  0
        -: 1289:    }
        -: 1290:	
    #####: 1291:  return 0;
    $$$$$: 1291-block  0
        -: 1292:}
        -: 1293:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1294-block  0
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1299-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:    {
    #####: 1301:      return -1;
    $$$$$: 1301-block  0
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
    $$$$$: 1309-block  0
branch  0 never executed
branch  1 never executed
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
    $$$$$: 1312-block  0
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
    $$$$$: 1314-block  0
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
    $$$$$: 1317-block  0
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
    $$$$$: 1322-block  0
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
    $$$$$: 1328-block  0
        -: 1329:}
        -: 1330:
function updateCoins called 6 returned 100% blocks executed 100%
        6: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        6: 1331-block  0
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
        6: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
       27: 1339:  for (i = 0; i < state->handCount[player]; i++)
        6: 1339-block  0
       21: 1339-block  1
       27: 1339-block  2
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -: 1340:    {
       21: 1341:      if (state->hand[player][i] == copper)
       21: 1341-block  0
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1342:	{
       14: 1343:	  state->coins += 1;
       14: 1343-block  0
        -: 1344:	}
        7: 1345:      else if (state->hand[player][i] == silver)
        7: 1345-block  0
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -: 1346:	{
        2: 1347:	  state->coins += 2;
        2: 1347-block  0
        -: 1348:	}
        5: 1349:      else if (state->hand[player][i] == gold)
        5: 1349-block  0
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -: 1350:	{
        2: 1351:	  state->coins += 3;
        2: 1351-block  0
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
        6: 1356:  state->coins += bonus;
        -: 1357:
        6: 1358:  return 0;
        6: 1358-block  0
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
----------------- Testing function: shuffle ----------------

TEST 1: Player number invalid (-1) 
shuffle state = -1, expected = -1

TEST 2: Shuffle results in same number of cards 
deckCount[player] state = 5, expected = 5

TEST 3: Zero cards the player's deck 
shuffle state = -1, expected = -1

TEST 4: Make sure the cards are shuffled 
shuffle state = 0, expected = 0

 >>>>> Success: Testing complete shuffle <<<<<

File 'dominion.c'
Lines executed:19.57% of 557
Branches executed:20.14% of 417
Taken at least once:17.51% of 417
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 135 returned 100% blocks executed 83%
      135:    8:int compare(const void* a, const void* b) {
      135:    8-block  0
      135:    9:  if (*(int*)a > *(int*)b)
      135:    9-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    $$$$$:   10-block  0
      135:   11:  if (*(int*)a < *(int*)b)
      135:   11-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
       38:   12:    return -1;
       38:   12-block  0
       97:   13:  return 0;
       97:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 4 returned 100% blocks executed 83%
        4:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        4:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        4:   44:  SelectStream(1);
        4:   44-block  0
call    0 returned 100%
        4:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        4:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
        4:   57-block  0
       40:   57-block  1
       44:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
       40:   59-block  0
      400:   59-block  1
      440:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      400:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
      360:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
        4:   73-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        4:   75-block  0
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    $$$$$:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
        4:   87-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        4:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
    $$$$$:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        4:  106-block  0
       80:  106-block  1
       84:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
       80:  108-block  0
      580:  108-block  1
      660:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
      620:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       40:  113-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       40:  113-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       40:  122:		  state->supplyCount[i] = 10;
       40:  122-block  0
        -:  123:		}
       40:  124:	      break;
       40:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       12:  138:  for (i = 0; i < numPlayers; i++)
        4:  138-block  0
        8:  138-block  1
       12:  138-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        8:  140:      state->deckCount[i] = 0;
       32:  141:      for (j = 0; j < 3; j++)
        8:  141-block  0
       24:  141-block  1
       32:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       24:  143:	  state->deck[i][j] = estate;
       24:  144:	  state->deckCount[i]++;
        -:  145:	}
       64:  146:      for (j = 3; j < 10; j++)
        8:  146-block  0
       56:  146-block  1
       64:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       56:  148:	  state->deck[i][j] = copper;
       56:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       12:  154:  for (i = 0; i < numPlayers; i++)
        4:  154-block  0
        8:  154-block  1
       12:  154-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        8:  156:      if ( shuffle(i, state) < 0 )
        8:  156-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       12:  163:  for (i = 0; i < numPlayers; i++)
        4:  163-block  0
        8:  163-block  1
       12:  163-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        8:  166:      state->handCount[i] = 0;
        8:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
        4:  176-block  0
      108:  176-block  1
      112:  176-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
        4:  192-block  0
       24:  192-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       20:  193:    drawCard(state->whoseTurn, state);
       20:  193-block  0
call    0 returned 100%
        -:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
        4:  196-block  0
call    0 returned 100%
        -:  197:
        4:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15 returned 100% blocks executed 100%
       15:  201:int shuffle(int player, struct gameState *state) {
       15:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       15:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       15:  209:  if (state->deckCount[player] < 1)
       15:  209-block  0
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        4:  210:    return -1;
        4:  210-block  0
       11:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
       11:  211-block  0
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      106:  214:  while (state->deckCount[player] > 0) {
      106:  214-block  0
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       95:  215:    card = floor(Random() * state->deckCount[player]);
       95:  215-block  0
call    0 returned 100%
       95:  216:    newDeck[newDeckPos] = state->deck[player][card];
       95:  217:    newDeckPos++;
      311:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      216:  218-block  0
      311:  218-block  1
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
      216:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       95:  221:    state->deckCount[player]--;
       95:  221-block  0
        -:  222:  }
      106:  223:  for (i = 0; i < newDeckPos; i++) {
       11:  223-block  0
       95:  223-block  1
      106:  223-block  2
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       95:  224:    state->deck[player][i] = newDeck[i];
       95:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       15:  228:  return 0;
       11:  228-block  0
       15:  228-block  1
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
        -:  322:}
        -:  323:
function fullDeckCount called 6 returned 100% blocks executed 100%
        6:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        6:  324-block  0
        -:  325:  int i;
        6:  326:  int count = 0;
        -:  327:
       26:  328:  for (i = 0; i < state->deckCount[player]; i++)
        6:  328-block  0
       20:  328-block  1
       26:  328-block  2
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  329:    {
       20:  330:      if (state->deck[player][i] == card) count++;
       20:  330-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        4:  330-block  1
        -:  331:    }
        -:  332:
       26:  333:  for (i = 0; i < state->handCount[player]; i++)
        6:  333-block  0
       20:  333-block  1
       26:  333-block  2
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  334:    {
       20:  335:      if (state->hand[player][i] == card) count++;
       20:  335-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        4:  335-block  1
        -:  336:    }
        -:  337:
        8:  338:  for (i = 0; i < state->discardCount[player]; i++)
        6:  338-block  0
        2:  338-block  1
        8:  338-block  2
branch  0 taken 25%
branch  1 taken 75% (fallthrough)
        -:  339:    {
        2:  340:      if (state->discard[player][i] == card) count++;
        2:  340-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  340-block  1
        -:  341:    }
        -:  342:
        6:  343:  return count;
        6:  343-block  0
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    $$$$$:  346-block  0
    #####:  347:  return state->whoseTurn;
    $$$$$:  347-block  0
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
    $$$$$:  356-block  1
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
    $$$$$:  380-block  1
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        6:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        6:  395-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        2:  397-block  0
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        4:  402-block  0
      100:  402-block  1
      104:  402-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
      100:  404-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        6:  406-block  0
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        4:  409-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  410:    {
        2:  411:      return 1;
        2:  411-block  0
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        2:  414-block  0
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
    $$$$$:  422-block  1
    $$$$$:  422-block  2
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
    $$$$$:  433-block  1
    $$$$$:  433-block  2
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
    $$$$$:  444-block  1
    $$$$$:  444-block  2
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
    $$$$$:  464-block  1
    $$$$$:  464-block  2
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
    $$$$$:  479-block  1
    $$$$$:  479-block  2
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
    $$$$$:  500-block  1
    $$$$$:  500-block  2
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
    $$$$$:  510-block  1
    $$$$$:  510-block  2
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
        -:  523:}
        -:  524:
function drawCard called 20 returned 100% blocks executed 38%
       20:  525:int drawCard(int player, struct gameState *state)
       20:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
       20:  528:  if (state->deckCount[player] <= 0){//Deck is empty
       20:  528-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    $$$$$:  533-block  0
    $$$$$:  533-block  1
    $$$$$:  533-block  2
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
    $$$$$:  542-block  0
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    $$$$$:  559-block  0
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
    $$$$$:  560-block  0
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    $$$$$:  564-block  0
        -:  565:  }
        -:  566:
        -:  567:  else{
       20:  568:    int count = state->handCount[player];//Get current hand count for player
       20:  568-block  0
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       20:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  576:    state->deckCount[player]--;
       20:  577:    state->handCount[player]++;//Increment hand count
       20:  577-block  0
        -:  578:  }
        -:  579:
       20:  580:  return 0;
       20:  580-block  0
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
        -:  644:}
        -:  645:
        -:  646:/* Function implementation of 5 player cards */
function adventurerFunc called 0 returned 0% blocks executed 0%
    #####:  647:int adventurerFunc(int currentPlayer, struct gameState *state) {
    $$$$$:  647-block  0
    #####:  648:  int drawntreasure = 0;
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];
    #####:  651:  int z=0;
        -:  652:
    #####:  653:  while(drawntreasure <= 2) {
    $$$$$:  653-block  0
    $$$$$:  653-block  1
branch  0 never executed
branch  1 never executed
    #####:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    $$$$$:  654-block  0
branch  0 never executed
branch  1 never executed
    #####:  655:      shuffle(currentPlayer, state);
    $$$$$:  655-block  0
call    0 never executed
        -:  656:    }
    #####:  657:    drawCard(currentPlayer, state);
    $$$$$:  657-block  0
call    0 never executed
    #####:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
    $$$$$:  659-block  0
branch  2 never executed
branch  3 never executed
    $$$$$:  659-block  1
branch  4 never executed
branch  5 never executed
    #####:  660:      drawntreasure++;
    $$$$$:  660-block  0
        -:  661:    else{
    #####:  662:      temphand[z]=cardDrawn;
    #####:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    $$$$$:  663-block  0
        -:  664:      // z++;
        -:  665:    }
        -:  666:  }
    #####:  667:  while(z-1 >= 0){
    $$$$$:  667-block  0
    $$$$$:  667-block  1
branch  0 never executed
branch  1 never executed
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:    z=z-1;
    $$$$$:  669-block  0
        -:  670:  }
    #####:  671:  return 0;
    $$$$$:  671-block  0
        -:  672:}
        -:  673:
function smithyFunc called 0 returned 0% blocks executed 0%
    #####:  674:int smithyFunc(int currentPlayer, int handPos, struct gameState *state) {
    $$$$$:  674-block  0
        -:  675:  int i;
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 4; i++)
    $$$$$:  677-block  0
    $$$$$:  677-block  1
branch  0 never executed
branch  1 never executed
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
    $$$$$:  679-block  0
call    0 never executed
        -:  680:  }
        -:  681:  
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
    $$$$$:  683-block  0
call    0 never executed
        -:  684:
    #####:  685:  return 0;
        -:  686:}
        -:  687:
function councilRoomFunc called 0 returned 0% blocks executed 0%
    #####:  688:int councilRoomFunc(int currentPlayer, int handPos, struct gameState *state) {
    $$$$$:  688-block  0
        -:  689:  int i;
        -:  690:  //+4 Cards
    #####:  691:  for (i = 1; i < 4; i++)
    $$$$$:  691-block  0
    $$$$$:  691-block  1
branch  0 never executed
branch  1 never executed
        -:  692:  {
    #####:  693:    drawCard(currentPlayer, state);
    $$$$$:  693-block  0
call    0 never executed
        -:  694:  }
        -:  695:  
        -:  696:  //+1 Buy
    #####:  697:  state->numBuys++;
        -:  698:  
        -:  699:  //Each other player draws a card
    #####:  700:  for (i = 0; i <= state->numPlayers; i++)
    $$$$$:  700-block  0
    $$$$$:  700-block  1
    $$$$$:  700-block  2
branch  0 never executed
branch  1 never executed
        -:  701:  {
    #####:  702:    if ( i != currentPlayer )
    $$$$$:  702-block  0
branch  0 never executed
branch  1 never executed
        -:  703:      {
    #####:  704:        drawCard(i, state);
    $$$$$:  704-block  0
call    0 never executed
        -:  705:      }
        -:  706:  }
        -:  707:  
        -:  708:  //put played card in played card pile
    #####:  709:  discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  709-block  0
call    0 never executed
        -:  710:
    #####:  711:  return 0;
        -:  712:}
        -:  713:
function feastFunc called 0 returned 0% blocks executed 0%
    #####:  714:int feastFunc(int currentPlayer, int choice1, struct gameState *state) {
    $$$$$:  714-block  0
        -:  715:  int i;
        -:  716:  int x;
        -:  717:  int temphand[MAX_HAND];
        -:  718:
    #####:  719:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    $$$$$:  719-block  0
    $$$$$:  719-block  1
    $$$$$:  719-block  2
branch  0 never executed
branch  1 never executed
    #####:  720:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  721:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  722:  }
        -:  723:  //Backup hand
        -:  724:
        -:  725:  //Update Coins for Buy
    #####:  726:  updateCoins(currentPlayer, state, 10);
    $$$$$:  726-block  0
call    0 never executed
    #####:  727:  x = 1;//Condition to loop on
    #####:  728:  while( x == 1) {//Buy one card
    $$$$$:  728-block  0
branch  0 never executed
branch  1 never executed
    #####:  729:    if (supplyCount(choice1, state) <= 0){
    $$$$$:  729-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  730:      if (DEBUG)
        -:  731:        printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:      }
        -:  736:    }
    #####:  737:    else if (state->coins < getCost(choice1)){
    $$$$$:  737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  738:      printf("That card is too expensive!\n");
    $$$$$:  738-block  0
call    0 never executed
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:      }
        -:  743:    }
        -:  744:    else{
        -:  745:
        -:  746:      if (DEBUG){
        -:  747:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:      }
        -:  749:
    #####:  750:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  750-block  0
call    0 never executed
    #####:  751:      x = 0;//No more buying cards
        -:  752:
        -:  753:      if (DEBUG){
        -:  754:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:      }
        -:  756:
        -:  757:    }
        -:  758:  }     
        -:  759:
        -:  760:  //Reset Hand
    #####:  761:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  761-block  0
    $$$$$:  761-block  1
    $$$$$:  761-block  2
branch  0 never executed
branch  1 never executed
    #####:  762:    state->hand[currentPlayer][i] = temphand[i];
    #####:  763:    temphand[i] = -1;
        -:  764:  }
        -:  765:  //Reset Hand
        -:  766:
    #####:  767:  return 0;
    $$$$$:  767-block  0
        -:  768:}
        -:  769:
function remodelFunc called 0 returned 0% blocks executed 0%
    #####:  770:int remodelFunc(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state) {
    $$$$$:  770-block  0
        -:  771:  int i;
        -:  772:  int j;
    #####:  773:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:  
    #####:  775:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  775-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:  {
    #####:  777:    return -1;
    $$$$$:  777-block  0
        -:  778:  }
        -:  779:
    #####:  780:  gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  780-block  0
call    0 never executed
        -:  781:
        -:  782:  //discard card from hand
    #####:  783:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  784:
        -:  785:  //discard trashed card
    #####:  786:  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  786-block  0
    $$$$$:  786-block  1
branch  0 never executed
branch  1 never executed
        -:  787:  {
    #####:  788:    if (state->hand[currentPlayer][i] == j)
    $$$$$:  788-block  0
branch  0 never executed
branch  1 never executed
        -:  789:    {
    #####:  790:      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  790-block  0
call    0 never executed
    #####:  791:      break;
        -:  792:    }
        -:  793:  }
    #####:  794:  return 0;
    $$$$$:  794-block  0
        -:  795:}
        -:  796:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    $$$$$:  797-block  0
        -:  798:{
        -:  799:  int i;
        -:  800:  int j;
        -:  801:  int k;
        -:  802:  //int x;
        -:  803:  int index;
    #####:  804:  int currentPlayer = whoseTurn(state);
    $$$$$:  804-block  0
call    0 never executed
    #####:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
    #####:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  //int temphand[MAX_HAND];// moved above the if statement
        -:  809:  //int drawntreasure=0;
        -:  810:  //int cardDrawn;
        -:  811:  //int z = 0;// this is the counter for the temp hand
    #####:  812:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  813:    nextPlayer = 0;
    $$$$$:  813-block  0
        -:  814:  }
        -:  815:  
        -:  816:  //uses switch to select card and perform actions
    #####:  817:  switch( card ) 
    $$$$$:  817-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  818:  {
        -:  819:    case adventurer:
    #####:  820:      adventurerFunc(currentPlayer, state);
    $$$$$:  820-block  0
call    0 never executed
        -:  821:			
        -:  822:    case council_room:
    #####:  823:      councilRoomFunc(currentPlayer, handPos, state);
    $$$$$:  823-block  0
call    0 never executed
        -:  824:			
        -:  825:    case feast:
    #####:  826:      feastFunc(currentPlayer, choice1, state);      			
    $$$$$:  826-block  0
call    0 never executed
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
    $$$$$:  829-block  0
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:      {
    #####:  836:        return -1;
    $$$$$:  836-block  0
        -:  837:      }
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:      {
    #####:  841:        return -1;
    $$$$$:  841-block  0
        -:  842:      }
        -:  843:
    #####:  844:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:      {
    #####:  846:        return -1;
    $$$$$:  846-block  0
        -:  847:      }
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  849-block  0
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  855-block  0
    $$$$$:  855-block  1
branch  0 never executed
branch  1 never executed
        -:  856:      {
    #####:  857:        if (state->hand[currentPlayer][i] == j)
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:          {
    #####:  859:            discardCard(i, currentPlayer, state, 0);			
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:            break;
        -:  861:          }
        -:  862:      }
        -:  863:			
    #####:  864:      return 0;
    $$$$$:  864-block  0
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      remodelFunc(currentPlayer, choice1, choice2, handPos, state);
    $$$$$:  867-block  0
call    0 never executed
        -:  868:		
        -:  869:    case smithy:
    #####:  870:      smithyFunc(currentPlayer, handPos, state); 
    $$$$$:  870-block  0
call    0 never executed
        -:  871:		
        -:  872:    case village:
        -:  873:      //+1 Card
    #####:  874:      drawCard(currentPlayer, state);
    $$$$$:  874-block  0
call    0 never executed
        -:  875:			
        -:  876:      //+2 Actions
    #####:  877:      state->numActions = state->numActions + 2;
        -:  878:			
        -:  879:      //discard played card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  885-block  0
branch  0 never executed
branch  1 never executed
    #####:  886:        int p = 0;//Iterator for hand!
    #####:  887:        int card_not_discarded = 1;//Flag for discard set!
    #####:  888:        while(card_not_discarded){
    $$$$$:  888-block  0
    $$$$$:  888-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  888-block  2
    #####:  889:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  889-block  0
branch  0 never executed
branch  1 never executed
    #####:  890:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:            state->discardCount[currentPlayer]++;
    #####:  893:            for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  893-block  0
    $$$$$:  893-block  1
    $$$$$:  893-block  2
branch  0 never executed
branch  1 never executed
    #####:  894:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:            }
    #####:  896:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:            state->handCount[currentPlayer]--;
    #####:  898:            card_not_discarded = 0;//Exit the loop
    $$$$$:  898-block  0
        -:  899:          }
    #####:  900:          else if (p > state->handCount[currentPlayer]){
    $$$$$:  900-block  0
branch  0 never executed
branch  1 never executed
        -:  901:            if(DEBUG) {
        -:  902:              printf("No estate cards in your hand, invalid choice\n");
        -:  903:              printf("Must gain an estate if there are any\n");
        -:  904:            }
    #####:  905:            if (supplyCount(estate, state) > 0){
    $$$$$:  905-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:              gainCard(estate, state, 0, currentPlayer);
    $$$$$:  906-block  0
call    0 never executed
    #####:  907:              state->supplyCount[estate]--;//Decrement estates
    #####:  908:              if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:          isGameOver(state);
    $$$$$:  909-block  0
call    0 never executed
        -:  910:              }
        -:  911:            }
    #####:  912:            card_not_discarded = 0;//Exit the loop
    $$$$$:  912-block  0
        -:  913:          }
        -:  914:                
        -:  915:          else{
    #####:  916:            p++;//Next card
    $$$$$:  916-block  0
        -:  917:          }
        -:  918:        }
        -:  919:      }
        -:  920:
        -:  921:      else{
    #####:  922:        if (supplyCount(estate, state) > 0){
    $$$$$:  922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:          state->supplyCount[estate]--;//Decrement Estates
    #####:  925:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:            isGameOver(state);
    $$$$$:  926-block  0
call    0 never executed
        -:  927:          }
        -:  928:        }
        -:  929:      }
        -:  930:        
        -:  931:        
    #####:  932:      return 0;
    $$$$$:  932-block  0
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  950-block  0
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:      {
    #####:  954:        state->coins = state->coins + 2;
    $$$$$:  954-block  0
        -:  955:      }
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  957-block  0
branch  0 never executed
branch  1 never executed
        -:  958:      {
        -:  959:        //discard hand
    #####:  960:        while(numHandCards(state) > 0)
    $$$$$:  960-block  0
    $$$$$:  960-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:          {
    #####:  962:            discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  962-block  0
call    0 never executed
        -:  963:          }
        -:  964:            
        -:  965:        //draw 4
    #####:  966:        for (i = 0; i < 4; i++)
    $$$$$:  966-block  0
    $$$$$:  966-block  1
branch  0 never executed
branch  1 never executed
        -:  967:          {
    #####:  968:            drawCard(currentPlayer, state);
    $$$$$:  968-block  0
call    0 never executed
        -:  969:          }
        -:  970:            
        -:  971:        //other players discard hand and redraw if hand size > 4
    #####:  972:        for (i = 0; i < state->numPlayers; i++)
    $$$$$:  972-block  0
    $$$$$:  972-block  1
    $$$$$:  972-block  2
branch  0 never executed
branch  1 never executed
        -:  973:          {
    #####:  974:            if (i != currentPlayer)
    $$$$$:  974-block  0
branch  0 never executed
branch  1 never executed
        -:  975:        {
    #####:  976:          if ( state->handCount[i] > 4 )
    $$$$$:  976-block  0
branch  0 never executed
branch  1 never executed
        -:  977:            {
        -:  978:              //discard hand
    #####:  979:              while( state->handCount[i] > 0 )
    $$$$$:  979-block  0
    $$$$$:  979-block  1
branch  0 never executed
branch  1 never executed
        -:  980:          {
    #####:  981:            discardCard(handPos, i, state, 0);
    $$$$$:  981-block  0
call    0 never executed
        -:  982:          }
        -:  983:                  
        -:  984:              //draw 4
    #####:  985:              for (j = 0; j < 4; j++)
    $$$$$:  985-block  0
    $$$$$:  985-block  1
branch  0 never executed
branch  1 never executed
        -:  986:          {
    #####:  987:            drawCard(i, state);
    $$$$$:  987-block  0
call    0 never executed
        -:  988:          }
        -:  989:            }
        -:  990:        }
        -:  991:          }
        -:  992:            
        -:  993:      }
    #####:  994:      return 0;
    $$$$$:  994-block  0
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
    $$$$$:  997-block  0
branch  0 never executed
branch  1 never executed
        -:  998:      {
        -:  999:        //+2 cards
    #####: 1000:        drawCard(currentPlayer, state);
    $$$$$: 1000-block  0
call    0 never executed
    #####: 1001:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:      }
    #####: 1003:          else if (choice1 == 2)
    $$$$$: 1003-block  0
branch  0 never executed
branch  1 never executed
        -: 1004:      {
        -: 1005:        //+2 coins
    #####: 1006:        state->coins = state->coins + 2;
    $$$$$: 1006-block  0
        -: 1007:      }
        -: 1008:          else
        -: 1009:      {
        -: 1010:        //trash 2 cards in hand
    #####: 1011:        discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1011-block  0
call    0 never executed
    #####: 1012:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:      }
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1016-block  0
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1020-block  0
branch  0 never executed
branch  1 never executed
    #####: 1021:        if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1021-block  0
branch  0 never executed
branch  1 never executed
    #####: 1022:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:          state->deckCount[nextPlayer]--;
    $$$$$: 1023-block  0
        -: 1024:        }
    #####: 1025:        else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    #####: 1026:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:          state->discardCount[nextPlayer]--;
    $$$$$: 1027-block  0
        -: 1028:        }
        -: 1029:        else{
        -: 1030:          //No Card to Reveal
        -: 1031:          if (DEBUG){
        -: 1032:            printf("No cards to reveal\n");
        -: 1033:          }
        -: 1034:        }
        -: 1035:            }
        -: 1036:            
        -: 1037:            else{
    #####: 1038:        if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
    #####: 1039:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1039-block  0
    $$$$$: 1039-block  1
    $$$$$: 1039-block  2
branch  0 never executed
branch  1 never executed
    #####: 1040:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:            state->deckCount[nextPlayer]++;
    #####: 1042:            state->discard[nextPlayer][i] = -1;
    #####: 1043:            state->discardCount[nextPlayer]--;
        -: 1044:          }
        -: 1045:                
    #####: 1046:          shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1046-block  0
call    0 never executed
        -: 1047:        } 
    #####: 1048:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:        state->deckCount[nextPlayer]--;
    #####: 1051:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:        state->deckCount[nextPlayer]--;
    $$$$$: 1053-block  0
        -: 1054:            }    
        -: 1055:                
    #####: 1056:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:        state->playedCardCount++;
    #####: 1059:        tributeRevealedCards[1] = -1;
    $$$$$: 1059-block  0
        -: 1060:            }
        -: 1061:
    #####: 1062:            for (i = 0; i <= 2; i ++){
    $$$$$: 1062-block  0
    $$$$$: 1062-block  1
    $$$$$: 1062-block  2
branch  0 never executed
branch  1 never executed
    #####: 1063:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1063-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1063-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1063-block  2
branch  4 never executed
branch  5 never executed
    #####: 1064:          state->coins += 2;
    $$$$$: 1064-block  0
        -: 1065:        }
        -: 1066:              
    #####: 1067:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1067-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1067-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1067-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1067-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1067-block  4
branch  8 never executed
branch  9 never executed
    #####: 1068:          drawCard(currentPlayer, state);
    $$$$$: 1068-block  0
call    0 never executed
    #####: 1069:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:        }
        -: 1071:        else{//Action Card
    #####: 1072:          state->numActions = state->numActions + 2;
    $$$$$: 1072-block  0
        -: 1073:        }
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
    $$$$$: 1076-block  0
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1081-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1081-block  1
branch  2 never executed
branch  3 never executed
        -: 1082:      {
    #####: 1083:        return -1;				
    $$$$$: 1083-block  0
        -: 1084:      }
        -: 1085:
    #####: 1086:          if (choice1 == handPos)
    $$$$$: 1086-block  0
branch  0 never executed
branch  1 never executed
        -: 1087:      {
    #####: 1088:        return -1;
    $$$$$: 1088-block  0
        -: 1089:      }
        -: 1090:
    #####: 1091:          for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1091-block  0
    $$$$$: 1091-block  1
    $$$$$: 1091-block  2
branch  0 never executed
branch  1 never executed
        -: 1092:      {
    #####: 1093:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1093-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1093-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1093-block  2
branch  4 never executed
branch  5 never executed
        -: 1094:          {
    #####: 1095:            j++;
    $$$$$: 1095-block  0
        -: 1096:          }
        -: 1097:      }
    #####: 1098:          if (j < choice2)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
        -: 1099:      {
    #####: 1100:        return -1;				
    $$$$$: 1100-block  0
        -: 1101:      }
        -: 1102:
        -: 1103:          if (DEBUG) 
        -: 1104:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:          //increase supply count for choosen card by amount being discarded
    #####: 1107:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:          
        -: 1109:          //each other player gains a copy of revealed card
    #####: 1110:          for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1110-block  0
    $$$$$: 1110-block  1
    $$$$$: 1110-block  2
branch  0 never executed
branch  1 never executed
        -: 1111:      {
    #####: 1112:        if (i != currentPlayer)
    $$$$$: 1112-block  0
branch  0 never executed
branch  1 never executed
        -: 1113:          {
    #####: 1114:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1114-block  0
call    0 never executed
        -: 1115:          }
        -: 1116:      }
        -: 1117:
        -: 1118:          //discard played card from hand
    #####: 1119:          discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1119-block  0
call    0 never executed
        -: 1120:
        -: 1121:          //trash copies of cards returned to supply
    #####: 1122:          for (j = 0; j < choice2; j++)
    $$$$$: 1122-block  0
    $$$$$: 1122-block  1
branch  0 never executed
branch  1 never executed
        -: 1123:      {
    #####: 1124:        for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1124-block  0
    $$$$$: 1124-block  1
    $$$$$: 1124-block  2
branch  0 never executed
branch  1 never executed
        -: 1125:          {
    #####: 1126:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1126-block  0
branch  0 never executed
branch  1 never executed
        -: 1127:        {
    #####: 1128:          discardCard(i, currentPlayer, state, 1);
    $$$$$: 1128-block  0
call    0 never executed
    #####: 1129:          break;
        -: 1130:        }
        -: 1131:          }
        -: 1132:      }			
        -: 1133:
    #####: 1134:      return 0;
    $$$$$: 1134-block  0
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1139-block  0
    $$$$$: 1139-block  1
branch  0 never executed
branch  1 never executed
        -: 1140:      {
    #####: 1141:        if (i != currentPlayer)
    $$$$$: 1141-block  0
branch  0 never executed
branch  1 never executed
        -: 1142:          {
    #####: 1143:            for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1143-block  0
    $$$$$: 1143-block  1
    $$$$$: 1143-block  2
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:          if (state->hand[i][j] == copper)
    $$$$$: 1145-block  0
branch  0 never executed
branch  1 never executed
        -: 1146:            {
    #####: 1147:              discardCard(j, i, state, 0);
    $$$$$: 1147-block  0
call    0 never executed
    #####: 1148:              break;
        -: 1149:            }
    #####: 1150:          if (j == state->handCount[i])
    $$$$$: 1150-block  0
branch  0 never executed
branch  1 never executed
        -: 1151:            {
    #####: 1152:              for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1152-block  0
    $$$$$: 1152-block  1
    $$$$$: 1152-block  2
branch  0 never executed
branch  1 never executed
        -: 1153:          {
        -: 1154:            if (DEBUG)
        -: 1155:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:          }	
    #####: 1157:              break;
    $$$$$: 1157-block  0
        -: 1158:            }		
        -: 1159:        }
        -: 1160:              
        -: 1161:          }
        -: 1162:            
        -: 1163:      }				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1166-block  0
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:      {
    #####: 1178:        return -1;
    $$$$$: 1178-block  0
        -: 1179:      }
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1185-block  0
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1193-block  0
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
    $$$$$: 1200-block  0
branch  0 never executed
branch  1 never executed
        -: 1201:      {
        -: 1202:        //gain coins equal to trashed card
    #####: 1203:        state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1203-block  0
call    0 never executed
call    1 never executed
        -: 1204:        //trash card
    #####: 1205:        discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:      }
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1209-block  0
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1213-block  0
    $$$$$: 1213-block  1
    $$$$$: 1213-block  2
branch  0 never executed
branch  1 never executed
    #####: 1214:        if (i != currentPlayer){
    $$$$$: 1214-block  0
branch  0 never executed
branch  1 never executed
    #####: 1215:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:          state->discardCount[i]++;
    #####: 1217:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1217-block  0
        -: 1218:        }
        -: 1219:      }
    #####: 1220:      return 0;
    $$$$$: 1220-block  0
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1225-block  0
    $$$$$: 1225-block  1
    $$$$$: 1225-block  2
branch  0 never executed
branch  1 never executed
        -: 1226:      {
    #####: 1227:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1227-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1227-block  1
branch  2 never executed
branch  3 never executed
        -: 1228:          {
    #####: 1229:            index = i;
    #####: 1230:            break;
    $$$$$: 1230-block  0
        -: 1231:          }
        -: 1232:      }
    #####: 1233:      if (index > -1)
    $$$$$: 1233-block  0
branch  0 never executed
branch  1 never executed
        -: 1234:      {
        -: 1235:        //trash both treasure cards
    #####: 1236:        discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1236-block  0
call    0 never executed
    #####: 1237:        discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:        //gain 4 Gold cards
    #####: 1240:        for (i = 0; i < 4; i++)
    $$$$$: 1240-block  0
branch  0 never executed
branch  1 never executed
        -: 1241:          {
    #####: 1242:            gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1242-block  0
call    0 never executed
        -: 1243:          }
        -: 1244:            
        -: 1245:        //return success
    #####: 1246:        return 1;
    $$$$$: 1246-block  0
        -: 1247:      }
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
    $$$$$: 1250-block  0
        -: 1251:}
        -: 1252:	
    #####: 1253:  return -1;
    $$$$$: 1253-block  0
    $$$$$: 1253-block  1
        -: 1254:}
        -: 1255:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    $$$$$: 1256-block  0
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
    #####: 1260:  if (trashFlag < 1)
    $$$$$: 1260-block  0
branch  0 never executed
branch  1 never executed
        -: 1261:    {
        -: 1262:      //add card to played pile
    #####: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1264:      state->playedCardCount++;
    $$$$$: 1264-block  0
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
    #####: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
    #####: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    $$$$$: 1271-block  0
branch  0 never executed
branch  1 never executed
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
    $$$$$: 1274-block  0
        -: 1275:    }
    #####: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    $$$$$: 1276-block  0
branch  0 never executed
branch  1 never executed
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
    $$$$$: 1279-block  0
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
    #####: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
    #####: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
    $$$$$: 1288-block  0
        -: 1289:    }
        -: 1290:	
    #####: 1291:  return 0;
    $$$$$: 1291-block  0
        -: 1292:}
        -: 1293:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1294-block  0
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1299-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:    {
    #####: 1301:      return -1;
    $$$$$: 1301-block  0
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
    $$$$$: 1309-block  0
branch  0 never executed
branch  1 never executed
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
    $$$$$: 1312-block  0
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
    $$$$$: 1314-block  0
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
    $$$$$: 1317-block  0
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
    $$$$$: 1322-block  0
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
    $$$$$: 1328-block  0
        -: 1329:}
        -: 1330:
function updateCoins called 7 returned 100% blocks executed 100%
        7: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        7: 1331-block  0
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
        7: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
       33: 1339:  for (i = 0; i < state->handCount[player]; i++)
        7: 1339-block  0
       26: 1339-block  1
       33: 1339-block  2
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
        -: 1340:    {
       26: 1341:      if (state->hand[player][i] == copper)
       26: 1341-block  0
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -: 1342:	{
       18: 1343:	  state->coins += 1;
       18: 1343-block  0
        -: 1344:	}
        8: 1345:      else if (state->hand[player][i] == silver)
        8: 1345-block  0
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1346:	{
        2: 1347:	  state->coins += 2;
        2: 1347-block  0
        -: 1348:	}
        6: 1349:      else if (state->hand[player][i] == gold)
        6: 1349-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1350:	{
        2: 1351:	  state->coins += 3;
        2: 1351-block  0
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
        7: 1356:  state->coins += bonus;
        -: 1357:
        7: 1358:  return 0;
        7: 1358-block  0
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
----------------- Testing Card: smithy ----------------
TEST 1: +3 cards
hand count = 8, expected = 7
deck count = 0, expected = 2
played count = 1, expected = 1

TEST 2: Check smithy is not trashed after play
Gaining 1 smithy card for player 0
Before playing smithy:
Player 0 smithy count 1, expected 1
After playing smithy:
Player 0 smithy count 1, expected 1

TEST 3: Smithy cost test
Buy smithy with 4 coins: 0 expected: 0
Buy smithy with 1 coins: -1 expected: -1

TEST 4: No state change occur for other players
Initial player 1 state:
Player 1 hand count: 0 expected: 0
Player 1 deck count: 10 expected: 10
Player 1 discard count: 0 expected: 0
Player 0 plays smithy.
Player 1 hand count: 0 expected: 0
Player 1 deck count: 10 expected: 10
Player 1 discard count: 0 expected: 0

TEST 5: No state change should occur to the victory card piles and kingdom card piles
Before play smithy card
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 99 expected: 99
Player 0 plays smithy.
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 99 expected: 99

 >>>>> Failsure: Testing complete smithy <<<<<

File 'dominion.c'
Lines executed:32.32% of 557
Branches executed:38.13% of 417
Taken at least once:23.02% of 417
Calls executed:20.00% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 165 returned 100% blocks executed 83%
      165:    8:int compare(const void* a, const void* b) {
      165:    8-block  0
      165:    9:  if (*(int*)a > *(int*)b)
      165:    9-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    $$$$$:   10-block  0
      165:   11:  if (*(int*)a < *(int*)b)
      165:   11-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
       46:   12:    return -1;
       46:   12-block  0
      119:   13:  return 0;
      119:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 5 returned 100% blocks executed 83%
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        5:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
        5:   44-block  0
call    0 returned 100%
        5:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
        5:   57-block  0
       50:   57-block  1
       55:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
       50:   59-block  0
      500:   59-block  1
      550:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      500:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
      450:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
        5:   73-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        5:   75-block  0
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    $$$$$:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
        5:   87-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        5:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
    $$$$$:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        5:  106-block  0
      100:  106-block  1
      105:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
      100:  108-block  0
      725:  108-block  1
      825:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
      775:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       50:  113-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       50:  113-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       50:  122:		  state->supplyCount[i] = 10;
       50:  122-block  0
        -:  123:		}
       50:  124:	      break;
       50:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
        5:  138-block  0
       10:  138-block  1
       15:  138-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
       10:  141-block  0
       30:  141-block  1
       40:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
       10:  146-block  0
       70:  146-block  1
       80:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
        5:  154-block  0
       10:  154-block  1
       15:  154-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
       10:  156-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
        5:  163-block  0
       10:  163-block  1
       15:  163-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
        5:  176-block  0
      135:  176-block  1
      140:  176-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
        5:  192-block  0
       30:  192-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:  193:    drawCard(state->whoseTurn, state);
       25:  193-block  0
call    0 returned 100%
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
        5:  196-block  0
call    0 returned 100%
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 22 returned 100% blocks executed 100%
       22:  201:int shuffle(int player, struct gameState *state) {
       22:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       22:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       22:  209:  if (state->deckCount[player] < 1)
       22:  209-block  0
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        8:  210:    return -1;
        8:  210-block  0
       14:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
       14:  211-block  0
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      130:  214:  while (state->deckCount[player] > 0) {
      130:  214-block  0
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
      116:  215:    card = floor(Random() * state->deckCount[player]);
      116:  215-block  0
call    0 returned 100%
      116:  216:    newDeck[newDeckPos] = state->deck[player][card];
      116:  217:    newDeckPos++;
      382:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      266:  218-block  0
      382:  218-block  1
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      266:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      116:  221:    state->deckCount[player]--;
      116:  221-block  0
        -:  222:  }
      130:  223:  for (i = 0; i < newDeckPos; i++) {
       14:  223-block  0
      116:  223-block  1
      130:  223-block  2
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
      116:  224:    state->deck[player][i] = newDeck[i];
      116:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       22:  228:  return 0;
       14:  228-block  0
       22:  228-block  1
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 93%
        8:  272:int buyCard(int supplyPos, struct gameState *state) {
        4:  272-block  0
        4:  272-block  1
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
        4:  282-block  0
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        1:  285-block  0
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
        3:  286-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
        3:  290:  } else if (state->coins < getCost(supplyPos)){
        3:  290-block  0
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        2:  293:    return -1;
        2:  293-block  0
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        1:  297-block  0
call    0 returned 100%
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        1:  308-block  0
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 44 returned 100% blocks executed 100%
       44:  320:int supplyCount(int card, struct gameState *state) {
       44:  320-block  0
       44:  321:  return state->supplyCount[card];
       44:  321-block  0
        -:  322:}
        -:  323:
function fullDeckCount called 10 returned 100% blocks executed 100%
       10:  324:int fullDeckCount(int player, int card, struct gameState *state) {
       10:  324-block  0
        -:  325:  int i;
       10:  326:  int count = 0;
        -:  327:
       40:  328:  for (i = 0; i < state->deckCount[player]; i++)
       10:  328-block  0
       30:  328-block  1
       40:  328-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  329:    {
       30:  330:      if (state->deck[player][i] == card) count++;
       30:  330-block  0
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        4:  330-block  1
        -:  331:    }
        -:  332:
       60:  333:  for (i = 0; i < state->handCount[player]; i++)
       10:  333-block  0
       50:  333-block  1
       60:  333-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  334:    {
       50:  335:      if (state->hand[player][i] == card) count++;
       50:  335-block  0
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        8:  335-block  1
        -:  336:    }
        -:  337:
       12:  338:  for (i = 0; i < state->discardCount[player]; i++)
       10:  338-block  0
        2:  338-block  1
       12:  338-block  2
branch  0 taken 17%
branch  1 taken 83% (fallthrough)
        -:  339:    {
        2:  340:      if (state->discard[player][i] == card) count++;
        2:  340-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  340-block  1
        -:  341:    }
        -:  342:
       10:  343:  return count;
       10:  343-block  0
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  346-block  0
        4:  347:  return state->whoseTurn;
        4:  347-block  0
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
    $$$$$:  356-block  1
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
    $$$$$:  380-block  1
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        6:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        6:  395-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        2:  397-block  0
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        4:  402-block  0
      100:  402-block  1
      104:  402-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
      100:  404-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        6:  406-block  0
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        4:  409-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  410:    {
        2:  411:      return 1;
        2:  411-block  0
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        2:  414-block  0
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
    $$$$$:  422-block  1
    $$$$$:  422-block  2
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
    $$$$$:  433-block  1
    $$$$$:  433-block  2
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
    $$$$$:  444-block  1
    $$$$$:  444-block  2
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
    $$$$$:  464-block  1
    $$$$$:  464-block  2
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
    $$$$$:  479-block  1
    $$$$$:  479-block  2
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
    $$$$$:  500-block  1
    $$$$$:  500-block  2
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
    $$$$$:  510-block  1
    $$$$$:  510-block  2
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
        -:  523:}
        -:  524:
function drawCard called 45 returned 100% blocks executed 100%
       45:  525:int drawCard(int player, struct gameState *state)
       45:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
       45:  528:  if (state->deckCount[player] <= 0){//Deck is empty
       45:  528-block  0
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        6:  533:    for (i = 0; i < state->discardCount[player];i++){
        5:  533-block  0
        1:  533-block  1
        6:  533-block  2
branch  0 taken 17%
branch  1 taken 83% (fallthrough)
        1:  534:      state->deck[player][i] = state->discard[player][i];
        1:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        5:  538:    state->deckCount[player] = state->discardCount[player];
        5:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        5:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        5:  542-block  0
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        5:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        5:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        5:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        5:  559:    if (deckCounter == 0)
        5:  559-block  0
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:  560:      return -1;
        4:  560-block  0
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        1:  564-block  0
        -:  565:  }
        -:  566:
        -:  567:  else{
       40:  568:    int count = state->handCount[player];//Get current hand count for player
       40:  568-block  0
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       40:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       40:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       40:  576:    state->deckCount[player]--;
       40:  577:    state->handCount[player]++;//Increment hand count
       40:  577-block  0
        -:  578:  }
        -:  579:
       41:  580:  return 0;
       41:  580-block  0
        -:  581:}
        -:  582:
function getCost called 4 returned 100% blocks executed 10%
        4:  583:int getCost(int cardNumber)
        4:  583-block  0
        -:  584:{
        4:  585:  switch( cardNumber ) 
        4:  585-block  0
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 100%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
        -:  613:    case smithy:
        4:  614:      return 4;
        4:  614-block  0
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
        -:  644:}
        -:  645:
        -:  646:/* Function implementation of 5 player cards */
function adventurerFunc called 0 returned 0% blocks executed 0%
    #####:  647:int adventurerFunc(int currentPlayer, struct gameState *state) {
    $$$$$:  647-block  0
    #####:  648:  int drawntreasure = 0;
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];
    #####:  651:  int z=0;
        -:  652:
    #####:  653:  while(drawntreasure <= 2) {
    $$$$$:  653-block  0
    $$$$$:  653-block  1
branch  0 never executed
branch  1 never executed
    #####:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    $$$$$:  654-block  0
branch  0 never executed
branch  1 never executed
    #####:  655:      shuffle(currentPlayer, state);
    $$$$$:  655-block  0
call    0 never executed
        -:  656:    }
    #####:  657:    drawCard(currentPlayer, state);
    $$$$$:  657-block  0
call    0 never executed
    #####:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
    $$$$$:  659-block  0
branch  2 never executed
branch  3 never executed
    $$$$$:  659-block  1
branch  4 never executed
branch  5 never executed
    #####:  660:      drawntreasure++;
    $$$$$:  660-block  0
        -:  661:    else{
    #####:  662:      temphand[z]=cardDrawn;
    #####:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    $$$$$:  663-block  0
        -:  664:      // z++;
        -:  665:    }
        -:  666:  }
    #####:  667:  while(z-1 >= 0){
    $$$$$:  667-block  0
    $$$$$:  667-block  1
branch  0 never executed
branch  1 never executed
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:    z=z-1;
    $$$$$:  669-block  0
        -:  670:  }
    #####:  671:  return 0;
    $$$$$:  671-block  0
        -:  672:}
        -:  673:
function smithyFunc called 4 returned 100% blocks executed 100%
        4:  674:int smithyFunc(int currentPlayer, int handPos, struct gameState *state) {
        4:  674-block  0
        -:  675:  int i;
        -:  676:  //+3 Cards
       20:  677:  for (i = 0; i < 4; i++)
        4:  677-block  0
       20:  677-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  678:  {
       16:  679:    drawCard(currentPlayer, state);
       16:  679-block  0
call    0 returned 100%
        -:  680:  }
        -:  681:  
        -:  682:  //discard card from hand
        4:  683:  discardCard(handPos, currentPlayer, state, 1);
        4:  683-block  0
call    0 returned 100%
        -:  684:
        4:  685:  return 0;
        -:  686:}
        -:  687:
function councilRoomFunc called 0 returned 0% blocks executed 0%
    #####:  688:int councilRoomFunc(int currentPlayer, int handPos, struct gameState *state) {
    $$$$$:  688-block  0
        -:  689:  int i;
        -:  690:  //+4 Cards
    #####:  691:  for (i = 1; i < 4; i++)
    $$$$$:  691-block  0
    $$$$$:  691-block  1
branch  0 never executed
branch  1 never executed
        -:  692:  {
    #####:  693:    drawCard(currentPlayer, state);
    $$$$$:  693-block  0
call    0 never executed
        -:  694:  }
        -:  695:  
        -:  696:  //+1 Buy
    #####:  697:  state->numBuys++;
        -:  698:  
        -:  699:  //Each other player draws a card
    #####:  700:  for (i = 0; i <= state->numPlayers; i++)
    $$$$$:  700-block  0
    $$$$$:  700-block  1
    $$$$$:  700-block  2
branch  0 never executed
branch  1 never executed
        -:  701:  {
    #####:  702:    if ( i != currentPlayer )
    $$$$$:  702-block  0
branch  0 never executed
branch  1 never executed
        -:  703:      {
    #####:  704:        drawCard(i, state);
    $$$$$:  704-block  0
call    0 never executed
        -:  705:      }
        -:  706:  }
        -:  707:  
        -:  708:  //put played card in played card pile
    #####:  709:  discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  709-block  0
call    0 never executed
        -:  710:
    #####:  711:  return 0;
        -:  712:}
        -:  713:
function feastFunc called 0 returned 0% blocks executed 0%
    #####:  714:int feastFunc(int currentPlayer, int choice1, struct gameState *state) {
    $$$$$:  714-block  0
        -:  715:  int i;
        -:  716:  int x;
        -:  717:  int temphand[MAX_HAND];
        -:  718:
    #####:  719:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    $$$$$:  719-block  0
    $$$$$:  719-block  1
    $$$$$:  719-block  2
branch  0 never executed
branch  1 never executed
    #####:  720:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  721:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  722:  }
        -:  723:  //Backup hand
        -:  724:
        -:  725:  //Update Coins for Buy
    #####:  726:  updateCoins(currentPlayer, state, 10);
    $$$$$:  726-block  0
call    0 never executed
    #####:  727:  x = 1;//Condition to loop on
    #####:  728:  while( x == 1) {//Buy one card
    $$$$$:  728-block  0
branch  0 never executed
branch  1 never executed
    #####:  729:    if (supplyCount(choice1, state) <= 0){
    $$$$$:  729-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  730:      if (DEBUG)
        -:  731:        printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:      }
        -:  736:    }
    #####:  737:    else if (state->coins < getCost(choice1)){
    $$$$$:  737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  738:      printf("That card is too expensive!\n");
    $$$$$:  738-block  0
call    0 never executed
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:      }
        -:  743:    }
        -:  744:    else{
        -:  745:
        -:  746:      if (DEBUG){
        -:  747:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:      }
        -:  749:
    #####:  750:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  750-block  0
call    0 never executed
    #####:  751:      x = 0;//No more buying cards
        -:  752:
        -:  753:      if (DEBUG){
        -:  754:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:      }
        -:  756:
        -:  757:    }
        -:  758:  }     
        -:  759:
        -:  760:  //Reset Hand
    #####:  761:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  761-block  0
    $$$$$:  761-block  1
    $$$$$:  761-block  2
branch  0 never executed
branch  1 never executed
    #####:  762:    state->hand[currentPlayer][i] = temphand[i];
    #####:  763:    temphand[i] = -1;
        -:  764:  }
        -:  765:  //Reset Hand
        -:  766:
    #####:  767:  return 0;
    $$$$$:  767-block  0
        -:  768:}
        -:  769:
function remodelFunc called 0 returned 0% blocks executed 0%
    #####:  770:int remodelFunc(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state) {
    $$$$$:  770-block  0
        -:  771:  int i;
        -:  772:  int j;
    #####:  773:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:  
    #####:  775:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  775-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:  {
    #####:  777:    return -1;
    $$$$$:  777-block  0
        -:  778:  }
        -:  779:
    #####:  780:  gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  780-block  0
call    0 never executed
        -:  781:
        -:  782:  //discard card from hand
    #####:  783:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  784:
        -:  785:  //discard trashed card
    #####:  786:  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  786-block  0
    $$$$$:  786-block  1
branch  0 never executed
branch  1 never executed
        -:  787:  {
    #####:  788:    if (state->hand[currentPlayer][i] == j)
    $$$$$:  788-block  0
branch  0 never executed
branch  1 never executed
        -:  789:    {
    #####:  790:      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  790-block  0
call    0 never executed
    #####:  791:      break;
        -:  792:    }
        -:  793:  }
    #####:  794:  return 0;
    $$$$$:  794-block  0
        -:  795:}
        -:  796:
function cardEffect called 4 returned 100% blocks executed 4%
        4:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        4:  797-block  0
        -:  798:{
        -:  799:  int i;
        -:  800:  int j;
        -:  801:  int k;
        -:  802:  //int x;
        -:  803:  int index;
        4:  804:  int currentPlayer = whoseTurn(state);
        4:  804-block  0
call    0 returned 100%
        4:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
        4:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  //int temphand[MAX_HAND];// moved above the if statement
        -:  809:  //int drawntreasure=0;
        -:  810:  //int cardDrawn;
        -:  811:  //int z = 0;// this is the counter for the temp hand
        4:  812:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  813:    nextPlayer = 0;
    $$$$$:  813-block  0
        -:  814:  }
        -:  815:  
        -:  816:  //uses switch to select card and perform actions
        4:  817:  switch( card ) 
        4:  817-block  0
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  818:  {
        -:  819:    case adventurer:
    #####:  820:      adventurerFunc(currentPlayer, state);
    $$$$$:  820-block  0
call    0 never executed
        -:  821:			
        -:  822:    case council_room:
    #####:  823:      councilRoomFunc(currentPlayer, handPos, state);
    $$$$$:  823-block  0
call    0 never executed
        -:  824:			
        -:  825:    case feast:
    #####:  826:      feastFunc(currentPlayer, choice1, state);      			
    $$$$$:  826-block  0
call    0 never executed
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
    $$$$$:  829-block  0
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:      {
    #####:  836:        return -1;
    $$$$$:  836-block  0
        -:  837:      }
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:      {
    #####:  841:        return -1;
    $$$$$:  841-block  0
        -:  842:      }
        -:  843:
    #####:  844:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:      {
    #####:  846:        return -1;
    $$$$$:  846-block  0
        -:  847:      }
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  849-block  0
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  855-block  0
    $$$$$:  855-block  1
branch  0 never executed
branch  1 never executed
        -:  856:      {
    #####:  857:        if (state->hand[currentPlayer][i] == j)
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:          {
    #####:  859:            discardCard(i, currentPlayer, state, 0);			
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:            break;
        -:  861:          }
        -:  862:      }
        -:  863:			
    #####:  864:      return 0;
    $$$$$:  864-block  0
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      remodelFunc(currentPlayer, choice1, choice2, handPos, state);
    $$$$$:  867-block  0
call    0 never executed
        -:  868:		
        -:  869:    case smithy:
        4:  870:      smithyFunc(currentPlayer, handPos, state); 
        4:  870-block  0
call    0 returned 100%
        -:  871:		
        -:  872:    case village:
        -:  873:      //+1 Card
        4:  874:      drawCard(currentPlayer, state);
        4:  874-block  0
call    0 returned 100%
        -:  875:			
        -:  876:      //+2 Actions
        4:  877:      state->numActions = state->numActions + 2;
        -:  878:			
        -:  879:      //discard played card from hand
        4:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4:  881:      return 0;
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  885-block  0
branch  0 never executed
branch  1 never executed
    #####:  886:        int p = 0;//Iterator for hand!
    #####:  887:        int card_not_discarded = 1;//Flag for discard set!
    #####:  888:        while(card_not_discarded){
    $$$$$:  888-block  0
    $$$$$:  888-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  888-block  2
    #####:  889:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  889-block  0
branch  0 never executed
branch  1 never executed
    #####:  890:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:            state->discardCount[currentPlayer]++;
    #####:  893:            for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  893-block  0
    $$$$$:  893-block  1
    $$$$$:  893-block  2
branch  0 never executed
branch  1 never executed
    #####:  894:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:            }
    #####:  896:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:            state->handCount[currentPlayer]--;
    #####:  898:            card_not_discarded = 0;//Exit the loop
    $$$$$:  898-block  0
        -:  899:          }
    #####:  900:          else if (p > state->handCount[currentPlayer]){
    $$$$$:  900-block  0
branch  0 never executed
branch  1 never executed
        -:  901:            if(DEBUG) {
        -:  902:              printf("No estate cards in your hand, invalid choice\n");
        -:  903:              printf("Must gain an estate if there are any\n");
        -:  904:            }
    #####:  905:            if (supplyCount(estate, state) > 0){
    $$$$$:  905-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:              gainCard(estate, state, 0, currentPlayer);
    $$$$$:  906-block  0
call    0 never executed
    #####:  907:              state->supplyCount[estate]--;//Decrement estates
    #####:  908:              if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:          isGameOver(state);
    $$$$$:  909-block  0
call    0 never executed
        -:  910:              }
        -:  911:            }
    #####:  912:            card_not_discarded = 0;//Exit the loop
    $$$$$:  912-block  0
        -:  913:          }
        -:  914:                
        -:  915:          else{
    #####:  916:            p++;//Next card
    $$$$$:  916-block  0
        -:  917:          }
        -:  918:        }
        -:  919:      }
        -:  920:
        -:  921:      else{
    #####:  922:        if (supplyCount(estate, state) > 0){
    $$$$$:  922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:          state->supplyCount[estate]--;//Decrement Estates
    #####:  925:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:            isGameOver(state);
    $$$$$:  926-block  0
call    0 never executed
        -:  927:          }
        -:  928:        }
        -:  929:      }
        -:  930:        
        -:  931:        
    #####:  932:      return 0;
    $$$$$:  932-block  0
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  950-block  0
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:      {
    #####:  954:        state->coins = state->coins + 2;
    $$$$$:  954-block  0
        -:  955:      }
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  957-block  0
branch  0 never executed
branch  1 never executed
        -:  958:      {
        -:  959:        //discard hand
    #####:  960:        while(numHandCards(state) > 0)
    $$$$$:  960-block  0
    $$$$$:  960-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:          {
    #####:  962:            discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  962-block  0
call    0 never executed
        -:  963:          }
        -:  964:            
        -:  965:        //draw 4
    #####:  966:        for (i = 0; i < 4; i++)
    $$$$$:  966-block  0
    $$$$$:  966-block  1
branch  0 never executed
branch  1 never executed
        -:  967:          {
    #####:  968:            drawCard(currentPlayer, state);
    $$$$$:  968-block  0
call    0 never executed
        -:  969:          }
        -:  970:            
        -:  971:        //other players discard hand and redraw if hand size > 4
    #####:  972:        for (i = 0; i < state->numPlayers; i++)
    $$$$$:  972-block  0
    $$$$$:  972-block  1
    $$$$$:  972-block  2
branch  0 never executed
branch  1 never executed
        -:  973:          {
    #####:  974:            if (i != currentPlayer)
    $$$$$:  974-block  0
branch  0 never executed
branch  1 never executed
        -:  975:        {
    #####:  976:          if ( state->handCount[i] > 4 )
    $$$$$:  976-block  0
branch  0 never executed
branch  1 never executed
        -:  977:            {
        -:  978:              //discard hand
    #####:  979:              while( state->handCount[i] > 0 )
    $$$$$:  979-block  0
    $$$$$:  979-block  1
branch  0 never executed
branch  1 never executed
        -:  980:          {
    #####:  981:            discardCard(handPos, i, state, 0);
    $$$$$:  981-block  0
call    0 never executed
        -:  982:          }
        -:  983:                  
        -:  984:              //draw 4
    #####:  985:              for (j = 0; j < 4; j++)
    $$$$$:  985-block  0
    $$$$$:  985-block  1
branch  0 never executed
branch  1 never executed
        -:  986:          {
    #####:  987:            drawCard(i, state);
    $$$$$:  987-block  0
call    0 never executed
        -:  988:          }
        -:  989:            }
        -:  990:        }
        -:  991:          }
        -:  992:            
        -:  993:      }
    #####:  994:      return 0;
    $$$$$:  994-block  0
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
    $$$$$:  997-block  0
branch  0 never executed
branch  1 never executed
        -:  998:      {
        -:  999:        //+2 cards
    #####: 1000:        drawCard(currentPlayer, state);
    $$$$$: 1000-block  0
call    0 never executed
    #####: 1001:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:      }
    #####: 1003:          else if (choice1 == 2)
    $$$$$: 1003-block  0
branch  0 never executed
branch  1 never executed
        -: 1004:      {
        -: 1005:        //+2 coins
    #####: 1006:        state->coins = state->coins + 2;
    $$$$$: 1006-block  0
        -: 1007:      }
        -: 1008:          else
        -: 1009:      {
        -: 1010:        //trash 2 cards in hand
    #####: 1011:        discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1011-block  0
call    0 never executed
    #####: 1012:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:      }
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1016-block  0
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1020-block  0
branch  0 never executed
branch  1 never executed
    #####: 1021:        if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1021-block  0
branch  0 never executed
branch  1 never executed
    #####: 1022:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:          state->deckCount[nextPlayer]--;
    $$$$$: 1023-block  0
        -: 1024:        }
    #####: 1025:        else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    #####: 1026:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:          state->discardCount[nextPlayer]--;
    $$$$$: 1027-block  0
        -: 1028:        }
        -: 1029:        else{
        -: 1030:          //No Card to Reveal
        -: 1031:          if (DEBUG){
        -: 1032:            printf("No cards to reveal\n");
        -: 1033:          }
        -: 1034:        }
        -: 1035:            }
        -: 1036:            
        -: 1037:            else{
    #####: 1038:        if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
    #####: 1039:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1039-block  0
    $$$$$: 1039-block  1
    $$$$$: 1039-block  2
branch  0 never executed
branch  1 never executed
    #####: 1040:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:            state->deckCount[nextPlayer]++;
    #####: 1042:            state->discard[nextPlayer][i] = -1;
    #####: 1043:            state->discardCount[nextPlayer]--;
        -: 1044:          }
        -: 1045:                
    #####: 1046:          shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1046-block  0
call    0 never executed
        -: 1047:        } 
    #####: 1048:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:        state->deckCount[nextPlayer]--;
    #####: 1051:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:        state->deckCount[nextPlayer]--;
    $$$$$: 1053-block  0
        -: 1054:            }    
        -: 1055:                
    #####: 1056:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:        state->playedCardCount++;
    #####: 1059:        tributeRevealedCards[1] = -1;
    $$$$$: 1059-block  0
        -: 1060:            }
        -: 1061:
    #####: 1062:            for (i = 0; i <= 2; i ++){
    $$$$$: 1062-block  0
    $$$$$: 1062-block  1
    $$$$$: 1062-block  2
branch  0 never executed
branch  1 never executed
    #####: 1063:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1063-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1063-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1063-block  2
branch  4 never executed
branch  5 never executed
    #####: 1064:          state->coins += 2;
    $$$$$: 1064-block  0
        -: 1065:        }
        -: 1066:              
    #####: 1067:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1067-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1067-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1067-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1067-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1067-block  4
branch  8 never executed
branch  9 never executed
    #####: 1068:          drawCard(currentPlayer, state);
    $$$$$: 1068-block  0
call    0 never executed
    #####: 1069:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:        }
        -: 1071:        else{//Action Card
    #####: 1072:          state->numActions = state->numActions + 2;
    $$$$$: 1072-block  0
        -: 1073:        }
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
    $$$$$: 1076-block  0
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1081-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1081-block  1
branch  2 never executed
branch  3 never executed
        -: 1082:      {
    #####: 1083:        return -1;				
    $$$$$: 1083-block  0
        -: 1084:      }
        -: 1085:
    #####: 1086:          if (choice1 == handPos)
    $$$$$: 1086-block  0
branch  0 never executed
branch  1 never executed
        -: 1087:      {
    #####: 1088:        return -1;
    $$$$$: 1088-block  0
        -: 1089:      }
        -: 1090:
    #####: 1091:          for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1091-block  0
    $$$$$: 1091-block  1
    $$$$$: 1091-block  2
branch  0 never executed
branch  1 never executed
        -: 1092:      {
    #####: 1093:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1093-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1093-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1093-block  2
branch  4 never executed
branch  5 never executed
        -: 1094:          {
    #####: 1095:            j++;
    $$$$$: 1095-block  0
        -: 1096:          }
        -: 1097:      }
    #####: 1098:          if (j < choice2)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
        -: 1099:      {
    #####: 1100:        return -1;				
    $$$$$: 1100-block  0
        -: 1101:      }
        -: 1102:
        -: 1103:          if (DEBUG) 
        -: 1104:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:          //increase supply count for choosen card by amount being discarded
    #####: 1107:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:          
        -: 1109:          //each other player gains a copy of revealed card
    #####: 1110:          for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1110-block  0
    $$$$$: 1110-block  1
    $$$$$: 1110-block  2
branch  0 never executed
branch  1 never executed
        -: 1111:      {
    #####: 1112:        if (i != currentPlayer)
    $$$$$: 1112-block  0
branch  0 never executed
branch  1 never executed
        -: 1113:          {
    #####: 1114:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1114-block  0
call    0 never executed
        -: 1115:          }
        -: 1116:      }
        -: 1117:
        -: 1118:          //discard played card from hand
    #####: 1119:          discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1119-block  0
call    0 never executed
        -: 1120:
        -: 1121:          //trash copies of cards returned to supply
    #####: 1122:          for (j = 0; j < choice2; j++)
    $$$$$: 1122-block  0
    $$$$$: 1122-block  1
branch  0 never executed
branch  1 never executed
        -: 1123:      {
    #####: 1124:        for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1124-block  0
    $$$$$: 1124-block  1
    $$$$$: 1124-block  2
branch  0 never executed
branch  1 never executed
        -: 1125:          {
    #####: 1126:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1126-block  0
branch  0 never executed
branch  1 never executed
        -: 1127:        {
    #####: 1128:          discardCard(i, currentPlayer, state, 1);
    $$$$$: 1128-block  0
call    0 never executed
    #####: 1129:          break;
        -: 1130:        }
        -: 1131:          }
        -: 1132:      }			
        -: 1133:
    #####: 1134:      return 0;
    $$$$$: 1134-block  0
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1139-block  0
    $$$$$: 1139-block  1
branch  0 never executed
branch  1 never executed
        -: 1140:      {
    #####: 1141:        if (i != currentPlayer)
    $$$$$: 1141-block  0
branch  0 never executed
branch  1 never executed
        -: 1142:          {
    #####: 1143:            for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1143-block  0
    $$$$$: 1143-block  1
    $$$$$: 1143-block  2
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:          if (state->hand[i][j] == copper)
    $$$$$: 1145-block  0
branch  0 never executed
branch  1 never executed
        -: 1146:            {
    #####: 1147:              discardCard(j, i, state, 0);
    $$$$$: 1147-block  0
call    0 never executed
    #####: 1148:              break;
        -: 1149:            }
    #####: 1150:          if (j == state->handCount[i])
    $$$$$: 1150-block  0
branch  0 never executed
branch  1 never executed
        -: 1151:            {
    #####: 1152:              for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1152-block  0
    $$$$$: 1152-block  1
    $$$$$: 1152-block  2
branch  0 never executed
branch  1 never executed
        -: 1153:          {
        -: 1154:            if (DEBUG)
        -: 1155:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:          }	
    #####: 1157:              break;
    $$$$$: 1157-block  0
        -: 1158:            }		
        -: 1159:        }
        -: 1160:              
        -: 1161:          }
        -: 1162:            
        -: 1163:      }				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1166-block  0
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:      {
    #####: 1178:        return -1;
    $$$$$: 1178-block  0
        -: 1179:      }
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1185-block  0
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1193-block  0
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
    $$$$$: 1200-block  0
branch  0 never executed
branch  1 never executed
        -: 1201:      {
        -: 1202:        //gain coins equal to trashed card
    #####: 1203:        state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1203-block  0
call    0 never executed
call    1 never executed
        -: 1204:        //trash card
    #####: 1205:        discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:      }
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1209-block  0
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1213-block  0
    $$$$$: 1213-block  1
    $$$$$: 1213-block  2
branch  0 never executed
branch  1 never executed
    #####: 1214:        if (i != currentPlayer){
    $$$$$: 1214-block  0
branch  0 never executed
branch  1 never executed
    #####: 1215:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:          state->discardCount[i]++;
    #####: 1217:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1217-block  0
        -: 1218:        }
        -: 1219:      }
    #####: 1220:      return 0;
    $$$$$: 1220-block  0
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1225-block  0
    $$$$$: 1225-block  1
    $$$$$: 1225-block  2
branch  0 never executed
branch  1 never executed
        -: 1226:      {
    #####: 1227:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1227-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1227-block  1
branch  2 never executed
branch  3 never executed
        -: 1228:          {
    #####: 1229:            index = i;
    #####: 1230:            break;
    $$$$$: 1230-block  0
        -: 1231:          }
        -: 1232:      }
    #####: 1233:      if (index > -1)
    $$$$$: 1233-block  0
branch  0 never executed
branch  1 never executed
        -: 1234:      {
        -: 1235:        //trash both treasure cards
    #####: 1236:        discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1236-block  0
call    0 never executed
    #####: 1237:        discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:        //gain 4 Gold cards
    #####: 1240:        for (i = 0; i < 4; i++)
    $$$$$: 1240-block  0
branch  0 never executed
branch  1 never executed
        -: 1241:          {
    #####: 1242:            gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1242-block  0
call    0 never executed
        -: 1243:          }
        -: 1244:            
        -: 1245:        //return success
    #####: 1246:        return 1;
    $$$$$: 1246-block  0
        -: 1247:      }
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
    $$$$$: 1250-block  0
        -: 1251:}
        -: 1252:	
        4: 1253:  return -1;
    $$$$$: 1253-block  0
        4: 1253-block  1
        -: 1254:}
        -: 1255:
function discardCard called 8 returned 100% blocks executed 78%
        8: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        8: 1256-block  0
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
        8: 1260:  if (trashFlag < 1)
        8: 1260-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1261:    {
        -: 1262:      //add card to played pile
        4: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1264:      state->playedCardCount++;
        4: 1264-block  0
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
        8: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
        8: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        8: 1271-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
    $$$$$: 1274-block  0
        -: 1275:    }
        8: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        8: 1276-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
    $$$$$: 1279-block  0
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
        8: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
        8: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
        8: 1288:      state->handCount[currentPlayer]--;
        8: 1288-block  0
        -: 1289:    }
        -: 1290:	
        8: 1291:  return 0;
        8: 1291-block  0
        -: 1292:}
        -: 1293:
function gainCard called 2 returned 100% blocks executed 80%
        2: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        2: 1294-block  0
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1299:  if ( supplyCount(supplyPos, state) < 1 )
        2: 1299-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1300:    {
    #####: 1301:      return -1;
    $$$$$: 1301-block  0
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
        2: 1309:  if (toFlag == 1)
        2: 1309-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
    $$$$$: 1312-block  0
        -: 1313:    }
        2: 1314:  else if (toFlag == 2)
        2: 1314-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1315:    {
        1: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1317:      state->handCount[player]++;
        1: 1317-block  0
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
        1: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1322:      state->discardCount[player]++;
        1: 1322-block  0
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
        2: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
        2: 1328:  return 0;
        2: 1328-block  0
        -: 1329:}
        -: 1330:
function updateCoins called 8 returned 100% blocks executed 100%
        8: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        8: 1331-block  0
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
        8: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
       39: 1339:  for (i = 0; i < state->handCount[player]; i++)
        8: 1339-block  0
       31: 1339-block  1
       39: 1339-block  2
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
        -: 1340:    {
       31: 1341:      if (state->hand[player][i] == copper)
       31: 1341-block  0
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1342:	{
       22: 1343:	  state->coins += 1;
       22: 1343-block  0
        -: 1344:	}
        9: 1345:      else if (state->hand[player][i] == silver)
        9: 1345-block  0
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -: 1346:	{
        2: 1347:	  state->coins += 2;
        2: 1347-block  0
        -: 1348:	}
        7: 1349:      else if (state->hand[player][i] == gold)
        7: 1349-block  0
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -: 1350:	{
        2: 1351:	  state->coins += 3;
        2: 1351-block  0
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
        8: 1356:  state->coins += bonus;
        -: 1357:
        8: 1358:  return 0;
        8: 1358-block  0
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
----------------- Testing Card: adventurer ----------------
TEST 1: Play Adventurer Card 
hand count = 9, expected = 6
deck count = 0, expected = 3
discard count = 1, expected = 1

TEST 2: Check treasury card in deck and hand 
hand count = 6, expected = 6
deck count = 0, expected = 1

TEST 3: Number of revealed cards to discard 
hand count = 6, expected = 6
deck count = 0, expected = 1
discard count = 1, expected = 3

TEST 4: Adventurer cost test 
Buy adventurer with 6 coins: 0 expected: 0
Buy adventurer with 1 coins: -1 expected: -1

TEST 5: No state change occur for other players
Initial player 1 state:
Player 1 hand count: 0 expected: 0
Player 1 deck count: 10 expected: 10
Player 1 discard count: 0 expected: 0
Player 0 plays adventurer.
Player 1 hand count: 1 expected: 0
Player 1 deck count: 9 expected: 10
Player 1 discard count: 0 expected: 0

TEST 6: No state change should occur to the victory card piles and kingdom card piles
Before play adventurer card
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 99 expected: 99
Player 0 plays adventurer.
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 99 expected: 99

 >>>>> Failsure: Testing complete adventurer <<<<<

File 'dominion.c'
Lines executed:40.22% of 557
Branches executed:44.84% of 417
Taken at least once:29.26% of 417
Calls executed:32.63% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 195 returned 100% blocks executed 83%
      195:    8:int compare(const void* a, const void* b) {
      195:    8-block  0
      195:    9:  if (*(int*)a > *(int*)b)
      195:    9-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    $$$$$:   10-block  0
      195:   11:  if (*(int*)a < *(int*)b)
      195:   11-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
       54:   12:    return -1;
       54:   12-block  0
      141:   13:  return 0;
      141:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 6 returned 100% blocks executed 83%
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        6:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
        6:   44-block  0
call    0 returned 100%
        6:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
        6:   57-block  0
       60:   57-block  1
       66:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
       60:   59-block  0
      600:   59-block  1
      660:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      600:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
      540:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
        6:   73-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        6:   75-block  0
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    $$$$$:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
        6:   87-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        6:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
    $$$$$:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        6:  106-block  0
      120:  106-block  1
      126:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
      120:  108-block  0
      870:  108-block  1
      990:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
      930:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       60:  113-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       60:  113-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       60:  122:		  state->supplyCount[i] = 10;
       60:  122-block  0
        -:  123:		}
       60:  124:	      break;
       60:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
        6:  138-block  0
       12:  138-block  1
       18:  138-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
       12:  141-block  0
       36:  141-block  1
       48:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
       12:  146-block  0
       84:  146-block  1
       96:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
        6:  154-block  0
       12:  154-block  1
       18:  154-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
       12:  156-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
        6:  163-block  0
       12:  163-block  1
       18:  163-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
        6:  176-block  0
      162:  176-block  1
      168:  176-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
        6:  192-block  0
       36:  192-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       30:  193:    drawCard(state->whoseTurn, state);
       30:  193-block  0
call    0 returned 100%
        -:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
        6:  196-block  0
call    0 returned 100%
        -:  197:
        6:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 47 returned 100% blocks executed 100%
       47:  201:int shuffle(int player, struct gameState *state) {
       47:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       47:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       47:  209:  if (state->deckCount[player] < 1)
       47:  209-block  0
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
       29:  210:    return -1;
       29:  210-block  0
       18:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
       18:  211-block  0
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      156:  214:  while (state->deckCount[player] > 0) {
      156:  214-block  0
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
      138:  215:    card = floor(Random() * state->deckCount[player]);
      138:  215-block  0
call    0 returned 100%
      138:  216:    newDeck[newDeckPos] = state->deck[player][card];
      138:  217:    newDeckPos++;
      454:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      316:  218-block  0
      454:  218-block  1
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      316:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      138:  221:    state->deckCount[player]--;
      138:  221-block  0
        -:  222:  }
      156:  223:  for (i = 0; i < newDeckPos; i++) {
       18:  223-block  0
      138:  223-block  1
      156:  223-block  2
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
      138:  224:    state->deck[player][i] = newDeck[i];
      138:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       47:  228:  return 0;
       18:  228-block  0
       47:  228-block  1
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
        -:  270:}
        -:  271:
function buyCard called 8 returned 100% blocks executed 93%
       16:  272:int buyCard(int supplyPos, struct gameState *state) {
        8:  272-block  0
        8:  272-block  1
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        8:  280:  who = state->whoseTurn;
        -:  281:
        8:  282:  if (state->numBuys < 1){
        8:  282-block  0
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        2:  285:    return -1;
        2:  285-block  0
        6:  286:  } else if (supplyCount(supplyPos, state) <1){
        6:  286-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
        6:  290:  } else if (state->coins < getCost(supplyPos)){
        6:  290-block  0
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        4:  293:    return -1;
        4:  293-block  0
        -:  294:  } else {
        2:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        2:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        2:  297-block  0
call    0 returned 100%
        -:  298:  
        2:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        2:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        2:  308:  return 0;
        2:  308-block  0
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 95 returned 100% blocks executed 100%
       95:  320:int supplyCount(int card, struct gameState *state) {
       95:  320-block  0
       95:  321:  return state->supplyCount[card];
       95:  321-block  0
        -:  322:}
        -:  323:
function fullDeckCount called 10 returned 100% blocks executed 100%
       10:  324:int fullDeckCount(int player, int card, struct gameState *state) {
       10:  324-block  0
        -:  325:  int i;
       10:  326:  int count = 0;
        -:  327:
       40:  328:  for (i = 0; i < state->deckCount[player]; i++)
       10:  328-block  0
       30:  328-block  1
       40:  328-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  329:    {
       30:  330:      if (state->deck[player][i] == card) count++;
       30:  330-block  0
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        4:  330-block  1
        -:  331:    }
        -:  332:
       60:  333:  for (i = 0; i < state->handCount[player]; i++)
       10:  333-block  0
       50:  333-block  1
       60:  333-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  334:    {
       50:  335:      if (state->hand[player][i] == card) count++;
       50:  335-block  0
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        8:  335-block  1
        -:  336:    }
        -:  337:
       12:  338:  for (i = 0; i < state->discardCount[player]; i++)
       10:  338-block  0
        2:  338-block  1
       12:  338-block  2
branch  0 taken 17%
branch  1 taken 83% (fallthrough)
        -:  339:    {
        2:  340:      if (state->discard[player][i] == card) count++;
        2:  340-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  340-block  1
        -:  341:    }
        -:  342:
       10:  343:  return count;
       10:  343-block  0
        -:  344:}
        -:  345:
function whoseTurn called 9 returned 100% blocks executed 100%
        9:  346:int whoseTurn(struct gameState *state) {
        9:  346-block  0
        9:  347:  return state->whoseTurn;
        9:  347-block  0
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
    $$$$$:  356-block  1
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
    $$$$$:  380-block  1
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        6:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        6:  395-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        2:  397-block  0
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        4:  402-block  0
      100:  402-block  1
      104:  402-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
      100:  404-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        6:  406-block  0
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        4:  409-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  410:    {
        2:  411:      return 1;
        2:  411-block  0
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        2:  414-block  0
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
    $$$$$:  422-block  1
    $$$$$:  422-block  2
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
    $$$$$:  433-block  1
    $$$$$:  433-block  2
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
    $$$$$:  444-block  1
    $$$$$:  444-block  2
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
    $$$$$:  464-block  1
    $$$$$:  464-block  2
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
    $$$$$:  479-block  1
    $$$$$:  479-block  2
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
    $$$$$:  500-block  1
    $$$$$:  500-block  2
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
    $$$$$:  510-block  1
    $$$$$:  510-block  2
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
        -:  523:}
        -:  524:
function drawCard called 94 returned 100% blocks executed 100%
       94:  525:int drawCard(int player, struct gameState *state)
       94:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
       94:  528:  if (state->deckCount[player] <= 0){//Deck is empty
       94:  528-block  0
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       28:  533:    for (i = 0; i < state->discardCount[player];i++){
       25:  533-block  0
        3:  533-block  1
       28:  533-block  2
branch  0 taken 11%
branch  1 taken 89% (fallthrough)
        3:  534:      state->deck[player][i] = state->discard[player][i];
        3:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       25:  538:    state->deckCount[player] = state->discardCount[player];
       25:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       25:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
       25:  542-block  0
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       25:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       25:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       25:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       25:  559:    if (deckCounter == 0)
       25:  559-block  0
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
       22:  560:      return -1;
       22:  560-block  0
        -:  561:
        3:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  563:    state->deckCount[player]--;
        3:  564:    state->handCount[player]++;//Increment hand count
        3:  564-block  0
        -:  565:  }
        -:  566:
        -:  567:  else{
       69:  568:    int count = state->handCount[player];//Get current hand count for player
       69:  568-block  0
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       69:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       69:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       69:  576:    state->deckCount[player]--;
       69:  577:    state->handCount[player]++;//Increment hand count
       69:  577-block  0
        -:  578:  }
        -:  579:
       72:  580:  return 0;
       72:  580-block  0
        -:  581:}
        -:  582:
function getCost called 12 returned 100% blocks executed 17%
       12:  583:int getCost(int cardNumber)
       12:  583-block  0
        -:  584:{
       12:  585:  switch( cardNumber ) 
       12:  585-block  0
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 33%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        4:  588:      return 0;
        4:  588-block  0
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
        -:  601:    case adventurer:
        4:  602:      return 6;
        4:  602-block  0
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
        -:  613:    case smithy:
        4:  614:      return 4;
        4:  614-block  0
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
        -:  644:}
        -:  645:
        -:  646:/* Function implementation of 5 player cards */
function adventurerFunc called 4 returned 100% blocks executed 93%
        4:  647:int adventurerFunc(int currentPlayer, struct gameState *state) {
        4:  647-block  0
        4:  648:  int drawntreasure = 0;
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];
        4:  651:  int z=0;
        -:  652:
       23:  653:  while(drawntreasure <= 2) {
        4:  653-block  0
       23:  653-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       19:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       19:  654-block  0
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        3:  655:      shuffle(currentPlayer, state);
        3:  655-block  0
call    0 returned 100%
        -:  656:    }
       19:  657:    drawCard(currentPlayer, state);
       19:  657-block  0
call    0 returned 100%
       19:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       19:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        7:  659-block  0
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        7:  659-block  1
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       12:  660:      drawntreasure++;
       12:  660-block  0
        -:  661:    else{
        7:  662:      temphand[z]=cardDrawn;
        7:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        7:  663-block  0
        -:  664:      // z++;
        -:  665:    }
        -:  666:  }
        4:  667:  while(z-1 >= 0){
        4:  667-block  0
        4:  667-block  1
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:    z=z-1;
    $$$$$:  669-block  0
        -:  670:  }
        4:  671:  return 0;
        4:  671-block  0
        -:  672:}
        -:  673:
function smithyFunc called 5 returned 100% blocks executed 100%
        5:  674:int smithyFunc(int currentPlayer, int handPos, struct gameState *state) {
        5:  674-block  0
        -:  675:  int i;
        -:  676:  //+3 Cards
       25:  677:  for (i = 0; i < 4; i++)
        5:  677-block  0
       25:  677-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  678:  {
       20:  679:    drawCard(currentPlayer, state);
       20:  679-block  0
call    0 returned 100%
        -:  680:  }
        -:  681:  
        -:  682:  //discard card from hand
        5:  683:  discardCard(handPos, currentPlayer, state, 1);
        5:  683-block  0
call    0 returned 100%
        -:  684:
        5:  685:  return 0;
        -:  686:}
        -:  687:
function councilRoomFunc called 4 returned 100% blocks executed 100%
        4:  688:int councilRoomFunc(int currentPlayer, int handPos, struct gameState *state) {
        4:  688-block  0
        -:  689:  int i;
        -:  690:  //+4 Cards
       16:  691:  for (i = 1; i < 4; i++)
        4:  691-block  0
       16:  691-block  1
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  692:  {
       12:  693:    drawCard(currentPlayer, state);
       12:  693-block  0
call    0 returned 100%
        -:  694:  }
        -:  695:  
        -:  696:  //+1 Buy
        4:  697:  state->numBuys++;
        -:  698:  
        -:  699:  //Each other player draws a card
       16:  700:  for (i = 0; i <= state->numPlayers; i++)
        4:  700-block  0
       12:  700-block  1
       16:  700-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  701:  {
       12:  702:    if ( i != currentPlayer )
       12:  702-block  0
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  703:      {
        8:  704:        drawCard(i, state);
        8:  704-block  0
call    0 returned 100%
        -:  705:      }
        -:  706:  }
        -:  707:  
        -:  708:  //put played card in played card pile
        4:  709:  discardCard(handPos, currentPlayer, state, 0);
        4:  709-block  0
call    0 returned 100%
        -:  710:
        4:  711:  return 0;
        -:  712:}
        -:  713:
function feastFunc called 4 returned 100% blocks executed 94%
        4:  714:int feastFunc(int currentPlayer, int choice1, struct gameState *state) {
        4:  714-block  0
        -:  715:  int i;
        -:  716:  int x;
        -:  717:  int temphand[MAX_HAND];
        -:  718:
       38:  719:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
        4:  719-block  0
       34:  719-block  1
       38:  719-block  2
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       34:  720:    temphand[i] = state->hand[currentPlayer][i];//Backup card
       34:  721:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  722:  }
        -:  723:  //Backup hand
        -:  724:
        -:  725:  //Update Coins for Buy
        4:  726:  updateCoins(currentPlayer, state, 10);
        4:  726-block  0
call    0 returned 100%
        4:  727:  x = 1;//Condition to loop on
        8:  728:  while( x == 1) {//Buy one card
        8:  728-block  0
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        4:  729:    if (supplyCount(choice1, state) <= 0){
        4:  729-block  0
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  730:      if (DEBUG)
        -:  731:        printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:      }
        -:  736:    }
        4:  737:    else if (state->coins < getCost(choice1)){
        4:  737-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  738:      printf("That card is too expensive!\n");
    $$$$$:  738-block  0
call    0 never executed
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:      }
        -:  743:    }
        -:  744:    else{
        -:  745:
        -:  746:      if (DEBUG){
        -:  747:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:      }
        -:  749:
        4:  750:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
        4:  750-block  0
call    0 returned 100%
        4:  751:      x = 0;//No more buying cards
        -:  752:
        -:  753:      if (DEBUG){
        -:  754:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:      }
        -:  756:
        -:  757:    }
        -:  758:  }     
        -:  759:
        -:  760:  //Reset Hand
       34:  761:  for (i = 0; i < state->handCount[currentPlayer]; i++){
        4:  761-block  0
       30:  761-block  1
       34:  761-block  2
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
       30:  762:    state->hand[currentPlayer][i] = temphand[i];
       30:  763:    temphand[i] = -1;
        -:  764:  }
        -:  765:  //Reset Hand
        -:  766:
        4:  767:  return 0;
        4:  767-block  0
        -:  768:}
        -:  769:
function remodelFunc called 0 returned 0% blocks executed 0%
    #####:  770:int remodelFunc(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state) {
    $$$$$:  770-block  0
        -:  771:  int i;
        -:  772:  int j;
    #####:  773:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:  
    #####:  775:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  775-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:  {
    #####:  777:    return -1;
    $$$$$:  777-block  0
        -:  778:  }
        -:  779:
    #####:  780:  gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  780-block  0
call    0 never executed
        -:  781:
        -:  782:  //discard card from hand
    #####:  783:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  784:
        -:  785:  //discard trashed card
    #####:  786:  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  786-block  0
    $$$$$:  786-block  1
branch  0 never executed
branch  1 never executed
        -:  787:  {
    #####:  788:    if (state->hand[currentPlayer][i] == j)
    $$$$$:  788-block  0
branch  0 never executed
branch  1 never executed
        -:  789:    {
    #####:  790:      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  790-block  0
call    0 never executed
    #####:  791:      break;
        -:  792:    }
        -:  793:  }
    #####:  794:  return 0;
    $$$$$:  794-block  0
        -:  795:}
        -:  796:
function cardEffect called 9 returned 100% blocks executed 6%
        9:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        9:  797-block  0
        -:  798:{
        -:  799:  int i;
        -:  800:  int j;
        -:  801:  int k;
        -:  802:  //int x;
        -:  803:  int index;
        9:  804:  int currentPlayer = whoseTurn(state);
        9:  804-block  0
call    0 returned 100%
        9:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
        9:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  //int temphand[MAX_HAND];// moved above the if statement
        -:  809:  //int drawntreasure=0;
        -:  810:  //int cardDrawn;
        -:  811:  //int z = 0;// this is the counter for the temp hand
        9:  812:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  813:    nextPlayer = 0;
    $$$$$:  813-block  0
        -:  814:  }
        -:  815:  
        -:  816:  //uses switch to select card and perform actions
        9:  817:  switch( card ) 
        9:  817-block  0
branch  0 taken 44%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 56%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  818:  {
        -:  819:    case adventurer:
        4:  820:      adventurerFunc(currentPlayer, state);
        4:  820-block  0
call    0 returned 100%
        -:  821:			
        -:  822:    case council_room:
        4:  823:      councilRoomFunc(currentPlayer, handPos, state);
        4:  823-block  0
call    0 returned 100%
        -:  824:			
        -:  825:    case feast:
        4:  826:      feastFunc(currentPlayer, choice1, state);      			
        4:  826-block  0
call    0 returned 100%
        -:  827:			
        -:  828:    case gardens:
        4:  829:      return -1;
        4:  829-block  0
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:      {
    #####:  836:        return -1;
    $$$$$:  836-block  0
        -:  837:      }
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:      {
    #####:  841:        return -1;
    $$$$$:  841-block  0
        -:  842:      }
        -:  843:
    #####:  844:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:      {
    #####:  846:        return -1;
    $$$$$:  846-block  0
        -:  847:      }
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  849-block  0
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  855-block  0
    $$$$$:  855-block  1
branch  0 never executed
branch  1 never executed
        -:  856:      {
    #####:  857:        if (state->hand[currentPlayer][i] == j)
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:          {
    #####:  859:            discardCard(i, currentPlayer, state, 0);			
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:            break;
        -:  861:          }
        -:  862:      }
        -:  863:			
    #####:  864:      return 0;
    $$$$$:  864-block  0
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      remodelFunc(currentPlayer, choice1, choice2, handPos, state);
    $$$$$:  867-block  0
call    0 never executed
        -:  868:		
        -:  869:    case smithy:
        5:  870:      smithyFunc(currentPlayer, handPos, state); 
        5:  870-block  0
call    0 returned 100%
        -:  871:		
        -:  872:    case village:
        -:  873:      //+1 Card
        5:  874:      drawCard(currentPlayer, state);
        5:  874-block  0
call    0 returned 100%
        -:  875:			
        -:  876:      //+2 Actions
        5:  877:      state->numActions = state->numActions + 2;
        -:  878:			
        -:  879:      //discard played card from hand
        5:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        5:  881:      return 0;
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  885-block  0
branch  0 never executed
branch  1 never executed
    #####:  886:        int p = 0;//Iterator for hand!
    #####:  887:        int card_not_discarded = 1;//Flag for discard set!
    #####:  888:        while(card_not_discarded){
    $$$$$:  888-block  0
    $$$$$:  888-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  888-block  2
    #####:  889:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  889-block  0
branch  0 never executed
branch  1 never executed
    #####:  890:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:            state->discardCount[currentPlayer]++;
    #####:  893:            for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  893-block  0
    $$$$$:  893-block  1
    $$$$$:  893-block  2
branch  0 never executed
branch  1 never executed
    #####:  894:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:            }
    #####:  896:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:            state->handCount[currentPlayer]--;
    #####:  898:            card_not_discarded = 0;//Exit the loop
    $$$$$:  898-block  0
        -:  899:          }
    #####:  900:          else if (p > state->handCount[currentPlayer]){
    $$$$$:  900-block  0
branch  0 never executed
branch  1 never executed
        -:  901:            if(DEBUG) {
        -:  902:              printf("No estate cards in your hand, invalid choice\n");
        -:  903:              printf("Must gain an estate if there are any\n");
        -:  904:            }
    #####:  905:            if (supplyCount(estate, state) > 0){
    $$$$$:  905-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:              gainCard(estate, state, 0, currentPlayer);
    $$$$$:  906-block  0
call    0 never executed
    #####:  907:              state->supplyCount[estate]--;//Decrement estates
    #####:  908:              if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:          isGameOver(state);
    $$$$$:  909-block  0
call    0 never executed
        -:  910:              }
        -:  911:            }
    #####:  912:            card_not_discarded = 0;//Exit the loop
    $$$$$:  912-block  0
        -:  913:          }
        -:  914:                
        -:  915:          else{
    #####:  916:            p++;//Next card
    $$$$$:  916-block  0
        -:  917:          }
        -:  918:        }
        -:  919:      }
        -:  920:
        -:  921:      else{
    #####:  922:        if (supplyCount(estate, state) > 0){
    $$$$$:  922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:          state->supplyCount[estate]--;//Decrement Estates
    #####:  925:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:            isGameOver(state);
    $$$$$:  926-block  0
call    0 never executed
        -:  927:          }
        -:  928:        }
        -:  929:      }
        -:  930:        
        -:  931:        
    #####:  932:      return 0;
    $$$$$:  932-block  0
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  950-block  0
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:      {
    #####:  954:        state->coins = state->coins + 2;
    $$$$$:  954-block  0
        -:  955:      }
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  957-block  0
branch  0 never executed
branch  1 never executed
        -:  958:      {
        -:  959:        //discard hand
    #####:  960:        while(numHandCards(state) > 0)
    $$$$$:  960-block  0
    $$$$$:  960-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:          {
    #####:  962:            discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  962-block  0
call    0 never executed
        -:  963:          }
        -:  964:            
        -:  965:        //draw 4
    #####:  966:        for (i = 0; i < 4; i++)
    $$$$$:  966-block  0
    $$$$$:  966-block  1
branch  0 never executed
branch  1 never executed
        -:  967:          {
    #####:  968:            drawCard(currentPlayer, state);
    $$$$$:  968-block  0
call    0 never executed
        -:  969:          }
        -:  970:            
        -:  971:        //other players discard hand and redraw if hand size > 4
    #####:  972:        for (i = 0; i < state->numPlayers; i++)
    $$$$$:  972-block  0
    $$$$$:  972-block  1
    $$$$$:  972-block  2
branch  0 never executed
branch  1 never executed
        -:  973:          {
    #####:  974:            if (i != currentPlayer)
    $$$$$:  974-block  0
branch  0 never executed
branch  1 never executed
        -:  975:        {
    #####:  976:          if ( state->handCount[i] > 4 )
    $$$$$:  976-block  0
branch  0 never executed
branch  1 never executed
        -:  977:            {
        -:  978:              //discard hand
    #####:  979:              while( state->handCount[i] > 0 )
    $$$$$:  979-block  0
    $$$$$:  979-block  1
branch  0 never executed
branch  1 never executed
        -:  980:          {
    #####:  981:            discardCard(handPos, i, state, 0);
    $$$$$:  981-block  0
call    0 never executed
        -:  982:          }
        -:  983:                  
        -:  984:              //draw 4
    #####:  985:              for (j = 0; j < 4; j++)
    $$$$$:  985-block  0
    $$$$$:  985-block  1
branch  0 never executed
branch  1 never executed
        -:  986:          {
    #####:  987:            drawCard(i, state);
    $$$$$:  987-block  0
call    0 never executed
        -:  988:          }
        -:  989:            }
        -:  990:        }
        -:  991:          }
        -:  992:            
        -:  993:      }
    #####:  994:      return 0;
    $$$$$:  994-block  0
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
    $$$$$:  997-block  0
branch  0 never executed
branch  1 never executed
        -:  998:      {
        -:  999:        //+2 cards
    #####: 1000:        drawCard(currentPlayer, state);
    $$$$$: 1000-block  0
call    0 never executed
    #####: 1001:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:      }
    #####: 1003:          else if (choice1 == 2)
    $$$$$: 1003-block  0
branch  0 never executed
branch  1 never executed
        -: 1004:      {
        -: 1005:        //+2 coins
    #####: 1006:        state->coins = state->coins + 2;
    $$$$$: 1006-block  0
        -: 1007:      }
        -: 1008:          else
        -: 1009:      {
        -: 1010:        //trash 2 cards in hand
    #####: 1011:        discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1011-block  0
call    0 never executed
    #####: 1012:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:      }
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1016-block  0
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1020-block  0
branch  0 never executed
branch  1 never executed
    #####: 1021:        if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1021-block  0
branch  0 never executed
branch  1 never executed
    #####: 1022:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:          state->deckCount[nextPlayer]--;
    $$$$$: 1023-block  0
        -: 1024:        }
    #####: 1025:        else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    #####: 1026:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:          state->discardCount[nextPlayer]--;
    $$$$$: 1027-block  0
        -: 1028:        }
        -: 1029:        else{
        -: 1030:          //No Card to Reveal
        -: 1031:          if (DEBUG){
        -: 1032:            printf("No cards to reveal\n");
        -: 1033:          }
        -: 1034:        }
        -: 1035:            }
        -: 1036:            
        -: 1037:            else{
    #####: 1038:        if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
    #####: 1039:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1039-block  0
    $$$$$: 1039-block  1
    $$$$$: 1039-block  2
branch  0 never executed
branch  1 never executed
    #####: 1040:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:            state->deckCount[nextPlayer]++;
    #####: 1042:            state->discard[nextPlayer][i] = -1;
    #####: 1043:            state->discardCount[nextPlayer]--;
        -: 1044:          }
        -: 1045:                
    #####: 1046:          shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1046-block  0
call    0 never executed
        -: 1047:        } 
    #####: 1048:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:        state->deckCount[nextPlayer]--;
    #####: 1051:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:        state->deckCount[nextPlayer]--;
    $$$$$: 1053-block  0
        -: 1054:            }    
        -: 1055:                
    #####: 1056:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:        state->playedCardCount++;
    #####: 1059:        tributeRevealedCards[1] = -1;
    $$$$$: 1059-block  0
        -: 1060:            }
        -: 1061:
    #####: 1062:            for (i = 0; i <= 2; i ++){
    $$$$$: 1062-block  0
    $$$$$: 1062-block  1
    $$$$$: 1062-block  2
branch  0 never executed
branch  1 never executed
    #####: 1063:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1063-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1063-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1063-block  2
branch  4 never executed
branch  5 never executed
    #####: 1064:          state->coins += 2;
    $$$$$: 1064-block  0
        -: 1065:        }
        -: 1066:              
    #####: 1067:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1067-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1067-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1067-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1067-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1067-block  4
branch  8 never executed
branch  9 never executed
    #####: 1068:          drawCard(currentPlayer, state);
    $$$$$: 1068-block  0
call    0 never executed
    #####: 1069:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:        }
        -: 1071:        else{//Action Card
    #####: 1072:          state->numActions = state->numActions + 2;
    $$$$$: 1072-block  0
        -: 1073:        }
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
    $$$$$: 1076-block  0
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1081-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1081-block  1
branch  2 never executed
branch  3 never executed
        -: 1082:      {
    #####: 1083:        return -1;				
    $$$$$: 1083-block  0
        -: 1084:      }
        -: 1085:
    #####: 1086:          if (choice1 == handPos)
    $$$$$: 1086-block  0
branch  0 never executed
branch  1 never executed
        -: 1087:      {
    #####: 1088:        return -1;
    $$$$$: 1088-block  0
        -: 1089:      }
        -: 1090:
    #####: 1091:          for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1091-block  0
    $$$$$: 1091-block  1
    $$$$$: 1091-block  2
branch  0 never executed
branch  1 never executed
        -: 1092:      {
    #####: 1093:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1093-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1093-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1093-block  2
branch  4 never executed
branch  5 never executed
        -: 1094:          {
    #####: 1095:            j++;
    $$$$$: 1095-block  0
        -: 1096:          }
        -: 1097:      }
    #####: 1098:          if (j < choice2)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
        -: 1099:      {
    #####: 1100:        return -1;				
    $$$$$: 1100-block  0
        -: 1101:      }
        -: 1102:
        -: 1103:          if (DEBUG) 
        -: 1104:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:          //increase supply count for choosen card by amount being discarded
    #####: 1107:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:          
        -: 1109:          //each other player gains a copy of revealed card
    #####: 1110:          for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1110-block  0
    $$$$$: 1110-block  1
    $$$$$: 1110-block  2
branch  0 never executed
branch  1 never executed
        -: 1111:      {
    #####: 1112:        if (i != currentPlayer)
    $$$$$: 1112-block  0
branch  0 never executed
branch  1 never executed
        -: 1113:          {
    #####: 1114:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1114-block  0
call    0 never executed
        -: 1115:          }
        -: 1116:      }
        -: 1117:
        -: 1118:          //discard played card from hand
    #####: 1119:          discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1119-block  0
call    0 never executed
        -: 1120:
        -: 1121:          //trash copies of cards returned to supply
    #####: 1122:          for (j = 0; j < choice2; j++)
    $$$$$: 1122-block  0
    $$$$$: 1122-block  1
branch  0 never executed
branch  1 never executed
        -: 1123:      {
    #####: 1124:        for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1124-block  0
    $$$$$: 1124-block  1
    $$$$$: 1124-block  2
branch  0 never executed
branch  1 never executed
        -: 1125:          {
    #####: 1126:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1126-block  0
branch  0 never executed
branch  1 never executed
        -: 1127:        {
    #####: 1128:          discardCard(i, currentPlayer, state, 1);
    $$$$$: 1128-block  0
call    0 never executed
    #####: 1129:          break;
        -: 1130:        }
        -: 1131:          }
        -: 1132:      }			
        -: 1133:
    #####: 1134:      return 0;
    $$$$$: 1134-block  0
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1139-block  0
    $$$$$: 1139-block  1
branch  0 never executed
branch  1 never executed
        -: 1140:      {
    #####: 1141:        if (i != currentPlayer)
    $$$$$: 1141-block  0
branch  0 never executed
branch  1 never executed
        -: 1142:          {
    #####: 1143:            for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1143-block  0
    $$$$$: 1143-block  1
    $$$$$: 1143-block  2
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:          if (state->hand[i][j] == copper)
    $$$$$: 1145-block  0
branch  0 never executed
branch  1 never executed
        -: 1146:            {
    #####: 1147:              discardCard(j, i, state, 0);
    $$$$$: 1147-block  0
call    0 never executed
    #####: 1148:              break;
        -: 1149:            }
    #####: 1150:          if (j == state->handCount[i])
    $$$$$: 1150-block  0
branch  0 never executed
branch  1 never executed
        -: 1151:            {
    #####: 1152:              for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1152-block  0
    $$$$$: 1152-block  1
    $$$$$: 1152-block  2
branch  0 never executed
branch  1 never executed
        -: 1153:          {
        -: 1154:            if (DEBUG)
        -: 1155:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:          }	
    #####: 1157:              break;
    $$$$$: 1157-block  0
        -: 1158:            }		
        -: 1159:        }
        -: 1160:              
        -: 1161:          }
        -: 1162:            
        -: 1163:      }				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1166-block  0
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:      {
    #####: 1178:        return -1;
    $$$$$: 1178-block  0
        -: 1179:      }
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1185-block  0
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1193-block  0
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
    $$$$$: 1200-block  0
branch  0 never executed
branch  1 never executed
        -: 1201:      {
        -: 1202:        //gain coins equal to trashed card
    #####: 1203:        state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1203-block  0
call    0 never executed
call    1 never executed
        -: 1204:        //trash card
    #####: 1205:        discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:      }
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1209-block  0
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1213-block  0
    $$$$$: 1213-block  1
    $$$$$: 1213-block  2
branch  0 never executed
branch  1 never executed
    #####: 1214:        if (i != currentPlayer){
    $$$$$: 1214-block  0
branch  0 never executed
branch  1 never executed
    #####: 1215:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:          state->discardCount[i]++;
    #####: 1217:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1217-block  0
        -: 1218:        }
        -: 1219:      }
    #####: 1220:      return 0;
    $$$$$: 1220-block  0
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1225-block  0
    $$$$$: 1225-block  1
    $$$$$: 1225-block  2
branch  0 never executed
branch  1 never executed
        -: 1226:      {
    #####: 1227:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1227-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1227-block  1
branch  2 never executed
branch  3 never executed
        -: 1228:          {
    #####: 1229:            index = i;
    #####: 1230:            break;
    $$$$$: 1230-block  0
        -: 1231:          }
        -: 1232:      }
    #####: 1233:      if (index > -1)
    $$$$$: 1233-block  0
branch  0 never executed
branch  1 never executed
        -: 1234:      {
        -: 1235:        //trash both treasure cards
    #####: 1236:        discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1236-block  0
call    0 never executed
    #####: 1237:        discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:        //gain 4 Gold cards
    #####: 1240:        for (i = 0; i < 4; i++)
    $$$$$: 1240-block  0
branch  0 never executed
branch  1 never executed
        -: 1241:          {
    #####: 1242:            gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1242-block  0
call    0 never executed
        -: 1243:          }
        -: 1244:            
        -: 1245:        //return success
    #####: 1246:        return 1;
    $$$$$: 1246-block  0
        -: 1247:      }
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
    $$$$$: 1250-block  0
        -: 1251:}
        -: 1252:	
        9: 1253:  return -1;
    $$$$$: 1253-block  0
        9: 1253-block  1
        -: 1254:}
        -: 1255:
function discardCard called 14 returned 100% blocks executed 78%
       14: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
       14: 1256-block  0
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       14: 1260:  if (trashFlag < 1)
       14: 1260-block  0
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -: 1261:    {
        -: 1262:      //add card to played pile
        9: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        9: 1264:      state->playedCardCount++;
        9: 1264-block  0
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       14: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       14: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
       14: 1271-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
    $$$$$: 1274-block  0
        -: 1275:    }
       14: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
       14: 1276-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
    $$$$$: 1279-block  0
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       14: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       14: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       14: 1288:      state->handCount[currentPlayer]--;
       14: 1288-block  0
        -: 1289:    }
        -: 1290:	
       14: 1291:  return 0;
       14: 1291-block  0
        -: 1292:}
        -: 1293:
function gainCard called 7 returned 100% blocks executed 80%
        7: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        7: 1294-block  0
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1299:  if ( supplyCount(supplyPos, state) < 1 )
        7: 1299-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1300:    {
    #####: 1301:      return -1;
    $$$$$: 1301-block  0
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
        7: 1309:  if (toFlag == 1)
        7: 1309-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
    $$$$$: 1312-block  0
        -: 1313:    }
        7: 1314:  else if (toFlag == 2)
        7: 1314-block  0
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1315:    {
        1: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1317:      state->handCount[player]++;
        1: 1317-block  0
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
        6: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1322:      state->discardCount[player]++;
        6: 1322-block  0
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
        7: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
        7: 1328:  return 0;
        7: 1328-block  0
        -: 1329:}
        -: 1330:
function updateCoins called 13 returned 100% blocks executed 100%
       13: 1331:int updateCoins(int player, struct gameState *state, int bonus)
       13: 1331-block  0
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
       13: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
       79: 1339:  for (i = 0; i < state->handCount[player]; i++)
       13: 1339-block  0
       66: 1339-block  1
       79: 1339-block  2
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1340:    {
       66: 1341:      if (state->hand[player][i] == copper)
       66: 1341-block  0
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
        -: 1342:	{
       26: 1343:	  state->coins += 1;
       26: 1343-block  0
        -: 1344:	}
       40: 1345:      else if (state->hand[player][i] == silver)
       40: 1345-block  0
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1346:	{
        2: 1347:	  state->coins += 2;
        2: 1347-block  0
        -: 1348:	}
       38: 1349:      else if (state->hand[player][i] == gold)
       38: 1349-block  0
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1350:	{
        2: 1351:	  state->coins += 3;
        2: 1351-block  0
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
       13: 1356:  state->coins += bonus;
        -: 1357:
       13: 1358:  return 0;
       13: 1358-block  0
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
----------------- Testing Card: council_room ----------------
TEST 1: +4 Cards 
hand count = 7, expected = 8
deck count = 2, expected = 1

TEST 2: +1 Buy
buy count = 2, expected = 2

TEST 3: Each other player draws a card
Player 0 plays the card.
Player 0 hand count 7, expected 8
Player 0 deck count 2, expected 1
Player 1 hand count 1, expected 5
Player 1 deck count 9, expected 4

TEST 4: Council Room cost test
Buy Council Room with 5 coins: 0 expected: 0
Buy Council Room with 1 coins: -1 expected: -1

TEST 5: No state change should occur to the victory card piles and kingdom card piles
Before play council_room card
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 100 expected: 99
Player 0 plays council_room.
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 100 expected: 99

 >>>>> Failsure: Testing complete council_room <<<<<

File 'dominion.c'
Lines executed:40.22% of 557
Branches executed:44.84% of 417
Taken at least once:29.50% of 417
Calls executed:32.63% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 225 returned 100% blocks executed 83%
      225:    8:int compare(const void* a, const void* b) {
      225:    8-block  0
      225:    9:  if (*(int*)a > *(int*)b)
      225:    9-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    $$$$$:   10-block  0
      225:   11:  if (*(int*)a < *(int*)b)
      225:   11-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
       62:   12:    return -1;
       62:   12-block  0
      163:   13:  return 0;
      163:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 83%
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        7:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
        7:   44-block  0
call    0 returned 100%
        7:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        7:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        7:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       77:   57:  for (i = 0; i < 10; i++)
        7:   57-block  0
       70:   57-block  1
       77:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      770:   59:      for (j = 0; j < 10; j++)
       70:   59-block  0
      700:   59-block  1
      770:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      700:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
      630:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:  if (numPlayers == 2)
        7:   73-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        7:   75-block  0
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    $$$$$:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        7:   87:  if (numPlayers == 2)
        7:   87-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        7:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
    $$$$$:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        7:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  102:  state->supplyCount[silver] = 40;
        7:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      147:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        7:  106-block  0
      140:  106-block  1
      147:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1155:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
      140:  108-block  0
     1015:  108-block  1
     1155:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1085:  110:	  if (kingdomCards[j] == i)
     1085:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       70:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       70:  113-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       70:  113-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       70:  122:		  state->supplyCount[i] = 10;
       70:  122-block  0
        -:  123:		}
       70:  124:	      break;
       70:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1015:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       21:  138:  for (i = 0; i < numPlayers; i++)
        7:  138-block  0
       14:  138-block  1
       21:  138-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       14:  140:      state->deckCount[i] = 0;
       56:  141:      for (j = 0; j < 3; j++)
       14:  141-block  0
       42:  141-block  1
       56:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       42:  143:	  state->deck[i][j] = estate;
       42:  144:	  state->deckCount[i]++;
        -:  145:	}
      112:  146:      for (j = 3; j < 10; j++)
       14:  146-block  0
       98:  146-block  1
      112:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       98:  148:	  state->deck[i][j] = copper;
       98:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       21:  154:  for (i = 0; i < numPlayers; i++)
        7:  154-block  0
       14:  154-block  1
       21:  154-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       14:  156:      if ( shuffle(i, state) < 0 )
       14:  156-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       21:  163:  for (i = 0; i < numPlayers; i++)
        7:  163-block  0
       14:  163-block  1
       21:  163-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       14:  166:      state->handCount[i] = 0;
       14:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      196:  176:  for (i = 0; i <= treasure_map; i++)
        7:  176-block  0
      189:  176-block  1
      196:  176-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      189:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        7:  182:  state->outpostPlayed = 0;
        7:  183:  state->phase = 0;
        7:  184:  state->numActions = 1;
        7:  185:  state->numBuys = 1;
        7:  186:  state->playedCardCount = 0;
        7:  187:  state->whoseTurn = 0;
        7:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       42:  192:  for (it = 0; it < 5; it++){
        7:  192-block  0
       42:  192-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       35:  193:    drawCard(state->whoseTurn, state);
       35:  193-block  0
call    0 returned 100%
        -:  194:  }
        -:  195:
        7:  196:  updateCoins(state->whoseTurn, state, 0);
        7:  196-block  0
call    0 returned 100%
        -:  197:
        7:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 52 returned 100% blocks executed 100%
       52:  201:int shuffle(int player, struct gameState *state) {
       52:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       52:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       52:  209:  if (state->deckCount[player] < 1)
       52:  209-block  0
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
       32:  210:    return -1;
       32:  210-block  0
       20:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
       20:  211-block  0
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      178:  214:  while (state->deckCount[player] > 0) {
      178:  214-block  0
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
      158:  215:    card = floor(Random() * state->deckCount[player]);
      158:  215-block  0
call    0 returned 100%
      158:  216:    newDeck[newDeckPos] = state->deck[player][card];
      158:  217:    newDeckPos++;
      524:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      366:  218-block  0
      524:  218-block  1
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      366:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      158:  221:    state->deckCount[player]--;
      158:  221-block  0
        -:  222:  }
      178:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  223-block  0
      158:  223-block  1
      178:  223-block  2
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
      158:  224:    state->deck[player][i] = newDeck[i];
      158:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       52:  228:  return 0;
       20:  228-block  0
       52:  228-block  1
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
        -:  270:}
        -:  271:
function buyCard called 12 returned 100% blocks executed 93%
       24:  272:int buyCard(int supplyPos, struct gameState *state) {
       12:  272-block  0
       12:  272-block  1
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       12:  280:  who = state->whoseTurn;
        -:  281:
       12:  282:  if (state->numBuys < 1){
       12:  282-block  0
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        3:  285:    return -1;
        3:  285-block  0
        9:  286:  } else if (supplyCount(supplyPos, state) <1){
        9:  286-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
        9:  290:  } else if (state->coins < getCost(supplyPos)){
        9:  290-block  0
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        6:  293:    return -1;
        6:  293-block  0
        -:  294:  } else {
        3:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        3:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        3:  297-block  0
call    0 returned 100%
        -:  298:  
        3:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        3:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        3:  308:  return 0;
        3:  308-block  0
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 144 returned 100% blocks executed 100%
      144:  320:int supplyCount(int card, struct gameState *state) {
      144:  320-block  0
      144:  321:  return state->supplyCount[card];
      144:  321-block  0
        -:  322:}
        -:  323:
function fullDeckCount called 10 returned 100% blocks executed 100%
       10:  324:int fullDeckCount(int player, int card, struct gameState *state) {
       10:  324-block  0
        -:  325:  int i;
       10:  326:  int count = 0;
        -:  327:
       40:  328:  for (i = 0; i < state->deckCount[player]; i++)
       10:  328-block  0
       30:  328-block  1
       40:  328-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  329:    {
       30:  330:      if (state->deck[player][i] == card) count++;
       30:  330-block  0
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        4:  330-block  1
        -:  331:    }
        -:  332:
       60:  333:  for (i = 0; i < state->handCount[player]; i++)
       10:  333-block  0
       50:  333-block  1
       60:  333-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  334:    {
       50:  335:      if (state->hand[player][i] == card) count++;
       50:  335-block  0
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        8:  335-block  1
        -:  336:    }
        -:  337:
       12:  338:  for (i = 0; i < state->discardCount[player]; i++)
       10:  338-block  0
        2:  338-block  1
       12:  338-block  2
branch  0 taken 17%
branch  1 taken 83% (fallthrough)
        -:  339:    {
        2:  340:      if (state->discard[player][i] == card) count++;
        2:  340-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  340-block  1
        -:  341:    }
        -:  342:
       10:  343:  return count;
       10:  343-block  0
        -:  344:}
        -:  345:
function whoseTurn called 13 returned 100% blocks executed 100%
       13:  346:int whoseTurn(struct gameState *state) {
       13:  346-block  0
       13:  347:  return state->whoseTurn;
       13:  347-block  0
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
    $$$$$:  356-block  1
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
    $$$$$:  380-block  1
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        6:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        6:  395-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        2:  397-block  0
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        4:  402-block  0
      100:  402-block  1
      104:  402-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
      100:  404-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        6:  406-block  0
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        4:  409-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  410:    {
        2:  411:      return 1;
        2:  411-block  0
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        2:  414-block  0
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
    $$$$$:  422-block  1
    $$$$$:  422-block  2
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
    $$$$$:  433-block  1
    $$$$$:  433-block  2
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
    $$$$$:  444-block  1
    $$$$$:  444-block  2
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
    $$$$$:  464-block  1
    $$$$$:  464-block  2
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
    $$$$$:  479-block  1
    $$$$$:  479-block  2
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
    $$$$$:  500-block  1
    $$$$$:  500-block  2
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
    $$$$$:  510-block  1
    $$$$$:  510-block  2
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
        -:  523:}
        -:  524:
function drawCard called 119 returned 100% blocks executed 100%
      119:  525:int drawCard(int player, struct gameState *state)
      119:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
      119:  528:  if (state->deckCount[player] <= 0){//Deck is empty
      119:  528-block  0
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       31:  533:    for (i = 0; i < state->discardCount[player];i++){
       28:  533-block  0
        3:  533-block  1
       31:  533-block  2
branch  0 taken 10%
branch  1 taken 90% (fallthrough)
        3:  534:      state->deck[player][i] = state->discard[player][i];
        3:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       28:  538:    state->deckCount[player] = state->discardCount[player];
       28:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       28:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
       28:  542-block  0
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       28:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       28:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       28:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       28:  559:    if (deckCounter == 0)
       28:  559-block  0
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       25:  560:      return -1;
       25:  560-block  0
        -:  561:
        3:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  563:    state->deckCount[player]--;
        3:  564:    state->handCount[player]++;//Increment hand count
        3:  564-block  0
        -:  565:  }
        -:  566:
        -:  567:  else{
       91:  568:    int count = state->handCount[player];//Get current hand count for player
       91:  568-block  0
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       91:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       91:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       91:  576:    state->deckCount[player]--;
       91:  577:    state->handCount[player]++;//Increment hand count
       91:  577-block  0
        -:  578:  }
        -:  579:
       94:  580:  return 0;
       94:  580-block  0
        -:  581:}
        -:  582:
function getCost called 19 returned 100% blocks executed 17%
       19:  583:int getCost(int cardNumber)
       19:  583-block  0
        -:  584:{
       19:  585:  switch( cardNumber ) 
       19:  585-block  0
branch  0 taken 37%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 21%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 42%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        7:  588:      return 0;
        7:  588-block  0
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
        -:  601:    case adventurer:
        4:  602:      return 6;
        4:  602-block  0
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
        -:  613:    case smithy:
        8:  614:      return 4;
        8:  614-block  0
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
        -:  644:}
        -:  645:
        -:  646:/* Function implementation of 5 player cards */
function adventurerFunc called 4 returned 100% blocks executed 93%
        4:  647:int adventurerFunc(int currentPlayer, struct gameState *state) {
        4:  647-block  0
        4:  648:  int drawntreasure = 0;
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];
        4:  651:  int z=0;
        -:  652:
       23:  653:  while(drawntreasure <= 2) {
        4:  653-block  0
       23:  653-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       19:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       19:  654-block  0
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        3:  655:      shuffle(currentPlayer, state);
        3:  655-block  0
call    0 returned 100%
        -:  656:    }
       19:  657:    drawCard(currentPlayer, state);
       19:  657-block  0
call    0 returned 100%
       19:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       19:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        7:  659-block  0
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        7:  659-block  1
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       12:  660:      drawntreasure++;
       12:  660-block  0
        -:  661:    else{
        7:  662:      temphand[z]=cardDrawn;
        7:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        7:  663-block  0
        -:  664:      // z++;
        -:  665:    }
        -:  666:  }
        4:  667:  while(z-1 >= 0){
        4:  667-block  0
        4:  667-block  1
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:    z=z-1;
    $$$$$:  669-block  0
        -:  670:  }
        4:  671:  return 0;
        4:  671-block  0
        -:  672:}
        -:  673:
function smithyFunc called 6 returned 100% blocks executed 100%
        6:  674:int smithyFunc(int currentPlayer, int handPos, struct gameState *state) {
        6:  674-block  0
        -:  675:  int i;
        -:  676:  //+3 Cards
       30:  677:  for (i = 0; i < 4; i++)
        6:  677-block  0
       30:  677-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  678:  {
       24:  679:    drawCard(currentPlayer, state);
       24:  679-block  0
call    0 returned 100%
        -:  680:  }
        -:  681:  
        -:  682:  //discard card from hand
        6:  683:  discardCard(handPos, currentPlayer, state, 1);
        6:  683-block  0
call    0 returned 100%
        -:  684:
        6:  685:  return 0;
        -:  686:}
        -:  687:
function councilRoomFunc called 7 returned 100% blocks executed 100%
        7:  688:int councilRoomFunc(int currentPlayer, int handPos, struct gameState *state) {
        7:  688-block  0
        -:  689:  int i;
        -:  690:  //+4 Cards
       28:  691:  for (i = 1; i < 4; i++)
        7:  691-block  0
       28:  691-block  1
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  692:  {
       21:  693:    drawCard(currentPlayer, state);
       21:  693-block  0
call    0 returned 100%
        -:  694:  }
        -:  695:  
        -:  696:  //+1 Buy
        7:  697:  state->numBuys++;
        -:  698:  
        -:  699:  //Each other player draws a card
       28:  700:  for (i = 0; i <= state->numPlayers; i++)
        7:  700-block  0
       21:  700-block  1
       28:  700-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  701:  {
       21:  702:    if ( i != currentPlayer )
       21:  702-block  0
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  703:      {
       14:  704:        drawCard(i, state);
       14:  704-block  0
call    0 returned 100%
        -:  705:      }
        -:  706:  }
        -:  707:  
        -:  708:  //put played card in played card pile
        7:  709:  discardCard(handPos, currentPlayer, state, 0);
        7:  709-block  0
call    0 returned 100%
        -:  710:
        7:  711:  return 0;
        -:  712:}
        -:  713:
function feastFunc called 7 returned 100% blocks executed 94%
        7:  714:int feastFunc(int currentPlayer, int choice1, struct gameState *state) {
        7:  714-block  0
        -:  715:  int i;
        -:  716:  int x;
        -:  717:  int temphand[MAX_HAND];
        -:  718:
       65:  719:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
        7:  719-block  0
       58:  719-block  1
       65:  719-block  2
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       58:  720:    temphand[i] = state->hand[currentPlayer][i];//Backup card
       58:  721:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  722:  }
        -:  723:  //Backup hand
        -:  724:
        -:  725:  //Update Coins for Buy
        7:  726:  updateCoins(currentPlayer, state, 10);
        7:  726-block  0
call    0 returned 100%
        7:  727:  x = 1;//Condition to loop on
       14:  728:  while( x == 1) {//Buy one card
       14:  728-block  0
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        7:  729:    if (supplyCount(choice1, state) <= 0){
        7:  729-block  0
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  730:      if (DEBUG)
        -:  731:        printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:      }
        -:  736:    }
        7:  737:    else if (state->coins < getCost(choice1)){
        7:  737-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  738:      printf("That card is too expensive!\n");
    $$$$$:  738-block  0
call    0 never executed
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:      }
        -:  743:    }
        -:  744:    else{
        -:  745:
        -:  746:      if (DEBUG){
        -:  747:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:      }
        -:  749:
        7:  750:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
        7:  750-block  0
call    0 returned 100%
        7:  751:      x = 0;//No more buying cards
        -:  752:
        -:  753:      if (DEBUG){
        -:  754:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:      }
        -:  756:
        -:  757:    }
        -:  758:  }     
        -:  759:
        -:  760:  //Reset Hand
       58:  761:  for (i = 0; i < state->handCount[currentPlayer]; i++){
        7:  761-block  0
       51:  761-block  1
       58:  761-block  2
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
       51:  762:    state->hand[currentPlayer][i] = temphand[i];
       51:  763:    temphand[i] = -1;
        -:  764:  }
        -:  765:  //Reset Hand
        -:  766:
        7:  767:  return 0;
        7:  767-block  0
        -:  768:}
        -:  769:
function remodelFunc called 0 returned 0% blocks executed 0%
    #####:  770:int remodelFunc(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state) {
    $$$$$:  770-block  0
        -:  771:  int i;
        -:  772:  int j;
    #####:  773:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:  
    #####:  775:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  775-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:  {
    #####:  777:    return -1;
    $$$$$:  777-block  0
        -:  778:  }
        -:  779:
    #####:  780:  gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  780-block  0
call    0 never executed
        -:  781:
        -:  782:  //discard card from hand
    #####:  783:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  784:
        -:  785:  //discard trashed card
    #####:  786:  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  786-block  0
    $$$$$:  786-block  1
branch  0 never executed
branch  1 never executed
        -:  787:  {
    #####:  788:    if (state->hand[currentPlayer][i] == j)
    $$$$$:  788-block  0
branch  0 never executed
branch  1 never executed
        -:  789:    {
    #####:  790:      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  790-block  0
call    0 never executed
    #####:  791:      break;
        -:  792:    }
        -:  793:  }
    #####:  794:  return 0;
    $$$$$:  794-block  0
        -:  795:}
        -:  796:
function cardEffect called 13 returned 100% blocks executed 6%
       13:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
       13:  797-block  0
        -:  798:{
        -:  799:  int i;
        -:  800:  int j;
        -:  801:  int k;
        -:  802:  //int x;
        -:  803:  int index;
       13:  804:  int currentPlayer = whoseTurn(state);
       13:  804-block  0
call    0 returned 100%
       13:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
       13:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  //int temphand[MAX_HAND];// moved above the if statement
        -:  809:  //int drawntreasure=0;
        -:  810:  //int cardDrawn;
        -:  811:  //int z = 0;// this is the counter for the temp hand
       13:  812:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  813:    nextPlayer = 0;
    $$$$$:  813-block  0
        -:  814:  }
        -:  815:  
        -:  816:  //uses switch to select card and perform actions
       13:  817:  switch( card ) 
       13:  817-block  0
branch  0 taken 31%
branch  1 taken 23%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 46%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  818:  {
        -:  819:    case adventurer:
        4:  820:      adventurerFunc(currentPlayer, state);
        4:  820-block  0
call    0 returned 100%
        -:  821:			
        -:  822:    case council_room:
        7:  823:      councilRoomFunc(currentPlayer, handPos, state);
        7:  823-block  0
call    0 returned 100%
        -:  824:			
        -:  825:    case feast:
        7:  826:      feastFunc(currentPlayer, choice1, state);      			
        7:  826-block  0
call    0 returned 100%
        -:  827:			
        -:  828:    case gardens:
        7:  829:      return -1;
        7:  829-block  0
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:      {
    #####:  836:        return -1;
    $$$$$:  836-block  0
        -:  837:      }
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:      {
    #####:  841:        return -1;
    $$$$$:  841-block  0
        -:  842:      }
        -:  843:
    #####:  844:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:      {
    #####:  846:        return -1;
    $$$$$:  846-block  0
        -:  847:      }
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  849-block  0
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  855-block  0
    $$$$$:  855-block  1
branch  0 never executed
branch  1 never executed
        -:  856:      {
    #####:  857:        if (state->hand[currentPlayer][i] == j)
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:          {
    #####:  859:            discardCard(i, currentPlayer, state, 0);			
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:            break;
        -:  861:          }
        -:  862:      }
        -:  863:			
    #####:  864:      return 0;
    $$$$$:  864-block  0
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      remodelFunc(currentPlayer, choice1, choice2, handPos, state);
    $$$$$:  867-block  0
call    0 never executed
        -:  868:		
        -:  869:    case smithy:
        6:  870:      smithyFunc(currentPlayer, handPos, state); 
        6:  870-block  0
call    0 returned 100%
        -:  871:		
        -:  872:    case village:
        -:  873:      //+1 Card
        6:  874:      drawCard(currentPlayer, state);
        6:  874-block  0
call    0 returned 100%
        -:  875:			
        -:  876:      //+2 Actions
        6:  877:      state->numActions = state->numActions + 2;
        -:  878:			
        -:  879:      //discard played card from hand
        6:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        6:  881:      return 0;
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  885-block  0
branch  0 never executed
branch  1 never executed
    #####:  886:        int p = 0;//Iterator for hand!
    #####:  887:        int card_not_discarded = 1;//Flag for discard set!
    #####:  888:        while(card_not_discarded){
    $$$$$:  888-block  0
    $$$$$:  888-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  888-block  2
    #####:  889:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  889-block  0
branch  0 never executed
branch  1 never executed
    #####:  890:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:            state->discardCount[currentPlayer]++;
    #####:  893:            for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  893-block  0
    $$$$$:  893-block  1
    $$$$$:  893-block  2
branch  0 never executed
branch  1 never executed
    #####:  894:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:            }
    #####:  896:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:            state->handCount[currentPlayer]--;
    #####:  898:            card_not_discarded = 0;//Exit the loop
    $$$$$:  898-block  0
        -:  899:          }
    #####:  900:          else if (p > state->handCount[currentPlayer]){
    $$$$$:  900-block  0
branch  0 never executed
branch  1 never executed
        -:  901:            if(DEBUG) {
        -:  902:              printf("No estate cards in your hand, invalid choice\n");
        -:  903:              printf("Must gain an estate if there are any\n");
        -:  904:            }
    #####:  905:            if (supplyCount(estate, state) > 0){
    $$$$$:  905-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:              gainCard(estate, state, 0, currentPlayer);
    $$$$$:  906-block  0
call    0 never executed
    #####:  907:              state->supplyCount[estate]--;//Decrement estates
    #####:  908:              if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:          isGameOver(state);
    $$$$$:  909-block  0
call    0 never executed
        -:  910:              }
        -:  911:            }
    #####:  912:            card_not_discarded = 0;//Exit the loop
    $$$$$:  912-block  0
        -:  913:          }
        -:  914:                
        -:  915:          else{
    #####:  916:            p++;//Next card
    $$$$$:  916-block  0
        -:  917:          }
        -:  918:        }
        -:  919:      }
        -:  920:
        -:  921:      else{
    #####:  922:        if (supplyCount(estate, state) > 0){
    $$$$$:  922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:          state->supplyCount[estate]--;//Decrement Estates
    #####:  925:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:            isGameOver(state);
    $$$$$:  926-block  0
call    0 never executed
        -:  927:          }
        -:  928:        }
        -:  929:      }
        -:  930:        
        -:  931:        
    #####:  932:      return 0;
    $$$$$:  932-block  0
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  950-block  0
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:      {
    #####:  954:        state->coins = state->coins + 2;
    $$$$$:  954-block  0
        -:  955:      }
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  957-block  0
branch  0 never executed
branch  1 never executed
        -:  958:      {
        -:  959:        //discard hand
    #####:  960:        while(numHandCards(state) > 0)
    $$$$$:  960-block  0
    $$$$$:  960-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:          {
    #####:  962:            discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  962-block  0
call    0 never executed
        -:  963:          }
        -:  964:            
        -:  965:        //draw 4
    #####:  966:        for (i = 0; i < 4; i++)
    $$$$$:  966-block  0
    $$$$$:  966-block  1
branch  0 never executed
branch  1 never executed
        -:  967:          {
    #####:  968:            drawCard(currentPlayer, state);
    $$$$$:  968-block  0
call    0 never executed
        -:  969:          }
        -:  970:            
        -:  971:        //other players discard hand and redraw if hand size > 4
    #####:  972:        for (i = 0; i < state->numPlayers; i++)
    $$$$$:  972-block  0
    $$$$$:  972-block  1
    $$$$$:  972-block  2
branch  0 never executed
branch  1 never executed
        -:  973:          {
    #####:  974:            if (i != currentPlayer)
    $$$$$:  974-block  0
branch  0 never executed
branch  1 never executed
        -:  975:        {
    #####:  976:          if ( state->handCount[i] > 4 )
    $$$$$:  976-block  0
branch  0 never executed
branch  1 never executed
        -:  977:            {
        -:  978:              //discard hand
    #####:  979:              while( state->handCount[i] > 0 )
    $$$$$:  979-block  0
    $$$$$:  979-block  1
branch  0 never executed
branch  1 never executed
        -:  980:          {
    #####:  981:            discardCard(handPos, i, state, 0);
    $$$$$:  981-block  0
call    0 never executed
        -:  982:          }
        -:  983:                  
        -:  984:              //draw 4
    #####:  985:              for (j = 0; j < 4; j++)
    $$$$$:  985-block  0
    $$$$$:  985-block  1
branch  0 never executed
branch  1 never executed
        -:  986:          {
    #####:  987:            drawCard(i, state);
    $$$$$:  987-block  0
call    0 never executed
        -:  988:          }
        -:  989:            }
        -:  990:        }
        -:  991:          }
        -:  992:            
        -:  993:      }
    #####:  994:      return 0;
    $$$$$:  994-block  0
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
    $$$$$:  997-block  0
branch  0 never executed
branch  1 never executed
        -:  998:      {
        -:  999:        //+2 cards
    #####: 1000:        drawCard(currentPlayer, state);
    $$$$$: 1000-block  0
call    0 never executed
    #####: 1001:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:      }
    #####: 1003:          else if (choice1 == 2)
    $$$$$: 1003-block  0
branch  0 never executed
branch  1 never executed
        -: 1004:      {
        -: 1005:        //+2 coins
    #####: 1006:        state->coins = state->coins + 2;
    $$$$$: 1006-block  0
        -: 1007:      }
        -: 1008:          else
        -: 1009:      {
        -: 1010:        //trash 2 cards in hand
    #####: 1011:        discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1011-block  0
call    0 never executed
    #####: 1012:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:      }
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1016-block  0
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1020-block  0
branch  0 never executed
branch  1 never executed
    #####: 1021:        if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1021-block  0
branch  0 never executed
branch  1 never executed
    #####: 1022:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:          state->deckCount[nextPlayer]--;
    $$$$$: 1023-block  0
        -: 1024:        }
    #####: 1025:        else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    #####: 1026:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:          state->discardCount[nextPlayer]--;
    $$$$$: 1027-block  0
        -: 1028:        }
        -: 1029:        else{
        -: 1030:          //No Card to Reveal
        -: 1031:          if (DEBUG){
        -: 1032:            printf("No cards to reveal\n");
        -: 1033:          }
        -: 1034:        }
        -: 1035:            }
        -: 1036:            
        -: 1037:            else{
    #####: 1038:        if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
    #####: 1039:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1039-block  0
    $$$$$: 1039-block  1
    $$$$$: 1039-block  2
branch  0 never executed
branch  1 never executed
    #####: 1040:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:            state->deckCount[nextPlayer]++;
    #####: 1042:            state->discard[nextPlayer][i] = -1;
    #####: 1043:            state->discardCount[nextPlayer]--;
        -: 1044:          }
        -: 1045:                
    #####: 1046:          shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1046-block  0
call    0 never executed
        -: 1047:        } 
    #####: 1048:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:        state->deckCount[nextPlayer]--;
    #####: 1051:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:        state->deckCount[nextPlayer]--;
    $$$$$: 1053-block  0
        -: 1054:            }    
        -: 1055:                
    #####: 1056:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:        state->playedCardCount++;
    #####: 1059:        tributeRevealedCards[1] = -1;
    $$$$$: 1059-block  0
        -: 1060:            }
        -: 1061:
    #####: 1062:            for (i = 0; i <= 2; i ++){
    $$$$$: 1062-block  0
    $$$$$: 1062-block  1
    $$$$$: 1062-block  2
branch  0 never executed
branch  1 never executed
    #####: 1063:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1063-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1063-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1063-block  2
branch  4 never executed
branch  5 never executed
    #####: 1064:          state->coins += 2;
    $$$$$: 1064-block  0
        -: 1065:        }
        -: 1066:              
    #####: 1067:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1067-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1067-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1067-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1067-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1067-block  4
branch  8 never executed
branch  9 never executed
    #####: 1068:          drawCard(currentPlayer, state);
    $$$$$: 1068-block  0
call    0 never executed
    #####: 1069:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:        }
        -: 1071:        else{//Action Card
    #####: 1072:          state->numActions = state->numActions + 2;
    $$$$$: 1072-block  0
        -: 1073:        }
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
    $$$$$: 1076-block  0
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1081-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1081-block  1
branch  2 never executed
branch  3 never executed
        -: 1082:      {
    #####: 1083:        return -1;				
    $$$$$: 1083-block  0
        -: 1084:      }
        -: 1085:
    #####: 1086:          if (choice1 == handPos)
    $$$$$: 1086-block  0
branch  0 never executed
branch  1 never executed
        -: 1087:      {
    #####: 1088:        return -1;
    $$$$$: 1088-block  0
        -: 1089:      }
        -: 1090:
    #####: 1091:          for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1091-block  0
    $$$$$: 1091-block  1
    $$$$$: 1091-block  2
branch  0 never executed
branch  1 never executed
        -: 1092:      {
    #####: 1093:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1093-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1093-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1093-block  2
branch  4 never executed
branch  5 never executed
        -: 1094:          {
    #####: 1095:            j++;
    $$$$$: 1095-block  0
        -: 1096:          }
        -: 1097:      }
    #####: 1098:          if (j < choice2)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
        -: 1099:      {
    #####: 1100:        return -1;				
    $$$$$: 1100-block  0
        -: 1101:      }
        -: 1102:
        -: 1103:          if (DEBUG) 
        -: 1104:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:          //increase supply count for choosen card by amount being discarded
    #####: 1107:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:          
        -: 1109:          //each other player gains a copy of revealed card
    #####: 1110:          for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1110-block  0
    $$$$$: 1110-block  1
    $$$$$: 1110-block  2
branch  0 never executed
branch  1 never executed
        -: 1111:      {
    #####: 1112:        if (i != currentPlayer)
    $$$$$: 1112-block  0
branch  0 never executed
branch  1 never executed
        -: 1113:          {
    #####: 1114:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1114-block  0
call    0 never executed
        -: 1115:          }
        -: 1116:      }
        -: 1117:
        -: 1118:          //discard played card from hand
    #####: 1119:          discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1119-block  0
call    0 never executed
        -: 1120:
        -: 1121:          //trash copies of cards returned to supply
    #####: 1122:          for (j = 0; j < choice2; j++)
    $$$$$: 1122-block  0
    $$$$$: 1122-block  1
branch  0 never executed
branch  1 never executed
        -: 1123:      {
    #####: 1124:        for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1124-block  0
    $$$$$: 1124-block  1
    $$$$$: 1124-block  2
branch  0 never executed
branch  1 never executed
        -: 1125:          {
    #####: 1126:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1126-block  0
branch  0 never executed
branch  1 never executed
        -: 1127:        {
    #####: 1128:          discardCard(i, currentPlayer, state, 1);
    $$$$$: 1128-block  0
call    0 never executed
    #####: 1129:          break;
        -: 1130:        }
        -: 1131:          }
        -: 1132:      }			
        -: 1133:
    #####: 1134:      return 0;
    $$$$$: 1134-block  0
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1139-block  0
    $$$$$: 1139-block  1
branch  0 never executed
branch  1 never executed
        -: 1140:      {
    #####: 1141:        if (i != currentPlayer)
    $$$$$: 1141-block  0
branch  0 never executed
branch  1 never executed
        -: 1142:          {
    #####: 1143:            for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1143-block  0
    $$$$$: 1143-block  1
    $$$$$: 1143-block  2
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:          if (state->hand[i][j] == copper)
    $$$$$: 1145-block  0
branch  0 never executed
branch  1 never executed
        -: 1146:            {
    #####: 1147:              discardCard(j, i, state, 0);
    $$$$$: 1147-block  0
call    0 never executed
    #####: 1148:              break;
        -: 1149:            }
    #####: 1150:          if (j == state->handCount[i])
    $$$$$: 1150-block  0
branch  0 never executed
branch  1 never executed
        -: 1151:            {
    #####: 1152:              for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1152-block  0
    $$$$$: 1152-block  1
    $$$$$: 1152-block  2
branch  0 never executed
branch  1 never executed
        -: 1153:          {
        -: 1154:            if (DEBUG)
        -: 1155:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:          }	
    #####: 1157:              break;
    $$$$$: 1157-block  0
        -: 1158:            }		
        -: 1159:        }
        -: 1160:              
        -: 1161:          }
        -: 1162:            
        -: 1163:      }				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1166-block  0
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:      {
    #####: 1178:        return -1;
    $$$$$: 1178-block  0
        -: 1179:      }
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1185-block  0
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1193-block  0
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
    $$$$$: 1200-block  0
branch  0 never executed
branch  1 never executed
        -: 1201:      {
        -: 1202:        //gain coins equal to trashed card
    #####: 1203:        state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1203-block  0
call    0 never executed
call    1 never executed
        -: 1204:        //trash card
    #####: 1205:        discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:      }
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1209-block  0
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1213-block  0
    $$$$$: 1213-block  1
    $$$$$: 1213-block  2
branch  0 never executed
branch  1 never executed
    #####: 1214:        if (i != currentPlayer){
    $$$$$: 1214-block  0
branch  0 never executed
branch  1 never executed
    #####: 1215:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:          state->discardCount[i]++;
    #####: 1217:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1217-block  0
        -: 1218:        }
        -: 1219:      }
    #####: 1220:      return 0;
    $$$$$: 1220-block  0
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1225-block  0
    $$$$$: 1225-block  1
    $$$$$: 1225-block  2
branch  0 never executed
branch  1 never executed
        -: 1226:      {
    #####: 1227:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1227-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1227-block  1
branch  2 never executed
branch  3 never executed
        -: 1228:          {
    #####: 1229:            index = i;
    #####: 1230:            break;
    $$$$$: 1230-block  0
        -: 1231:          }
        -: 1232:      }
    #####: 1233:      if (index > -1)
    $$$$$: 1233-block  0
branch  0 never executed
branch  1 never executed
        -: 1234:      {
        -: 1235:        //trash both treasure cards
    #####: 1236:        discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1236-block  0
call    0 never executed
    #####: 1237:        discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:        //gain 4 Gold cards
    #####: 1240:        for (i = 0; i < 4; i++)
    $$$$$: 1240-block  0
branch  0 never executed
branch  1 never executed
        -: 1241:          {
    #####: 1242:            gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1242-block  0
call    0 never executed
        -: 1243:          }
        -: 1244:            
        -: 1245:        //return success
    #####: 1246:        return 1;
    $$$$$: 1246-block  0
        -: 1247:      }
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
    $$$$$: 1250-block  0
        -: 1251:}
        -: 1252:	
       13: 1253:  return -1;
    $$$$$: 1253-block  0
       13: 1253-block  1
        -: 1254:}
        -: 1255:
function discardCard called 19 returned 100% blocks executed 78%
       19: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
       19: 1256-block  0
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       19: 1260:  if (trashFlag < 1)
       19: 1260-block  0
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
        -: 1261:    {
        -: 1262:      //add card to played pile
       13: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       13: 1264:      state->playedCardCount++;
       13: 1264-block  0
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       19: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       19: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
       19: 1271-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
    $$$$$: 1274-block  0
        -: 1275:    }
       19: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
       19: 1276-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
    $$$$$: 1279-block  0
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       19: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       19: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       19: 1288:      state->handCount[currentPlayer]--;
       19: 1288-block  0
        -: 1289:    }
        -: 1290:	
       19: 1291:  return 0;
       19: 1291-block  0
        -: 1292:}
        -: 1293:
function gainCard called 11 returned 100% blocks executed 80%
       11: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
       11: 1294-block  0
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
       11: 1299:  if ( supplyCount(supplyPos, state) < 1 )
       11: 1299-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1300:    {
    #####: 1301:      return -1;
    $$$$$: 1301-block  0
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
       11: 1309:  if (toFlag == 1)
       11: 1309-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
    $$$$$: 1312-block  0
        -: 1313:    }
       11: 1314:  else if (toFlag == 2)
       11: 1314-block  0
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -: 1315:    {
        1: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1317:      state->handCount[player]++;
        1: 1317-block  0
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
       10: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       10: 1322:      state->discardCount[player]++;
       10: 1322-block  0
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
       11: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
       11: 1328:  return 0;
       11: 1328-block  0
        -: 1329:}
        -: 1330:
function updateCoins called 17 returned 100% blocks executed 100%
       17: 1331:int updateCoins(int player, struct gameState *state, int bonus)
       17: 1331-block  0
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
       17: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
      109: 1339:  for (i = 0; i < state->handCount[player]; i++)
       17: 1339-block  0
       92: 1339-block  1
      109: 1339-block  2
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1340:    {
       92: 1341:      if (state->hand[player][i] == copper)
       92: 1341-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1342:	{
       30: 1343:	  state->coins += 1;
       30: 1343-block  0
        -: 1344:	}
       62: 1345:      else if (state->hand[player][i] == silver)
       62: 1345-block  0
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1346:	{
        2: 1347:	  state->coins += 2;
        2: 1347-block  0
        -: 1348:	}
       60: 1349:      else if (state->hand[player][i] == gold)
       60: 1349-block  0
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1350:	{
        2: 1351:	  state->coins += 3;
        2: 1351-block  0
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
       17: 1356:  state->coins += bonus;
        -: 1357:
       17: 1358:  return 0;
       17: 1358-block  0
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
----------------- Testing Card: feast ----------------
TEST 1: Trash this card
Before playing feast:
Player 0 feast count 1, expected 1
After playing feast:
Player 0 feast count 1, expected 0

TEST 2: Gain card cost <= 5, try duchy card (cost 5)
Player 0 duchy count 1, expected 1

TEST 3: Gain card cost > 5, try adventurer card (cost 6)
Player 0 adventurer count 1, expected 0

TEST 4: Feast cost test
Buy Feast with 4 coins: 0 expected: 0
Buy Feast with 1 coins: -1 expected: -1

TEST 5: No state change occur for other players
Initial player 1 state:
Player 1 hand count: 0 expected: 0
Player 1 deck count: 10 expected: 10
Player 1 discard count: 0 expected: 0
Player 0 plays feast.
Player 1 hand count: 0 expected: 0
Player 1 deck count: 10 expected: 10
Player 1 discard count: 0 expected: 0

TEST 6: No state change should occur to the victory card piles and kingdom card piles
Before play feast card
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 99 expected: 99
Player 0 plays feast.
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 99 expected: 99

 >>>>> Failsure: Testing complete feast <<<<<

File 'dominion.c'
Lines executed:40.57% of 557
Branches executed:44.84% of 417
Taken at least once:30.46% of 417
Calls executed:32.63% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 255 returned 100% blocks executed 83%
      255:    8:int compare(const void* a, const void* b) {
      255:    8-block  0
      255:    9:  if (*(int*)a > *(int*)b)
      255:    9-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    $$$$$:   10-block  0
      255:   11:  if (*(int*)a < *(int*)b)
      255:   11-block  0
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       70:   12:    return -1;
       70:   12-block  0
      185:   13:  return 0;
      185:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 83%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        8:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   44-block  0
call    0 returned 100%
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
        8:   57-block  0
       80:   57-block  1
       88:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
       80:   59-block  0
      800:   59-block  1
      880:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      800:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
      720:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
        8:   73-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        8:   75-block  0
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    $$$$$:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
        8:   87-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        8:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
    $$$$$:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        8:  106-block  0
      160:  106-block  1
      168:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
      160:  108-block  0
     1160:  108-block  1
     1320:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
     1240:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       80:  113-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       80:  113-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       80:  122:		  state->supplyCount[i] = 10;
       80:  122-block  0
        -:  123:		}
       80:  124:	      break;
       80:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
        8:  138-block  0
       16:  138-block  1
       24:  138-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
       16:  141-block  0
       48:  141-block  1
       64:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
       16:  146-block  0
      112:  146-block  1
      128:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
        8:  154-block  0
       16:  154-block  1
       24:  154-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
       16:  156-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
        8:  163-block  0
       16:  163-block  1
       24:  163-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
        8:  176-block  0
      216:  176-block  1
      224:  176-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
        8:  192-block  0
       48:  192-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  193:    drawCard(state->whoseTurn, state);
       40:  193-block  0
call    0 returned 100%
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
        8:  196-block  0
call    0 returned 100%
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 59 returned 100% blocks executed 100%
       59:  201:int shuffle(int player, struct gameState *state) {
       59:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       59:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       59:  209:  if (state->deckCount[player] < 1)
       59:  209-block  0
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
       36:  210:    return -1;
       36:  210-block  0
       23:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
       23:  211-block  0
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      202:  214:  while (state->deckCount[player] > 0) {
      202:  214-block  0
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
      179:  215:    card = floor(Random() * state->deckCount[player]);
      179:  215-block  0
call    0 returned 100%
      179:  216:    newDeck[newDeckPos] = state->deck[player][card];
      179:  217:    newDeckPos++;
      595:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      416:  218-block  0
      595:  218-block  1
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      416:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      179:  221:    state->deckCount[player]--;
      179:  221-block  0
        -:  222:  }
      202:  223:  for (i = 0; i < newDeckPos; i++) {
       23:  223-block  0
      179:  223-block  1
      202:  223-block  2
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
      179:  224:    state->deck[player][i] = newDeck[i];
      179:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       59:  228:  return 0;
       23:  228-block  0
       59:  228-block  1
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
        -:  270:}
        -:  271:
function buyCard called 16 returned 100% blocks executed 93%
       32:  272:int buyCard(int supplyPos, struct gameState *state) {
       16:  272-block  0
       16:  272-block  1
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       16:  280:  who = state->whoseTurn;
        -:  281:
       16:  282:  if (state->numBuys < 1){
       16:  282-block  0
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        4:  285:    return -1;
        4:  285-block  0
       12:  286:  } else if (supplyCount(supplyPos, state) <1){
       12:  286-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
       12:  290:  } else if (state->coins < getCost(supplyPos)){
       12:  290-block  0
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        8:  293:    return -1;
        8:  293-block  0
        -:  294:  } else {
        4:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        4:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        4:  297-block  0
call    0 returned 100%
        -:  298:  
        4:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        4:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        4:  308:  return 0;
        4:  308-block  0
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 196 returned 100% blocks executed 100%
      196:  320:int supplyCount(int card, struct gameState *state) {
      196:  320-block  0
      196:  321:  return state->supplyCount[card];
      196:  321-block  0
        -:  322:}
        -:  323:
function fullDeckCount called 18 returned 100% blocks executed 100%
       18:  324:int fullDeckCount(int player, int card, struct gameState *state) {
       18:  324-block  0
        -:  325:  int i;
       18:  326:  int count = 0;
        -:  327:
       88:  328:  for (i = 0; i < state->deckCount[player]; i++)
       18:  328-block  0
       70:  328-block  1
       88:  328-block  2
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  329:    {
       70:  330:      if (state->deck[player][i] == card) count++;
       70:  330-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        4:  330-block  1
        -:  331:    }
        -:  332:
      116:  333:  for (i = 0; i < state->handCount[player]; i++)
       18:  333-block  0
       98:  333-block  1
      116:  333-block  2
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  334:    {
       98:  335:      if (state->hand[player][i] == card) count++;
       98:  335-block  0
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
       12:  335-block  1
        -:  336:    }
        -:  337:
       26:  338:  for (i = 0; i < state->discardCount[player]; i++)
       18:  338-block  0
        8:  338-block  1
       26:  338-block  2
branch  0 taken 31%
branch  1 taken 69% (fallthrough)
        -:  339:    {
        8:  340:      if (state->discard[player][i] == card) count++;
        8:  340-block  0
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        6:  340-block  1
        -:  341:    }
        -:  342:
       18:  343:  return count;
       18:  343-block  0
        -:  344:}
        -:  345:
function whoseTurn called 18 returned 100% blocks executed 100%
       18:  346:int whoseTurn(struct gameState *state) {
       18:  346-block  0
       18:  347:  return state->whoseTurn;
       18:  347-block  0
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
    $$$$$:  356-block  1
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
    $$$$$:  380-block  1
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        6:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        6:  395-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        2:  397-block  0
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        4:  402-block  0
      100:  402-block  1
      104:  402-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
      100:  404-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        6:  406-block  0
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        4:  409-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  410:    {
        2:  411:      return 1;
        2:  411-block  0
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        2:  414-block  0
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
    $$$$$:  422-block  1
    $$$$$:  422-block  2
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
    $$$$$:  433-block  1
    $$$$$:  433-block  2
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
    $$$$$:  444-block  1
    $$$$$:  444-block  2
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
    $$$$$:  464-block  1
    $$$$$:  464-block  2
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
    $$$$$:  479-block  1
    $$$$$:  479-block  2
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
    $$$$$:  500-block  1
    $$$$$:  500-block  2
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
    $$$$$:  510-block  1
    $$$$$:  510-block  2
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
        -:  523:}
        -:  524:
function drawCard called 134 returned 100% blocks executed 100%
      134:  525:int drawCard(int player, struct gameState *state)
      134:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
      134:  528:  if (state->deckCount[player] <= 0){//Deck is empty
      134:  528-block  0
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       37:  533:    for (i = 0; i < state->discardCount[player];i++){
       33:  533-block  0
        4:  533-block  1
       37:  533-block  2
branch  0 taken 11%
branch  1 taken 89% (fallthrough)
        4:  534:      state->deck[player][i] = state->discard[player][i];
        4:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       33:  538:    state->deckCount[player] = state->discardCount[player];
       33:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       33:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
       33:  542-block  0
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       33:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       33:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       33:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       33:  559:    if (deckCounter == 0)
       33:  559-block  0
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
       29:  560:      return -1;
       29:  560-block  0
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        4:  564-block  0
        -:  565:  }
        -:  566:
        -:  567:  else{
      101:  568:    int count = state->handCount[player];//Get current hand count for player
      101:  568-block  0
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      101:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      101:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      101:  576:    state->deckCount[player]--;
      101:  577:    state->handCount[player]++;//Increment hand count
      101:  577-block  0
        -:  578:  }
        -:  579:
      105:  580:  return 0;
      105:  580-block  0
        -:  581:}
        -:  582:
function getCost called 26 returned 100% blocks executed 23%
       26:  583:int getCost(int cardNumber)
       26:  583-block  0
        -:  584:{
       26:  585:  switch( cardNumber ) 
       26:  585-block  0
branch  0 taken 31%
branch  1 taken 0%
branch  2 taken 4%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 19%
branch  8 taken 0%
branch  9 taken 15%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 31%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        8:  588:      return 0;
        8:  588-block  0
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
        -:  591:    case duchy:
        1:  592:      return 5;
        1:  592-block  0
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
        -:  601:    case adventurer:
        5:  602:      return 6;
        5:  602-block  0
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
        -:  605:    case feast:
        4:  606:      return 4;
        4:  606-block  0
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
        -:  613:    case smithy:
        8:  614:      return 4;
        8:  614-block  0
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
        -:  644:}
        -:  645:
        -:  646:/* Function implementation of 5 player cards */
function adventurerFunc called 4 returned 100% blocks executed 93%
        4:  647:int adventurerFunc(int currentPlayer, struct gameState *state) {
        4:  647-block  0
        4:  648:  int drawntreasure = 0;
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];
        4:  651:  int z=0;
        -:  652:
       23:  653:  while(drawntreasure <= 2) {
        4:  653-block  0
       23:  653-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       19:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       19:  654-block  0
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        3:  655:      shuffle(currentPlayer, state);
        3:  655-block  0
call    0 returned 100%
        -:  656:    }
       19:  657:    drawCard(currentPlayer, state);
       19:  657-block  0
call    0 returned 100%
       19:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       19:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        7:  659-block  0
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        7:  659-block  1
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       12:  660:      drawntreasure++;
       12:  660-block  0
        -:  661:    else{
        7:  662:      temphand[z]=cardDrawn;
        7:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        7:  663-block  0
        -:  664:      // z++;
        -:  665:    }
        -:  666:  }
        4:  667:  while(z-1 >= 0){
        4:  667-block  0
        4:  667-block  1
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:    z=z-1;
    $$$$$:  669-block  0
        -:  670:  }
        4:  671:  return 0;
        4:  671-block  0
        -:  672:}
        -:  673:
function smithyFunc called 8 returned 100% blocks executed 100%
        8:  674:int smithyFunc(int currentPlayer, int handPos, struct gameState *state) {
        8:  674-block  0
        -:  675:  int i;
        -:  676:  //+3 Cards
       40:  677:  for (i = 0; i < 4; i++)
        8:  677-block  0
       40:  677-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  678:  {
       32:  679:    drawCard(currentPlayer, state);
       32:  679-block  0
call    0 returned 100%
        -:  680:  }
        -:  681:  
        -:  682:  //discard card from hand
        8:  683:  discardCard(handPos, currentPlayer, state, 1);
        8:  683-block  0
call    0 returned 100%
        -:  684:
        8:  685:  return 0;
        -:  686:}
        -:  687:
function councilRoomFunc called 7 returned 100% blocks executed 100%
        7:  688:int councilRoomFunc(int currentPlayer, int handPos, struct gameState *state) {
        7:  688-block  0
        -:  689:  int i;
        -:  690:  //+4 Cards
       28:  691:  for (i = 1; i < 4; i++)
        7:  691-block  0
       28:  691-block  1
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  692:  {
       21:  693:    drawCard(currentPlayer, state);
       21:  693-block  0
call    0 returned 100%
        -:  694:  }
        -:  695:  
        -:  696:  //+1 Buy
        7:  697:  state->numBuys++;
        -:  698:  
        -:  699:  //Each other player draws a card
       28:  700:  for (i = 0; i <= state->numPlayers; i++)
        7:  700-block  0
       21:  700-block  1
       28:  700-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  701:  {
       21:  702:    if ( i != currentPlayer )
       21:  702-block  0
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  703:      {
       14:  704:        drawCard(i, state);
       14:  704-block  0
call    0 returned 100%
        -:  705:      }
        -:  706:  }
        -:  707:  
        -:  708:  //put played card in played card pile
        7:  709:  discardCard(handPos, currentPlayer, state, 0);
        7:  709-block  0
call    0 returned 100%
        -:  710:
        7:  711:  return 0;
        -:  712:}
        -:  713:
function feastFunc called 10 returned 100% blocks executed 94%
       10:  714:int feastFunc(int currentPlayer, int choice1, struct gameState *state) {
       10:  714-block  0
        -:  715:  int i;
        -:  716:  int x;
        -:  717:  int temphand[MAX_HAND];
        -:  718:
       89:  719:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
       10:  719-block  0
       79:  719-block  1
       89:  719-block  2
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       79:  720:    temphand[i] = state->hand[currentPlayer][i];//Backup card
       79:  721:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  722:  }
        -:  723:  //Backup hand
        -:  724:
        -:  725:  //Update Coins for Buy
       10:  726:  updateCoins(currentPlayer, state, 10);
       10:  726-block  0
call    0 returned 100%
       10:  727:  x = 1;//Condition to loop on
       20:  728:  while( x == 1) {//Buy one card
       20:  728-block  0
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
       10:  729:    if (supplyCount(choice1, state) <= 0){
       10:  729-block  0
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  730:      if (DEBUG)
        -:  731:        printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:      }
        -:  736:    }
       10:  737:    else if (state->coins < getCost(choice1)){
       10:  737-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  738:      printf("That card is too expensive!\n");
    $$$$$:  738-block  0
call    0 never executed
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:      }
        -:  743:    }
        -:  744:    else{
        -:  745:
        -:  746:      if (DEBUG){
        -:  747:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:      }
        -:  749:
       10:  750:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
       10:  750-block  0
call    0 returned 100%
       10:  751:      x = 0;//No more buying cards
        -:  752:
        -:  753:      if (DEBUG){
        -:  754:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:      }
        -:  756:
        -:  757:    }
        -:  758:  }     
        -:  759:
        -:  760:  //Reset Hand
       79:  761:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       10:  761-block  0
       69:  761-block  1
       79:  761-block  2
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
       69:  762:    state->hand[currentPlayer][i] = temphand[i];
       69:  763:    temphand[i] = -1;
        -:  764:  }
        -:  765:  //Reset Hand
        -:  766:
       10:  767:  return 0;
       10:  767-block  0
        -:  768:}
        -:  769:
function remodelFunc called 0 returned 0% blocks executed 0%
    #####:  770:int remodelFunc(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state) {
    $$$$$:  770-block  0
        -:  771:  int i;
        -:  772:  int j;
    #####:  773:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:  
    #####:  775:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  775-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:  {
    #####:  777:    return -1;
    $$$$$:  777-block  0
        -:  778:  }
        -:  779:
    #####:  780:  gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  780-block  0
call    0 never executed
        -:  781:
        -:  782:  //discard card from hand
    #####:  783:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  784:
        -:  785:  //discard trashed card
    #####:  786:  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  786-block  0
    $$$$$:  786-block  1
branch  0 never executed
branch  1 never executed
        -:  787:  {
    #####:  788:    if (state->hand[currentPlayer][i] == j)
    $$$$$:  788-block  0
branch  0 never executed
branch  1 never executed
        -:  789:    {
    #####:  790:      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  790-block  0
call    0 never executed
    #####:  791:      break;
        -:  792:    }
        -:  793:  }
    #####:  794:  return 0;
    $$$$$:  794-block  0
        -:  795:}
        -:  796:
function cardEffect called 18 returned 100% blocks executed 6%
       18:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
       18:  797-block  0
        -:  798:{
        -:  799:  int i;
        -:  800:  int j;
        -:  801:  int k;
        -:  802:  //int x;
        -:  803:  int index;
       18:  804:  int currentPlayer = whoseTurn(state);
       18:  804-block  0
call    0 returned 100%
       18:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
       18:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  //int temphand[MAX_HAND];// moved above the if statement
        -:  809:  //int drawntreasure=0;
        -:  810:  //int cardDrawn;
        -:  811:  //int z = 0;// this is the counter for the temp hand
       18:  812:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  813:    nextPlayer = 0;
    $$$$$:  813-block  0
        -:  814:  }
        -:  815:  
        -:  816:  //uses switch to select card and perform actions
       18:  817:  switch( card ) 
       18:  817-block  0
branch  0 taken 22%
branch  1 taken 17%
branch  2 taken 17%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 44%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  818:  {
        -:  819:    case adventurer:
        4:  820:      adventurerFunc(currentPlayer, state);
        4:  820-block  0
call    0 returned 100%
        -:  821:			
        -:  822:    case council_room:
        7:  823:      councilRoomFunc(currentPlayer, handPos, state);
        7:  823-block  0
call    0 returned 100%
        -:  824:			
        -:  825:    case feast:
       10:  826:      feastFunc(currentPlayer, choice1, state);      			
       10:  826-block  0
call    0 returned 100%
        -:  827:			
        -:  828:    case gardens:
       10:  829:      return -1;
       10:  829-block  0
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:      {
    #####:  836:        return -1;
    $$$$$:  836-block  0
        -:  837:      }
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:      {
    #####:  841:        return -1;
    $$$$$:  841-block  0
        -:  842:      }
        -:  843:
    #####:  844:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:      {
    #####:  846:        return -1;
    $$$$$:  846-block  0
        -:  847:      }
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  849-block  0
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  855-block  0
    $$$$$:  855-block  1
branch  0 never executed
branch  1 never executed
        -:  856:      {
    #####:  857:        if (state->hand[currentPlayer][i] == j)
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:          {
    #####:  859:            discardCard(i, currentPlayer, state, 0);			
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:            break;
        -:  861:          }
        -:  862:      }
        -:  863:			
    #####:  864:      return 0;
    $$$$$:  864-block  0
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      remodelFunc(currentPlayer, choice1, choice2, handPos, state);
    $$$$$:  867-block  0
call    0 never executed
        -:  868:		
        -:  869:    case smithy:
        8:  870:      smithyFunc(currentPlayer, handPos, state); 
        8:  870-block  0
call    0 returned 100%
        -:  871:		
        -:  872:    case village:
        -:  873:      //+1 Card
        8:  874:      drawCard(currentPlayer, state);
        8:  874-block  0
call    0 returned 100%
        -:  875:			
        -:  876:      //+2 Actions
        8:  877:      state->numActions = state->numActions + 2;
        -:  878:			
        -:  879:      //discard played card from hand
        8:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        8:  881:      return 0;
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  885-block  0
branch  0 never executed
branch  1 never executed
    #####:  886:        int p = 0;//Iterator for hand!
    #####:  887:        int card_not_discarded = 1;//Flag for discard set!
    #####:  888:        while(card_not_discarded){
    $$$$$:  888-block  0
    $$$$$:  888-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  888-block  2
    #####:  889:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  889-block  0
branch  0 never executed
branch  1 never executed
    #####:  890:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:            state->discardCount[currentPlayer]++;
    #####:  893:            for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  893-block  0
    $$$$$:  893-block  1
    $$$$$:  893-block  2
branch  0 never executed
branch  1 never executed
    #####:  894:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:            }
    #####:  896:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:            state->handCount[currentPlayer]--;
    #####:  898:            card_not_discarded = 0;//Exit the loop
    $$$$$:  898-block  0
        -:  899:          }
    #####:  900:          else if (p > state->handCount[currentPlayer]){
    $$$$$:  900-block  0
branch  0 never executed
branch  1 never executed
        -:  901:            if(DEBUG) {
        -:  902:              printf("No estate cards in your hand, invalid choice\n");
        -:  903:              printf("Must gain an estate if there are any\n");
        -:  904:            }
    #####:  905:            if (supplyCount(estate, state) > 0){
    $$$$$:  905-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:              gainCard(estate, state, 0, currentPlayer);
    $$$$$:  906-block  0
call    0 never executed
    #####:  907:              state->supplyCount[estate]--;//Decrement estates
    #####:  908:              if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:          isGameOver(state);
    $$$$$:  909-block  0
call    0 never executed
        -:  910:              }
        -:  911:            }
    #####:  912:            card_not_discarded = 0;//Exit the loop
    $$$$$:  912-block  0
        -:  913:          }
        -:  914:                
        -:  915:          else{
    #####:  916:            p++;//Next card
    $$$$$:  916-block  0
        -:  917:          }
        -:  918:        }
        -:  919:      }
        -:  920:
        -:  921:      else{
    #####:  922:        if (supplyCount(estate, state) > 0){
    $$$$$:  922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:          state->supplyCount[estate]--;//Decrement Estates
    #####:  925:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:            isGameOver(state);
    $$$$$:  926-block  0
call    0 never executed
        -:  927:          }
        -:  928:        }
        -:  929:      }
        -:  930:        
        -:  931:        
    #####:  932:      return 0;
    $$$$$:  932-block  0
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  950-block  0
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:      {
    #####:  954:        state->coins = state->coins + 2;
    $$$$$:  954-block  0
        -:  955:      }
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  957-block  0
branch  0 never executed
branch  1 never executed
        -:  958:      {
        -:  959:        //discard hand
    #####:  960:        while(numHandCards(state) > 0)
    $$$$$:  960-block  0
    $$$$$:  960-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:          {
    #####:  962:            discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  962-block  0
call    0 never executed
        -:  963:          }
        -:  964:            
        -:  965:        //draw 4
    #####:  966:        for (i = 0; i < 4; i++)
    $$$$$:  966-block  0
    $$$$$:  966-block  1
branch  0 never executed
branch  1 never executed
        -:  967:          {
    #####:  968:            drawCard(currentPlayer, state);
    $$$$$:  968-block  0
call    0 never executed
        -:  969:          }
        -:  970:            
        -:  971:        //other players discard hand and redraw if hand size > 4
    #####:  972:        for (i = 0; i < state->numPlayers; i++)
    $$$$$:  972-block  0
    $$$$$:  972-block  1
    $$$$$:  972-block  2
branch  0 never executed
branch  1 never executed
        -:  973:          {
    #####:  974:            if (i != currentPlayer)
    $$$$$:  974-block  0
branch  0 never executed
branch  1 never executed
        -:  975:        {
    #####:  976:          if ( state->handCount[i] > 4 )
    $$$$$:  976-block  0
branch  0 never executed
branch  1 never executed
        -:  977:            {
        -:  978:              //discard hand
    #####:  979:              while( state->handCount[i] > 0 )
    $$$$$:  979-block  0
    $$$$$:  979-block  1
branch  0 never executed
branch  1 never executed
        -:  980:          {
    #####:  981:            discardCard(handPos, i, state, 0);
    $$$$$:  981-block  0
call    0 never executed
        -:  982:          }
        -:  983:                  
        -:  984:              //draw 4
    #####:  985:              for (j = 0; j < 4; j++)
    $$$$$:  985-block  0
    $$$$$:  985-block  1
branch  0 never executed
branch  1 never executed
        -:  986:          {
    #####:  987:            drawCard(i, state);
    $$$$$:  987-block  0
call    0 never executed
        -:  988:          }
        -:  989:            }
        -:  990:        }
        -:  991:          }
        -:  992:            
        -:  993:      }
    #####:  994:      return 0;
    $$$$$:  994-block  0
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
    $$$$$:  997-block  0
branch  0 never executed
branch  1 never executed
        -:  998:      {
        -:  999:        //+2 cards
    #####: 1000:        drawCard(currentPlayer, state);
    $$$$$: 1000-block  0
call    0 never executed
    #####: 1001:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:      }
    #####: 1003:          else if (choice1 == 2)
    $$$$$: 1003-block  0
branch  0 never executed
branch  1 never executed
        -: 1004:      {
        -: 1005:        //+2 coins
    #####: 1006:        state->coins = state->coins + 2;
    $$$$$: 1006-block  0
        -: 1007:      }
        -: 1008:          else
        -: 1009:      {
        -: 1010:        //trash 2 cards in hand
    #####: 1011:        discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1011-block  0
call    0 never executed
    #####: 1012:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:      }
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1016-block  0
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1020-block  0
branch  0 never executed
branch  1 never executed
    #####: 1021:        if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1021-block  0
branch  0 never executed
branch  1 never executed
    #####: 1022:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:          state->deckCount[nextPlayer]--;
    $$$$$: 1023-block  0
        -: 1024:        }
    #####: 1025:        else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    #####: 1026:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:          state->discardCount[nextPlayer]--;
    $$$$$: 1027-block  0
        -: 1028:        }
        -: 1029:        else{
        -: 1030:          //No Card to Reveal
        -: 1031:          if (DEBUG){
        -: 1032:            printf("No cards to reveal\n");
        -: 1033:          }
        -: 1034:        }
        -: 1035:            }
        -: 1036:            
        -: 1037:            else{
    #####: 1038:        if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
    #####: 1039:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1039-block  0
    $$$$$: 1039-block  1
    $$$$$: 1039-block  2
branch  0 never executed
branch  1 never executed
    #####: 1040:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:            state->deckCount[nextPlayer]++;
    #####: 1042:            state->discard[nextPlayer][i] = -1;
    #####: 1043:            state->discardCount[nextPlayer]--;
        -: 1044:          }
        -: 1045:                
    #####: 1046:          shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1046-block  0
call    0 never executed
        -: 1047:        } 
    #####: 1048:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:        state->deckCount[nextPlayer]--;
    #####: 1051:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:        state->deckCount[nextPlayer]--;
    $$$$$: 1053-block  0
        -: 1054:            }    
        -: 1055:                
    #####: 1056:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:        state->playedCardCount++;
    #####: 1059:        tributeRevealedCards[1] = -1;
    $$$$$: 1059-block  0
        -: 1060:            }
        -: 1061:
    #####: 1062:            for (i = 0; i <= 2; i ++){
    $$$$$: 1062-block  0
    $$$$$: 1062-block  1
    $$$$$: 1062-block  2
branch  0 never executed
branch  1 never executed
    #####: 1063:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1063-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1063-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1063-block  2
branch  4 never executed
branch  5 never executed
    #####: 1064:          state->coins += 2;
    $$$$$: 1064-block  0
        -: 1065:        }
        -: 1066:              
    #####: 1067:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1067-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1067-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1067-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1067-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1067-block  4
branch  8 never executed
branch  9 never executed
    #####: 1068:          drawCard(currentPlayer, state);
    $$$$$: 1068-block  0
call    0 never executed
    #####: 1069:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:        }
        -: 1071:        else{//Action Card
    #####: 1072:          state->numActions = state->numActions + 2;
    $$$$$: 1072-block  0
        -: 1073:        }
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
    $$$$$: 1076-block  0
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1081-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1081-block  1
branch  2 never executed
branch  3 never executed
        -: 1082:      {
    #####: 1083:        return -1;				
    $$$$$: 1083-block  0
        -: 1084:      }
        -: 1085:
    #####: 1086:          if (choice1 == handPos)
    $$$$$: 1086-block  0
branch  0 never executed
branch  1 never executed
        -: 1087:      {
    #####: 1088:        return -1;
    $$$$$: 1088-block  0
        -: 1089:      }
        -: 1090:
    #####: 1091:          for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1091-block  0
    $$$$$: 1091-block  1
    $$$$$: 1091-block  2
branch  0 never executed
branch  1 never executed
        -: 1092:      {
    #####: 1093:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1093-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1093-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1093-block  2
branch  4 never executed
branch  5 never executed
        -: 1094:          {
    #####: 1095:            j++;
    $$$$$: 1095-block  0
        -: 1096:          }
        -: 1097:      }
    #####: 1098:          if (j < choice2)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
        -: 1099:      {
    #####: 1100:        return -1;				
    $$$$$: 1100-block  0
        -: 1101:      }
        -: 1102:
        -: 1103:          if (DEBUG) 
        -: 1104:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:          //increase supply count for choosen card by amount being discarded
    #####: 1107:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:          
        -: 1109:          //each other player gains a copy of revealed card
    #####: 1110:          for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1110-block  0
    $$$$$: 1110-block  1
    $$$$$: 1110-block  2
branch  0 never executed
branch  1 never executed
        -: 1111:      {
    #####: 1112:        if (i != currentPlayer)
    $$$$$: 1112-block  0
branch  0 never executed
branch  1 never executed
        -: 1113:          {
    #####: 1114:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1114-block  0
call    0 never executed
        -: 1115:          }
        -: 1116:      }
        -: 1117:
        -: 1118:          //discard played card from hand
    #####: 1119:          discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1119-block  0
call    0 never executed
        -: 1120:
        -: 1121:          //trash copies of cards returned to supply
    #####: 1122:          for (j = 0; j < choice2; j++)
    $$$$$: 1122-block  0
    $$$$$: 1122-block  1
branch  0 never executed
branch  1 never executed
        -: 1123:      {
    #####: 1124:        for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1124-block  0
    $$$$$: 1124-block  1
    $$$$$: 1124-block  2
branch  0 never executed
branch  1 never executed
        -: 1125:          {
    #####: 1126:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1126-block  0
branch  0 never executed
branch  1 never executed
        -: 1127:        {
    #####: 1128:          discardCard(i, currentPlayer, state, 1);
    $$$$$: 1128-block  0
call    0 never executed
    #####: 1129:          break;
        -: 1130:        }
        -: 1131:          }
        -: 1132:      }			
        -: 1133:
    #####: 1134:      return 0;
    $$$$$: 1134-block  0
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1139-block  0
    $$$$$: 1139-block  1
branch  0 never executed
branch  1 never executed
        -: 1140:      {
    #####: 1141:        if (i != currentPlayer)
    $$$$$: 1141-block  0
branch  0 never executed
branch  1 never executed
        -: 1142:          {
    #####: 1143:            for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1143-block  0
    $$$$$: 1143-block  1
    $$$$$: 1143-block  2
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:          if (state->hand[i][j] == copper)
    $$$$$: 1145-block  0
branch  0 never executed
branch  1 never executed
        -: 1146:            {
    #####: 1147:              discardCard(j, i, state, 0);
    $$$$$: 1147-block  0
call    0 never executed
    #####: 1148:              break;
        -: 1149:            }
    #####: 1150:          if (j == state->handCount[i])
    $$$$$: 1150-block  0
branch  0 never executed
branch  1 never executed
        -: 1151:            {
    #####: 1152:              for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1152-block  0
    $$$$$: 1152-block  1
    $$$$$: 1152-block  2
branch  0 never executed
branch  1 never executed
        -: 1153:          {
        -: 1154:            if (DEBUG)
        -: 1155:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:          }	
    #####: 1157:              break;
    $$$$$: 1157-block  0
        -: 1158:            }		
        -: 1159:        }
        -: 1160:              
        -: 1161:          }
        -: 1162:            
        -: 1163:      }				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1166-block  0
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:      {
    #####: 1178:        return -1;
    $$$$$: 1178-block  0
        -: 1179:      }
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1185-block  0
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1193-block  0
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
    $$$$$: 1200-block  0
branch  0 never executed
branch  1 never executed
        -: 1201:      {
        -: 1202:        //gain coins equal to trashed card
    #####: 1203:        state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1203-block  0
call    0 never executed
call    1 never executed
        -: 1204:        //trash card
    #####: 1205:        discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:      }
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1209-block  0
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1213-block  0
    $$$$$: 1213-block  1
    $$$$$: 1213-block  2
branch  0 never executed
branch  1 never executed
    #####: 1214:        if (i != currentPlayer){
    $$$$$: 1214-block  0
branch  0 never executed
branch  1 never executed
    #####: 1215:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:          state->discardCount[i]++;
    #####: 1217:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1217-block  0
        -: 1218:        }
        -: 1219:      }
    #####: 1220:      return 0;
    $$$$$: 1220-block  0
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1225-block  0
    $$$$$: 1225-block  1
    $$$$$: 1225-block  2
branch  0 never executed
branch  1 never executed
        -: 1226:      {
    #####: 1227:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1227-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1227-block  1
branch  2 never executed
branch  3 never executed
        -: 1228:          {
    #####: 1229:            index = i;
    #####: 1230:            break;
    $$$$$: 1230-block  0
        -: 1231:          }
        -: 1232:      }
    #####: 1233:      if (index > -1)
    $$$$$: 1233-block  0
branch  0 never executed
branch  1 never executed
        -: 1234:      {
        -: 1235:        //trash both treasure cards
    #####: 1236:        discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1236-block  0
call    0 never executed
    #####: 1237:        discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:        //gain 4 Gold cards
    #####: 1240:        for (i = 0; i < 4; i++)
    $$$$$: 1240-block  0
branch  0 never executed
branch  1 never executed
        -: 1241:          {
    #####: 1242:            gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1242-block  0
call    0 never executed
        -: 1243:          }
        -: 1244:            
        -: 1245:        //return success
    #####: 1246:        return 1;
    $$$$$: 1246-block  0
        -: 1247:      }
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
    $$$$$: 1250-block  0
        -: 1251:}
        -: 1252:	
       18: 1253:  return -1;
    $$$$$: 1253-block  0
       18: 1253-block  1
        -: 1254:}
        -: 1255:
function discardCard called 23 returned 100% blocks executed 78%
       23: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
       23: 1256-block  0
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       23: 1260:  if (trashFlag < 1)
       23: 1260-block  0
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1261:    {
        -: 1262:      //add card to played pile
       15: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       15: 1264:      state->playedCardCount++;
       15: 1264-block  0
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       23: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       23: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
       23: 1271-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
    $$$$$: 1274-block  0
        -: 1275:    }
       23: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
       23: 1276-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
    $$$$$: 1279-block  0
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       23: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       23: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       23: 1288:      state->handCount[currentPlayer]--;
       23: 1288-block  0
        -: 1289:    }
        -: 1290:	
       23: 1291:  return 0;
       23: 1291-block  0
        -: 1292:}
        -: 1293:
function gainCard called 18 returned 100% blocks executed 80%
       18: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
       18: 1294-block  0
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
       18: 1299:  if ( supplyCount(supplyPos, state) < 1 )
       18: 1299-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1300:    {
    #####: 1301:      return -1;
    $$$$$: 1301-block  0
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
       18: 1309:  if (toFlag == 1)
       18: 1309-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
    $$$$$: 1312-block  0
        -: 1313:    }
       18: 1314:  else if (toFlag == 2)
       18: 1314-block  0
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -: 1315:    {
        4: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1317:      state->handCount[player]++;
        4: 1317-block  0
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
       14: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       14: 1322:      state->discardCount[player]++;
       14: 1322-block  0
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
       18: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
       18: 1328:  return 0;
       18: 1328-block  0
        -: 1329:}
        -: 1330:
function updateCoins called 21 returned 100% blocks executed 100%
       21: 1331:int updateCoins(int player, struct gameState *state, int bonus)
       21: 1331-block  0
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
       21: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
      136: 1339:  for (i = 0; i < state->handCount[player]; i++)
       21: 1339-block  0
      115: 1339-block  1
      136: 1339-block  2
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -: 1340:    {
      115: 1341:      if (state->hand[player][i] == copper)
      115: 1341-block  0
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -: 1342:	{
       34: 1343:	  state->coins += 1;
       34: 1343-block  0
        -: 1344:	}
       81: 1345:      else if (state->hand[player][i] == silver)
       81: 1345-block  0
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -: 1346:	{
        2: 1347:	  state->coins += 2;
        2: 1347-block  0
        -: 1348:	}
       79: 1349:      else if (state->hand[player][i] == gold)
       79: 1349-block  0
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1350:	{
        2: 1351:	  state->coins += 3;
        2: 1351-block  0
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
       21: 1356:  state->coins += bonus;
        -: 1357:
       21: 1358:  return 0;
       21: 1358-block  0
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
