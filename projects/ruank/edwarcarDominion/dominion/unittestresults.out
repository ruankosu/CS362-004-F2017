----------------- Testing function: isGameOver ----------------
TEST 1: Province supply = 0
isGameOver state = 1, expected = 1

TEST 2: Province supply > 1
isGameOver state = 0, expected = 0

TEST 3: Three supply piles = 0
isGameOver state = 1, expected = 1

 >>>>> Success: Testing complete isGameOver <<<<<

File 'dominion.c'
Lines executed:17.64% of 652
Branches executed:17.27% of 417
Taken at least once:14.15% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 28 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
       28:   11:  if (*(int*)a > *(int*)b)
       28:   11-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
    $$$$$:   12-block  0
       28:   13:  if (*(int*)a < *(int*)b)
       28:   13-block  0
branch  0 taken 36%
branch  1 taken 64%
       10:   14:    return -1;
       10:   14-block  0
       18:   15:  return 0;
       18:   15-block  0
       28:   16:}
       28:   16-block  0
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    $$$$$:   19-block  0
    #####:   20:  return g;
    $$$$$:   20-block  0
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
    $$$$$:   36-block  0
        -:   37:}
        -:   38:
function initializeGame called 1 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
        1:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        1:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        1:   50-block  0
branch  0 taken 100%
branch  1 taken 0%
        1:   50-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
    $$$$$:   52-block  0
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       11:   59:  for (i = 0; i < 10; i++)
        1:   59-block  0
       11:   59-block  1
branch  0 taken 91%
branch  1 taken 9%
       10:   59-block  2
        -:   60:    {
      110:   61:      for (j = 0; j < 10; j++)
       10:   61-block  0
      110:   61-block  1
branch  0 taken 91%
branch  1 taken 9%
      100:   61-block  2
        -:   62:        {
      100:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      100:   63-block  0
branch  0 taken 90%
branch  1 taken 10%
       90:   63-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
    $$$$$:   65-block  0
        -:   66:	    }
      100:   67:        }
      100:   67-block  0
       10:   68:    }
       10:   68-block  0
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
        1:   75-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        1:   78:    }
        1:   78-block  0
    #####:   79:  else if (numPlayers == 3)
    $$$$$:   79-block  0
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
    $$$$$:   82-block  0
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
    $$$$$:   85-block  0
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
        1:   89-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        1:   94:    }
        1:   94-block  0
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
    $$$$$:   99-block  0
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       21:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        1:  108-block  0
       21:  108-block  1
branch  0 taken 95%
branch  1 taken 5%
       20:  108-block  2
        -:  109:    {
      165:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
       20:  110-block  0
      165:  110-block  1
branch  0 taken 94%
branch  1 taken 6%
      145:  110-block  2
        -:  111:	{
      155:  112:	  if (kingdomCards[j] == i)
      155:  112-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       10:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       10:  115-block  0
branch  0 taken 100%
branch  1 taken 0%
       10:  115-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    $$$$$:  117-block  0
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    $$$$$:  119-block  0
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  120-block  0
    #####:  121:		}
    $$$$$:  121-block  0
        -:  122:	      else
        -:  123:		{
       10:  124:		  state->supplyCount[i] = 10;
       10:  124-block  0
        -:  125:		}
       10:  126:	      break;
       10:  126-block  0
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      145:  130:	      state->supplyCount[i] = -1;
      145:  130-block  0
        -:  131:	    }
      145:  132:	}
      145:  132-block  0
        -:  133:
       20:  134:    }
       20:  134-block  0
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        3:  140:  for (i = 0; i < numPlayers; i++)
        1:  140-block  0
        3:  140-block  1
branch  0 taken 67%
branch  1 taken 33%
        2:  140-block  2
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
        8:  143:      for (j = 0; j < 3; j++)
        2:  143-block  0
        8:  143-block  1
branch  0 taken 75%
branch  1 taken 25%
        6:  143-block  2
        -:  144:	{
        6:  145:	  state->deck[i][j] = estate;
        6:  146:	  state->deckCount[i]++;
        6:  147:	}
        6:  147-block  0
       16:  148:      for (j = 3; j < 10; j++)
        2:  148-block  0
       16:  148-block  1
branch  0 taken 88%
branch  1 taken 13%
       14:  148-block  2
        -:  149:	{
       14:  150:	  state->deck[i][j] = copper;
       14:  151:	  state->deckCount[i]++;		
       14:  152:	}
       14:  152-block  0
        2:  153:    }
        2:  153-block  0
        -:  154:
        -:  155:  //shuffle player decks
        3:  156:  for (i = 0; i < numPlayers; i++)
        1:  156-block  0
        3:  156-block  1
branch  0 taken 67%
branch  1 taken 33%
        2:  156-block  2
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
        2:  158-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
    $$$$$:  160-block  0
        -:  161:	}
        2:  162:    }
        2:  162-block  0
        -:  163:
        -:  164:  //draw player hands
        3:  165:  for (i = 0; i < numPlayers; i++)
        1:  165-block  0
        3:  165-block  1
branch  0 taken 67%
branch  1 taken 33%
        2:  165-block  2
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        2:  175:    }
        2:  175-block  0
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       28:  178:  for (i = 0; i <= treasure_map; i++)
        1:  178-block  0
       28:  178-block  1
branch  0 taken 96%
branch  1 taken 4%
       27:  178-block  2
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
       27:  181:    }
       27:  181-block  0
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
        6:  194:  for (it = 0; it < 5; it++){
        1:  194-block  0
        6:  194-block  1
branch  0 taken 83%
branch  1 taken 17%
        5:  194-block  2
        5:  195:    drawCard(state->whoseTurn, state);
        5:  196:  }
        5:  196-block  0
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:  return 0;
        1:  200-block  0
        1:  201:}
        1:  201-block  0
        -:  202:
function shuffle called 2 returned 100% blocks executed 93%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        2:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        2:  211:  if (state->deckCount[player] < 1)
        2:  211-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:    return -1;
    $$$$$:  212-block  0
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       22:  216:  while (state->deckCount[player] > 0) {
        2:  216-block  0
       22:  216-block  1
branch  0 taken 91%
branch  1 taken 9%
       20:  216-block  2
       20:  217:    card = floor(Random() * state->deckCount[player]);
       20:  218:    newDeck[newDeckPos] = state->deck[player][card];
       20:  219:    newDeckPos++;
       70:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
       20:  220-block  0
       70:  220-block  1
branch  0 taken 71%
branch  1 taken 29%
       50:  220-block  2
       50:  221:      state->deck[player][i] = state->deck[player][i+1];
       50:  222:    }
       50:  222-block  0
       20:  223:    state->deckCount[player]--;
        -:  224:  }
       22:  225:  for (i = 0; i < newDeckPos; i++) {
        2:  225-block  0
       22:  225-block  1
branch  0 taken 91%
branch  1 taken 9%
       20:  225-block  2
       20:  226:    state->deck[player][i] = newDeck[i];
       20:  227:    state->deckCount[player]++;
       20:  228:  }
       20:  228-block  0
        -:  229:
        2:  230:  return 0;
        2:  230-block  0
        2:  231:}
        2:  231-block  0
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
    $$$$$:  239-block  0
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
    $$$$$:  241-block  0
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
    $$$$$:  245-block  0
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
    $$$$$:  247-block  0
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
    $$$$$:  254-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  254-block  1
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
    $$$$$:  256-block  0
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  260-block  0
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
    $$$$$:  262-block  0
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    $$$$$:  271-block  0
    #####:  272:}
    $$$$$:  272-block  0
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
    $$$$$:  284-block  0
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    $$$$$:  287-block  0
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  288-block  0
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    $$$$$:  291-block  0
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  292-block  0
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
    $$$$$:  295-block  0
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
    $$$$$:  302-block  0
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
    $$$$$:  310-block  0
    #####:  311:}
    $$$$$:  311-block  0
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  314-block  0
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
    $$$$$:  319-block  0
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
    $$$$$:  323-block  0
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  330-block  0
    $$$$$:  330-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  2
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
    $$$$$:  332-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  332-block  1
    #####:  333:    }
    $$$$$:  333-block  0
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  335-block  0
    $$$$$:  335-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  2
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
    $$$$$:  337-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  337-block  1
    #####:  338:    }
    $$$$$:  338-block  0
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  340-block  0
    $$$$$:  340-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  2
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
    $$$$$:  342-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  342-block  1
    #####:  343:    }
    $$$$$:  343-block  0
        -:  344:
    #####:  345:  return count;
    $$$$$:  345-block  0
        -:  346:}
        -:  347:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  348:int whoseTurn(struct gameState *state) {
    #####:  349:  return state->whoseTurn;
    $$$$$:  349-block  0
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  358-block  0
    $$$$$:  358-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  358-block  2
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    $$$$$:  361-block  0
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  365-block  0
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
    $$$$$:  367-block  0
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  369-block  0
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    $$$$$:  382-block  0
    $$$$$:  382-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  382-block  2
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
    $$$$$:  384-block  0
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
    $$$$$:  389-block  0
        -:  390:}
        -:  391:
function isGameOver called 6 returned 100% blocks executed 100%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        6:  397-block  0
branch  0 taken 33%
branch  1 taken 67%
        -:  398:    {
        2:  399:      return 1;
        2:  399-block  0
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        4:  404-block  0
      104:  404-block  1
branch  0 taken 96%
branch  1 taken 4%
      100:  404-block  2
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
      100:  406-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  407:	{
        6:  408:	  j++;
        6:  409:	}
        6:  409-block  0
      100:  410:    }
      100:  410-block  0
        4:  411:  if ( j >= 3)
        4:  411-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  412:    {
        2:  413:      return 1;
        2:  413-block  0
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        2:  416-block  0
        6:  417:}
        6:  417-block  0
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  424-block  0
    $$$$$:  424-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  2
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  430-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  430-block  1
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  431-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  431-block  1
    #####:  432:    }
    $$$$$:  432-block  0
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  435-block  0
    $$$$$:  435-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  2
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  441-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  441-block  1
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  442-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  442-block  1
    #####:  443:    }
    $$$$$:  443-block  0
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  446-block  0
    $$$$$:  446-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  2
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  452-block  1
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  453-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  453-block  1
    #####:  454:    }
    $$$$$:  454-block  0
        -:  455:
    #####:  456:  return score;
    $$$$$:  456-block  0
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  466-block  0
    $$$$$:  466-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  466-block  2
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
    $$$$$:  469-block  0
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
    $$$$$:  472-block  0
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
    $$$$$:  475-block  0
        -:  476:	}
    #####:  477:    }
    $$$$$:  477-block  0
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  481-block  0
    $$$$$:  481-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  481-block  2
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
    $$$$$:  483-block  0
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    $$$$$:  486-block  0
    #####:  487:    }
    $$$$$:  487-block  0
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  492-block  0
    $$$$$:  492-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  2
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  494-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  494-block  1
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    $$$$$:  497-block  0
    #####:  498:    }
    $$$$$:  498-block  0
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  502-block  0
    $$$$$:  502-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  502-block  2
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
    $$$$$:  504-block  0
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    $$$$$:  507-block  0
    #####:  508:    }
    $$$$$:  508-block  0
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  512-block  0
    $$$$$:  512-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  512-block  2
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
    $$$$$:  514-block  0
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
    $$$$$:  517-block  0
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
    $$$$$:  520-block  0
        -:  521:	}
    #####:  522:    }
    $$$$$:  522-block  0
        -:  523:
    #####:  524:  return 0;
    $$$$$:  524-block  0
        -:  525:}
        -:  526:
function drawCard called 5 returned 100% blocks executed 41%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
        5:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        5:  530-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
    $$$$$:  535-block  0
    $$$$$:  535-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  535-block  2
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
    $$$$$:  538-block  0
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
    $$$$$:  561-block  0
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
    $$$$$:  562-block  0
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
    $$$$$:  567-block  0
        -:  568:
        -:  569:  else{
        5:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
        5:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  578:    state->deckCount[player]--;
        5:  579:    state->handCount[player]++;//Increment hand count
        5:  579-block  0
        -:  580:  }
        -:  581:
        5:  582:  return 0;
        5:  582-block  0
        5:  583:}
        5:  583-block  0
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
    $$$$$:  587-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
    $$$$$:  590-block  0
        -:  591:    case estate:
    #####:  592:      return 2;
    $$$$$:  592-block  0
        -:  593:    case duchy:
    #####:  594:      return 5;
    $$$$$:  594-block  0
        -:  595:    case province:
    #####:  596:      return 8;
    $$$$$:  596-block  0
        -:  597:    case copper:
    #####:  598:      return 0;
    $$$$$:  598-block  0
        -:  599:    case silver:
    #####:  600:      return 3;
    $$$$$:  600-block  0
        -:  601:    case gold:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case adventurer:
    #####:  604:      return 6;
    $$$$$:  604-block  0
        -:  605:    case council_room:
    #####:  606:      return 5;
    $$$$$:  606-block  0
        -:  607:    case feast:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case gardens:
    #####:  610:      return 4;
    $$$$$:  610-block  0
        -:  611:    case mine:
    #####:  612:      return 5;
    $$$$$:  612-block  0
        -:  613:    case remodel:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case smithy:
    #####:  616:      return 4;
    $$$$$:  616-block  0
        -:  617:    case village:
    #####:  618:      return 3;
    $$$$$:  618-block  0
        -:  619:    case baron:
    #####:  620:      return 4;
    $$$$$:  620-block  0
        -:  621:    case great_hall:
    #####:  622:      return 3;
    $$$$$:  622-block  0
        -:  623:    case minion:
    #####:  624:      return 5;
    $$$$$:  624-block  0
        -:  625:    case steward:
    #####:  626:      return 3;
    $$$$$:  626-block  0
        -:  627:    case tribute:
    #####:  628:      return 5;
    $$$$$:  628-block  0
        -:  629:    case ambassador:
    #####:  630:      return 3;
    $$$$$:  630-block  0
        -:  631:    case cutpurse:
    #####:  632:      return 4;
    $$$$$:  632-block  0
        -:  633:    case embargo: 
    #####:  634:      return 2;
    $$$$$:  634-block  0
        -:  635:    case outpost:
    #####:  636:      return 5;
    $$$$$:  636-block  0
        -:  637:    case salvager:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case sea_hag:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    case treasure_map:
    #####:  642:      return 4;
    $$$$$:  642-block  0
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    $$$$$:  645-block  0
    #####:  646:}
    $$$$$:  646-block  0
        -:  647:
        -:  648:
function SmithyCard called 0 returned 0% blocks executed 0%
        -:  649:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  650:
        -:  651:  //+3 Cards
        -:  652:  int i;
    #####:  653:  for (i = 0; i < 5; i++)
    $$$$$:  653-block  0
    $$$$$:  653-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  653-block  2
        -:  654:  {
    #####:  655:      drawCard(currentPlayer, state);
    #####:  656:  }
    $$$$$:  656-block  0
        -:  657:   //discard card from hand
        -:  658:   //discardCard(handPos, currentPlayer, state, 0);
    #####:  659:   return 0;
    $$$$$:  659-block  0
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:
        -:  662:}
        -:  663:
function AdventurerCard called 0 returned 0% blocks executed 0%
        -:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
    #####:  666:  while(drawntreasure<5){
    $$$$$:  666-block  0
    $$$$$:  666-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  666-block  2
    #####:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    $$$$$:  667-block  0
branch  0 never executed
branch  1 never executed
    #####:  668:          shuffle(currentPlayer, state);
    #####:  669:        }
    $$$$$:  669-block  0
    #####:  670:        drawCard(currentPlayer, state);
    #####:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  672:        if (cardDrawn == gold || cardDrawn == silver || cardDrawn == copper)
    $$$$$:  672-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  672-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  672-block  2
branch  4 never executed
branch  5 never executed
    #####:  673:		drawntreasure++;
    $$$$$:  673-block  0
        -:  674:        else{
    #####:  675:          temphand[z]=cardDrawn;
    #####:  676:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:          z++;
    $$$$$:  677-block  0
        -:  678:        }
        -:  679:      }
    #####:  680:      while(z-1>=0){
    $$$$$:  680-block  0
    $$$$$:  680-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  680-block  2
    #####:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:        z=z-1;
        -:  683:      }
        -:  684:
    #####:  685:  return 0;
    $$$$$:  685-block  0
        -:  686:// bug introduced: player is able to draw 5 treasure cards instead of 2. 
        -:  687:}
        -:  688:
        -:  689:
function VillageCard called 0 returned 0% blocks executed 0%
        -:  690:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  691:
        -:  692:   //+1 Card
    #####:  693:   drawCard(currentPlayer, state);
    #####:  694:   drawCard(currentPlayer, state);	
    #####:  695:drawCard(currentPlayer, state);
        -:  696:
        -:  697:   //+2 Actions
    #####:  698:   state->numActions = state->numActions + 10;
        -:  699:  
        -:  700:    //discard played card from hand
    #####:  701:    discardCard(handPos, currentPlayer, state, 0);
        -:  702:
    #####:  703:  return 0; 
    $$$$$:  703-block  0
        -:  704:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1 
        -:  705:}
        -:  706:
function GreatHallCard called 0 returned 0% blocks executed 0%
        -:  707:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  708:
        -:  709:      //+1 Card
    #####:  710:      drawCard(currentPlayer, state);
        -:  711:
        -:  712:      //+1 Actions
    #####:  713:      state->numActions++;
        -:  714:
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
        -:  717:      
    #####:  718:      return 0;   
    $$$$$:  718-block  0
        -:  719:}
        -:  720:
function EmbargoCard called 0 returned 0% blocks executed 0%
        -:  721:int EmbargoCard(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  722:
    #####:  723:	state->coins = state->coins + 20;
        -:  724:
        -:  725:      //see if selected pile is in play
    #####:  726:       if ( state->supplyCount[choice1] == -1 )
    $$$$$:  726-block  0
branch  0 never executed
branch  1 never executed
        -:  727:          {
    #####:  728:             return -1;
    $$$$$:  728-block  0
        -:  729:          }
        -:  730:    
        -:  731:       //add embargo token to selected supply pile
    #####:  732:       state->embargoTokens[choice1]++;
    #####:  733:       state->embargoTokens[choice1]++;  
        -:  734:
        -:  735:      //trash card
    #####:  736:       discardCard(handPos, currentPlayer, state, 1);
        -:  737:
    #####:  738:	return 0; 
    $$$$$:  738-block  0
        -:  739://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
    #####:  740:}
    $$$$$:  740-block  0
        -:  741:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
    #####:  749:  int currentPlayer = whoseTurn(state);
    #####:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
    #####:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
    #####:  754:  int drawntreasure=0;
        -:  755:  int cardDrawn;
    #####:  756:  int z = 0;// this is the counter for the temp hand
    #####:  757:  if (nextPlayer > (state->numPlayers - 1)){
    $$$$$:  757-block  0
branch  0 never executed
branch  1 never executed
    #####:  758:    nextPlayer = 0;
    #####:  759:  }
    $$$$$:  759-block  0
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
    #####:  763:  switch( card ) 
    $$$$$:  763-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  764:    {
        -:  765:    case adventurer:
        -:  766:     
        -:  767:	//call function 
    #####:  768:	AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
    #####:  770:	return 0;
    $$$$$:  770-block  0
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
    $$$$$:  774-block  0
    $$$$$:  774-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  774-block  2
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
    #####:  777:	}
    $$$$$:  777-block  0
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  783-block  0
    $$$$$:  783-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  783-block  2
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
    $$$$$:  785-block  0
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
    #####:  788:	    }
    $$$$$:  788-block  0
    #####:  789:	}
    $$$$$:  789-block  0
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
    $$$$$:  794-block  0
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  799-block  0
    $$$$$:  799-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  799-block  2
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  802:      }
    $$$$$:  802-block  0
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    $$$$$:  808-block  0
    $$$$$:  808-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  808-block  2
    #####:  809:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  809-block  0
branch  0 never executed
branch  1 never executed
        -:  810:	  if (DEBUG)
        -:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
    #####:  816:	}
    $$$$$:  816-block  0
    #####:  817:	else if (state->coins < getCost(choice1)){
    $$$$$:  817-block  0
branch  0 never executed
branch  1 never executed
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
    #####:  823:	}
    $$$$$:  823-block  0
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
    $$$$$:  831-block  0
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  841-block  0
    $$$$$:  841-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  841-block  2
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
    #####:  844:      }
    $$$$$:  844-block  0
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
    $$$$$:  847-block  0
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
    $$$$$:  850-block  0
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  855-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
    $$$$$:  857-block  0
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  860-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  860-block  1
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
    $$$$$:  862-block  0
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  865-block  0
branch  0 never executed
branch  1 never executed
        -:  866:	{
    #####:  867:	  return -1;
    $$$$$:  867-block  0
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  876-block  0
    $$$$$:  876-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  876-block  2
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  878-block  0
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
    $$$$$:  881-block  0
        -:  882:	    }
    #####:  883:	}
    $$$$$:  883-block  0
        -:  884:			
    #####:  885:      return 0;
    $$$$$:  885-block  0
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  890-block  0
branch  0 never executed
branch  1 never executed
        -:  891:	{
    #####:  892:	  return -1;
    $$$$$:  892-block  0
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  901-block  0
    $$$$$:  901-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  901-block  2
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  903-block  0
branch  0 never executed
branch  1 never executed
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
    $$$$$:  906-block  0
        -:  907:	    }
    #####:  908:	}
    $$$$$:  908-block  0
        -:  909:
        -:  910:
    #####:  911:      return 0;
    $$$$$:  911-block  0
        -:  912:		
        -:  913:    case smithy:
    #####:  914:      	SmithyCard(currentPlayer, state, handPos);
    #####:  915:	return 0;
    $$$$$:  915-block  0
        -:  916:		
        -:  917:    case village:
        -:  918:      
    #####:  919:	VillageCard(currentPlayer, state, handPos);
        -:  920:
    #####:  921:	return 0;
    $$$$$:  921-block  0
        -:  922:		
        -:  923:    case baron:
    #####:  924:      state->numBuys++;//Increase buys by 1!
    #####:  925:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  925-block  0
branch  0 never executed
branch  1 never executed
    #####:  926:	int p = 0;//Iterator for hand!
    #####:  927:	int card_not_discarded = 1;//Flag for discard set!
    #####:  928:	while(card_not_discarded){
    $$$$$:  928-block  0
    $$$$$:  928-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  928-block  2
    #####:  929:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  929-block  0
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  931:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  932:	    state->discardCount[currentPlayer]++;
    #####:  933:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  933-block  0
    $$$$$:  933-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  933-block  2
    #####:  934:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  935:	    }
    $$$$$:  935-block  0
    #####:  936:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  937:	    state->handCount[currentPlayer]--;
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
    $$$$$:  939-block  0
    #####:  940:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  940-block  0
branch  0 never executed
branch  1 never executed
        -:  941:	    if(DEBUG) {
        -:  942:	      printf("No estate cards in your hand, invalid choice\n");
        -:  943:	      printf("Must gain an estate if there are any\n");
        -:  944:	    }
    #####:  945:	    if (supplyCount(estate, state) > 0){
    $$$$$:  945-block  0
branch  0 never executed
branch  1 never executed
    #####:  946:	      gainCard(estate, state, 0, currentPlayer);
    #####:  947:	      state->supplyCount[estate]--;//Decrement estates
    #####:  948:	      if (supplyCount(estate, state) == 0){
    $$$$$:  948-block  0
branch  0 never executed
branch  1 never executed
    #####:  949:		isGameOver(state);
    #####:  950:	      }
    $$$$$:  950-block  0
    #####:  951:	    }
    $$$$$:  951-block  0
    #####:  952:	    card_not_discarded = 0;//Exit the loop
    #####:  953:	  }
    $$$$$:  953-block  0
        -:  954:			    
        -:  955:	  else{
    #####:  956:	    p++;//Next card
    $$$$$:  956-block  0
        -:  957:	  }
        -:  958:	}
    #####:  959:      }
    $$$$$:  959-block  0
        -:  960:			    
        -:  961:      else{
    #####:  962:	if (supplyCount(estate, state) > 0){
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
    #####:  963:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  964:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  965:	  if (supplyCount(estate, state) == 0){
    $$$$$:  965-block  0
branch  0 never executed
branch  1 never executed
    #####:  966:	    isGameOver(state);
    #####:  967:	  }
    $$$$$:  967-block  0
    #####:  968:	}
    $$$$$:  968-block  0
        -:  969:      }
        -:  970:	    
        -:  971:      
    #####:  972:      return 0;
    $$$$$:  972-block  0
        -:  973:		
        -:  974:    case great_hall:
        -:  975:      
    #####:  976:	GreatHallCard(currentPlayer, state, handPos);
        -:  977:
    #####:  978:	return 0;
    $$$$$:  978-block  0
        -:  979:		
        -:  980:    case minion:
        -:  981:      //+1 action
    #####:  982:      state->numActions++;
        -:  983:			
        -:  984:      //discard card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
        -:  986:			
    #####:  987:      if (choice1)		//+2 coins
    $$$$$:  987-block  0
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  state->coins = state->coins + 2;
    #####:  990:	}
    $$$$$:  990-block  0
        -:  991:			
    #####:  992:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  992-block  0
branch  0 never executed
branch  1 never executed
        -:  993:	{
        -:  994:	  //discard hand
    #####:  995:	  while(numHandCards(state) > 0)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  995-block  2
        -:  996:	    {
    #####:  997:	      discardCard(handPos, currentPlayer, state, 0);
        -:  998:	    }
        -:  999:				
        -: 1000:	  //draw 4
    #####: 1001:	  for (i = 0; i < 4; i++)
    $$$$$: 1001-block  0
    $$$$$: 1001-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1001-block  2
        -: 1002:	    {
    #####: 1003:	      drawCard(currentPlayer, state);
    #####: 1004:	    }
    $$$$$: 1004-block  0
        -: 1005:				
        -: 1006:	  //other players discard hand and redraw if hand size > 4
    #####: 1007:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1007-block  0
    $$$$$: 1007-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1007-block  2
        -: 1008:	    {
    #####: 1009:	      if (i != currentPlayer)
    $$$$$: 1009-block  0
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  if ( state->handCount[i] > 4 )
    $$$$$: 1011-block  0
branch  0 never executed
branch  1 never executed
        -: 1012:		    {
        -: 1013:		      //discard hand
    #####: 1014:		      while( state->handCount[i] > 0 )
    $$$$$: 1014-block  0
    $$$$$: 1014-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1014-block  2
        -: 1015:			{
    #####: 1016:			  discardCard(handPos, i, state, 0);
        -: 1017:			}
        -: 1018:							
        -: 1019:		      //draw 4
    #####: 1020:		      for (j = 0; j < 4; j++)
    $$$$$: 1020-block  0
    $$$$$: 1020-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1020-block  2
        -: 1021:			{
    #####: 1022:			  drawCard(i, state);
    #####: 1023:			}
    $$$$$: 1023-block  0
    #####: 1024:		    }
    $$$$$: 1024-block  0
    #####: 1025:		}
    $$$$$: 1025-block  0
    #####: 1026:	    }
    $$$$$: 1026-block  0
        -: 1027:				
    #####: 1028:	}
    $$$$$: 1028-block  0
    #####: 1029:      return 0;
    $$$$$: 1029-block  0
        -: 1030:		
        -: 1031:    case steward:
    #####: 1032:      if (choice1 == 1)
    $$$$$: 1032-block  0
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //+2 cards
    #####: 1035:	  drawCard(currentPlayer, state);
    #####: 1036:	  drawCard(currentPlayer, state);
    #####: 1037:	}
    $$$$$: 1037-block  0
    #####: 1038:      else if (choice1 == 2)
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
        -: 1039:	{
        -: 1040:	  //+2 coins
    #####: 1041:	  state->coins = state->coins + 2;
    #####: 1042:	}
    $$$$$: 1042-block  0
        -: 1043:      else
        -: 1044:	{
        -: 1045:	  //trash 2 cards in hand
    #####: 1046:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1047:	  discardCard(choice3, currentPlayer, state, 1);
    $$$$$: 1047-block  0
        -: 1048:	}
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1052:      return 0;
    $$$$$: 1052-block  0
        -: 1053:		
        -: 1054:    case tribute:
    #####: 1055:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
    #####: 1056:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	  state->deckCount[nextPlayer]--;
    #####: 1059:	}
    $$$$$: 1059-block  0
    #####: 1060:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1060-block  0
branch  0 never executed
branch  1 never executed
    #####: 1061:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1062:	  state->discardCount[nextPlayer]--;
    #####: 1063:	}
    $$$$$: 1063-block  0
        -: 1064:	else{
        -: 1065:	  //No Card to Reveal
        -: 1066:	  if (DEBUG){
        -: 1067:	    printf("No cards to reveal\n");
        -: 1068:	  }
        -: 1069:	}
    #####: 1070:      }
    $$$$$: 1070-block  0
        -: 1071:	    
        -: 1072:      else{
    #####: 1073:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    #####: 1074:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1074-block  0
    $$$$$: 1074-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1074-block  2
    #####: 1075:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1076:	    state->deckCount[nextPlayer]++;
    #####: 1077:	    state->discard[nextPlayer][i] = -1;
    #####: 1078:	    state->discardCount[nextPlayer]--;
    #####: 1079:	  }
    $$$$$: 1079-block  0
        -: 1080:			    
    #####: 1081:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1082:	} 
    $$$$$: 1082-block  0
    #####: 1083:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
    #####: 1086:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1088:	state->deckCount[nextPlayer]--;
    $$$$$: 1088-block  0
        -: 1089:      }    
        -: 1090:		       
    #####: 1091:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    #####: 1092:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1093:	state->playedCardCount++;
    #####: 1094:	tributeRevealedCards[1] = -1;
    #####: 1095:      }
    $$$$$: 1095-block  0
        -: 1096:
    #####: 1097:      for (i = 0; i <= 2; i ++){
    $$$$$: 1097-block  0
    $$$$$: 1097-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1097-block  2
    #####: 1098:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1098-block  2
branch  4 never executed
branch  5 never executed
    #####: 1099:	  state->coins += 2;
    #####: 1100:	}
    $$$$$: 1100-block  0
        -: 1101:		    
    #####: 1102:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1102-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1102-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1102-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1102-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1102-block  4
branch  8 never executed
branch  9 never executed
    #####: 1103:	  drawCard(currentPlayer, state);
    #####: 1104:	  drawCard(currentPlayer, state);
    #####: 1105:	}
    $$$$$: 1105-block  0
        -: 1106:	else{//Action Card
    #####: 1107:	  state->numActions = state->numActions + 2;
    $$$$$: 1107-block  0
        -: 1108:	}
    #####: 1109:      }
    $$$$$: 1109-block  0
        -: 1110:	    
    #####: 1111:      return 0;
    $$$$$: 1111-block  0
        -: 1112:		
        -: 1113:    case ambassador:
    #####: 1114:      j = 0;		//used to check if player has enough cards to discard
        -: 1115:
    #####: 1116:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1116-block  1
branch  2 never executed
branch  3 never executed
        -: 1117:	{
    #####: 1118:	  return -1;				
    $$$$$: 1118-block  0
        -: 1119:	}
        -: 1120:
    #####: 1121:      if (choice1 == handPos)
    $$$$$: 1121-block  0
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  return -1;
    $$$$$: 1123-block  0
        -: 1124:	}
        -: 1125:
    #####: 1126:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1126-block  0
    $$$$$: 1126-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1126-block  2
        -: 1127:	{
    #####: 1128:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1128-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1128-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1128-block  2
branch  4 never executed
branch  5 never executed
        -: 1129:	    {
    #####: 1130:	      j++;
    #####: 1131:	    }
    $$$$$: 1131-block  0
    #####: 1132:	}
    $$$$$: 1132-block  0
    #####: 1133:      if (j < choice2)
    $$$$$: 1133-block  0
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  return -1;				
    $$$$$: 1135-block  0
        -: 1136:	}
        -: 1137:
        -: 1138:      if (DEBUG) 
        -: 1139:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1140:
        -: 1141:      //increase supply count for choosen card by amount being discarded
    #####: 1142:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1143:			
        -: 1144:      //each other player gains a copy of revealed card
    #####: 1145:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1145-block  0
    $$$$$: 1145-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1145-block  2
        -: 1146:	{
    #####: 1147:	  if (i != currentPlayer)
    $$$$$: 1147-block  0
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1150:	    }
    $$$$$: 1150-block  0
    #####: 1151:	}
    $$$$$: 1151-block  0
        -: 1152:
        -: 1153:      //discard played card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1155:
        -: 1156:      //trash copies of cards returned to supply
    #####: 1157:      for (j = 0; j < choice2; j++)
    $$$$$: 1157-block  0
    $$$$$: 1157-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1157-block  2
        -: 1158:	{
    #####: 1159:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1159-block  0
    $$$$$: 1159-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1159-block  2
        -: 1160:	    {
    #####: 1161:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1161-block  0
branch  0 never executed
branch  1 never executed
        -: 1162:		{
    #####: 1163:		  discardCard(i, currentPlayer, state, 1);
    #####: 1164:		  break;
    $$$$$: 1164-block  0
        -: 1165:		}
    #####: 1166:	    }
    $$$$$: 1166-block  0
    #####: 1167:	}			
    $$$$$: 1167-block  0
        -: 1168:
    #####: 1169:      return 0;
    $$$$$: 1169-block  0
        -: 1170:		
        -: 1171:    case cutpurse:
        -: 1172:
    #####: 1173:      updateCoins(currentPlayer, state, 2);
    #####: 1174:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1174-block  0
    $$$$$: 1174-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1174-block  2
        -: 1175:	{
    #####: 1176:	  if (i != currentPlayer)
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1178-block  0
    $$$$$: 1178-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1178-block  2
        -: 1179:		{
    #####: 1180:		  if (state->hand[i][j] == copper)
    $$$$$: 1180-block  0
branch  0 never executed
branch  1 never executed
        -: 1181:		    {
    #####: 1182:		      discardCard(j, i, state, 0);
    #####: 1183:		      break;
    $$$$$: 1183-block  0
        -: 1184:		    }
    #####: 1185:		  if (j == state->handCount[i])
    $$$$$: 1185-block  0
branch  0 never executed
branch  1 never executed
        -: 1186:		    {
    #####: 1187:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1187-block  0
    $$$$$: 1187-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1187-block  2
        -: 1188:			{
        -: 1189:			  if (DEBUG)
        -: 1190:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1191:			}	
    $$$$$: 1191-block  0
    #####: 1192:		      break;
    $$$$$: 1192-block  0
        -: 1193:		    }		
    #####: 1194:		}
    $$$$$: 1194-block  0
        -: 1195:					
    #####: 1196:	    }
    $$$$$: 1196-block  0
        -: 1197:				
    #####: 1198:	}				
    $$$$$: 1198-block  0
        -: 1199:
        -: 1200:      //discard played card from hand
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1202:
    #####: 1203:      return 0;
    $$$$$: 1203-block  0
        -: 1204:
        -: 1205:		
        -: 1206:    case embargo: 
        -: 1207:      
    #####: 1208:	EmbargoCard(currentPlayer, handPos, state, choice1); 
    #####: 1209:	return 0;
    $$$$$: 1209-block  0
        -: 1210:		
        -: 1211:    case outpost:
        -: 1212:      //set outpost flag
    #####: 1213:      state->outpostPlayed++;
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:      return 0;
    $$$$$: 1217-block  0
        -: 1218:		
        -: 1219:    case salvager:
        -: 1220:      //+1 buy
    #####: 1221:      state->numBuys++;
        -: 1222:			
    #####: 1223:      if (choice1)
    $$$$$: 1223-block  0
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //gain coins equal to trashed card
    #####: 1226:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1227:	  //trash card
    #####: 1228:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1229:	}
    $$$$$: 1229-block  0
        -: 1230:			
        -: 1231:      //discard card
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1233:      return 0;
    $$$$$: 1233-block  0
        -: 1234:		
        -: 1235:    case sea_hag:
    #####: 1236:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1236-block  0
    $$$$$: 1236-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1236-block  2
    #####: 1237:	if (i != currentPlayer){
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    #####: 1238:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1239:	  state->discardCount[i]++;
    #####: 1240:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1241:	}
    $$$$$: 1241-block  0
    #####: 1242:      }
    $$$$$: 1242-block  0
    #####: 1243:      return 0;
    $$$$$: 1243-block  0
        -: 1244:		
        -: 1245:    case treasure_map:
        -: 1246:      //search hand for another treasure_map
    #####: 1247:      index = -1;
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1248-block  0
    $$$$$: 1248-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1248-block  2
        -: 1249:	{
    #####: 1250:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1250-block  1
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      index = i;
    #####: 1253:	      break;
    $$$$$: 1253-block  0
        -: 1254:	    }
    #####: 1255:	}
    $$$$$: 1255-block  0
    #####: 1256:      if (index > -1)
    $$$$$: 1256-block  0
branch  0 never executed
branch  1 never executed
        -: 1257:	{
        -: 1258:	  //trash both treasure cards
    #####: 1259:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1260:	  discardCard(index, currentPlayer, state, 1);
        -: 1261:
        -: 1262:	  //gain 4 Gold cards
    #####: 1263:	  for (i = 0; i < 4; i++)
    $$$$$: 1263-block  0
    $$$$$: 1263-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1263-block  2
        -: 1264:	    {
    #####: 1265:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1266:	    }
    $$$$$: 1266-block  0
        -: 1267:				
        -: 1268:	  //return success
    #####: 1269:	  return 1;
    $$$$$: 1269-block  0
        -: 1270:	}
        -: 1271:			
        -: 1272:      //no second treasure_map found in hand
    #####: 1273:      return -1;
    $$$$$: 1273-block  0
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return -1;
    $$$$$: 1276-block  0
    #####: 1277:}
    $$$$$: 1277-block  0
        -: 1278:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
    #####: 1283:  if (trashFlag < 1)
    $$$$$: 1283-block  0
branch  0 never executed
branch  1 never executed
        -: 1284:    {
        -: 1285:      //add card to played pile
    #####: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1287:      state->playedCardCount++;
    #####: 1288:    }
    $$$$$: 1288-block  0
        -: 1289:	
        -: 1290:  //set played card to -1
    #####: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
    #####: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    $$$$$: 1294-block  0
branch  0 never executed
branch  1 never executed
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
    $$$$$: 1298-block  0
    #####: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    $$$$$: 1299-block  0
branch  0 never executed
branch  1 never executed
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
    $$$$$: 1303-block  0
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
    #####: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
    #####: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
    #####: 1311:      state->handCount[currentPlayer]--;
    $$$$$: 1311-block  0
        -: 1312:    }
        -: 1313:	
    #####: 1314:  return 0;
    $$$$$: 1314-block  0
        -: 1315:}
        -: 1316:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1322-block  0
branch  0 never executed
branch  1 never executed
        -: 1323:    {
    #####: 1324:      return -1;
    $$$$$: 1324-block  0
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
    $$$$$: 1332-block  0
branch  0 never executed
branch  1 never executed
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
    $$$$$: 1336-block  0
    #####: 1337:  else if (toFlag == 2)
    $$$$$: 1337-block  0
branch  0 never executed
branch  1 never executed
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
    #####: 1341:    }
    $$$$$: 1341-block  0
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
    $$$$$: 1345-block  0
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
    $$$$$: 1351-block  0
    #####: 1352:}
    $$$$$: 1352-block  0
        -: 1353:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
        1: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
        6: 1362:  for (i = 0; i < state->handCount[player]; i++)
        1: 1362-block  0
        6: 1362-block  1
branch  0 taken 83%
branch  1 taken 17%
        5: 1362-block  2
        -: 1363:    {
        5: 1364:      if (state->hand[player][i] == copper)
        5: 1364-block  0
branch  0 taken 80%
branch  1 taken 20%
        -: 1365:	{
        4: 1366:	  state->coins += 1;
        4: 1367:	}
        4: 1367-block  0
        1: 1368:      else if (state->hand[player][i] == silver)
        1: 1368-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
    #####: 1371:	}
    $$$$$: 1371-block  0
        1: 1372:      else if (state->hand[player][i] == gold)
        1: 1372-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
    #####: 1375:	}	
    $$$$$: 1375-block  0
        5: 1376:    }	
        5: 1376-block  0
        -: 1377:
        -: 1378:  //add bonus
        1: 1379:  state->coins += bonus;
        -: 1380:
        1: 1381:  return 0;
        1: 1381-block  0
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
----------------- Testing function: fullDeckCount ----------------
TEST 1: Player number invalid (-1) 
fullDeckCount state = 0, expected = 0

TEST 2: x1 adventurer card in player 0's hand and deck
fullDeckCount state = 2, expected = 2

TEST 3: Add x1 adventurer card in player 0's discard pile
fullDeckCount state = 3, expected = 3

 >>>>> Success: Testing complete fullDeckCount <<<<<

File 'dominion.c'
Lines executed:19.33% of 652
Branches executed:20.14% of 417
Taken at least once:16.79% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 56 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
       56:   11:  if (*(int*)a > *(int*)b)
       56:   11-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
    $$$$$:   12-block  0
       56:   13:  if (*(int*)a < *(int*)b)
       56:   13-block  0
branch  0 taken 36%
branch  1 taken 64%
       20:   14:    return -1;
       20:   14-block  0
       36:   15:  return 0;
       36:   15-block  0
       56:   16:}
       56:   16-block  0
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    $$$$$:   19-block  0
    #####:   20:  return g;
    $$$$$:   20-block  0
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
    $$$$$:   36-block  0
        -:   37:}
        -:   38:
function initializeGame called 2 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        2:   46:  SelectStream(1);
        2:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        2:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        2:   50-block  0
branch  0 taken 100%
branch  1 taken 0%
        2:   50-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
    $$$$$:   52-block  0
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        2:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       22:   59:  for (i = 0; i < 10; i++)
        2:   59-block  0
       22:   59-block  1
branch  0 taken 91%
branch  1 taken 9%
       20:   59-block  2
        -:   60:    {
      220:   61:      for (j = 0; j < 10; j++)
       20:   61-block  0
      220:   61-block  1
branch  0 taken 91%
branch  1 taken 9%
      200:   61-block  2
        -:   62:        {
      200:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      200:   63-block  0
branch  0 taken 90%
branch  1 taken 10%
      180:   63-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
    $$$$$:   65-block  0
        -:   66:	    }
      200:   67:        }
      200:   67-block  0
       20:   68:    }
       20:   68-block  0
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        2:   75:  if (numPlayers == 2)
        2:   75-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        2:   77:      state->supplyCount[curse] = 10;
        2:   78:    }
        2:   78-block  0
    #####:   79:  else if (numPlayers == 3)
    $$$$$:   79-block  0
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
    $$$$$:   82-block  0
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
    $$$$$:   85-block  0
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        2:   89:  if (numPlayers == 2)
        2:   89-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        2:   91:      state->supplyCount[estate] = 8;
        2:   92:      state->supplyCount[duchy] = 8;
        2:   93:      state->supplyCount[province] = 8;
        2:   94:    }
        2:   94-block  0
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
    $$$$$:   99-block  0
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        2:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  104:  state->supplyCount[silver] = 40;
        2:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       42:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        2:  108-block  0
       42:  108-block  1
branch  0 taken 95%
branch  1 taken 5%
       40:  108-block  2
        -:  109:    {
      330:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
       40:  110-block  0
      330:  110-block  1
branch  0 taken 94%
branch  1 taken 6%
      290:  110-block  2
        -:  111:	{
      310:  112:	  if (kingdomCards[j] == i)
      310:  112-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       20:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       20:  115-block  0
branch  0 taken 100%
branch  1 taken 0%
       20:  115-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    $$$$$:  117-block  0
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    $$$$$:  119-block  0
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  120-block  0
    #####:  121:		}
    $$$$$:  121-block  0
        -:  122:	      else
        -:  123:		{
       20:  124:		  state->supplyCount[i] = 10;
       20:  124-block  0
        -:  125:		}
       20:  126:	      break;
       20:  126-block  0
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      290:  130:	      state->supplyCount[i] = -1;
      290:  130-block  0
        -:  131:	    }
      290:  132:	}
      290:  132-block  0
        -:  133:
       40:  134:    }
       40:  134-block  0
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        6:  140:  for (i = 0; i < numPlayers; i++)
        2:  140-block  0
        6:  140-block  1
branch  0 taken 67%
branch  1 taken 33%
        4:  140-block  2
        -:  141:    {
        4:  142:      state->deckCount[i] = 0;
       16:  143:      for (j = 0; j < 3; j++)
        4:  143-block  0
       16:  143-block  1
branch  0 taken 75%
branch  1 taken 25%
       12:  143-block  2
        -:  144:	{
       12:  145:	  state->deck[i][j] = estate;
       12:  146:	  state->deckCount[i]++;
       12:  147:	}
       12:  147-block  0
       32:  148:      for (j = 3; j < 10; j++)
        4:  148-block  0
       32:  148-block  1
branch  0 taken 88%
branch  1 taken 13%
       28:  148-block  2
        -:  149:	{
       28:  150:	  state->deck[i][j] = copper;
       28:  151:	  state->deckCount[i]++;		
       28:  152:	}
       28:  152-block  0
        4:  153:    }
        4:  153-block  0
        -:  154:
        -:  155:  //shuffle player decks
        6:  156:  for (i = 0; i < numPlayers; i++)
        2:  156-block  0
        6:  156-block  1
branch  0 taken 67%
branch  1 taken 33%
        4:  156-block  2
        -:  157:    {
        4:  158:      if ( shuffle(i, state) < 0 )
        4:  158-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
    $$$$$:  160-block  0
        -:  161:	}
        4:  162:    }
        4:  162-block  0
        -:  163:
        -:  164:  //draw player hands
        6:  165:  for (i = 0; i < numPlayers; i++)
        2:  165-block  0
        6:  165-block  1
branch  0 taken 67%
branch  1 taken 33%
        4:  165-block  2
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        4:  168:      state->handCount[i] = 0;
        4:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        4:  175:    }
        4:  175-block  0
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       56:  178:  for (i = 0; i <= treasure_map; i++)
        2:  178-block  0
       56:  178-block  1
branch  0 taken 96%
branch  1 taken 4%
       54:  178-block  2
        -:  179:    {
       54:  180:      state->embargoTokens[i] = 0;
       54:  181:    }
       54:  181-block  0
        -:  182:
        -:  183:  //initialize first player's turn
        2:  184:  state->outpostPlayed = 0;
        2:  185:  state->phase = 0;
        2:  186:  state->numActions = 1;
        2:  187:  state->numBuys = 1;
        2:  188:  state->playedCardCount = 0;
        2:  189:  state->whoseTurn = 0;
        2:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       12:  194:  for (it = 0; it < 5; it++){
        2:  194-block  0
       12:  194-block  1
branch  0 taken 83%
branch  1 taken 17%
       10:  194-block  2
       10:  195:    drawCard(state->whoseTurn, state);
       10:  196:  }
       10:  196-block  0
        -:  197:
        2:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        2:  200:  return 0;
        2:  200-block  0
        2:  201:}
        2:  201-block  0
        -:  202:
function shuffle called 4 returned 100% blocks executed 93%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        4:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        4:  211:  if (state->deckCount[player] < 1)
        4:  211-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:    return -1;
    $$$$$:  212-block  0
        4:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       44:  216:  while (state->deckCount[player] > 0) {
        4:  216-block  0
       44:  216-block  1
branch  0 taken 91%
branch  1 taken 9%
       40:  216-block  2
       40:  217:    card = floor(Random() * state->deckCount[player]);
       40:  218:    newDeck[newDeckPos] = state->deck[player][card];
       40:  219:    newDeckPos++;
      140:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
       40:  220-block  0
      140:  220-block  1
branch  0 taken 71%
branch  1 taken 29%
      100:  220-block  2
      100:  221:      state->deck[player][i] = state->deck[player][i+1];
      100:  222:    }
      100:  222-block  0
       40:  223:    state->deckCount[player]--;
        -:  224:  }
       44:  225:  for (i = 0; i < newDeckPos; i++) {
        4:  225-block  0
       44:  225-block  1
branch  0 taken 91%
branch  1 taken 9%
       40:  225-block  2
       40:  226:    state->deck[player][i] = newDeck[i];
       40:  227:    state->deckCount[player]++;
       40:  228:  }
       40:  228-block  0
        -:  229:
        4:  230:  return 0;
        4:  230-block  0
        4:  231:}
        4:  231-block  0
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
    $$$$$:  239-block  0
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
    $$$$$:  241-block  0
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
    $$$$$:  245-block  0
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
    $$$$$:  247-block  0
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
    $$$$$:  254-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  254-block  1
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
    $$$$$:  256-block  0
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  260-block  0
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
    $$$$$:  262-block  0
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    $$$$$:  271-block  0
    #####:  272:}
    $$$$$:  272-block  0
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
    $$$$$:  284-block  0
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    $$$$$:  287-block  0
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  288-block  0
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    $$$$$:  291-block  0
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  292-block  0
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
    $$$$$:  295-block  0
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
    $$$$$:  302-block  0
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
    $$$$$:  310-block  0
    #####:  311:}
    $$$$$:  311-block  0
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  314-block  0
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
    $$$$$:  319-block  0
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
    $$$$$:  323-block  0
        -:  324:}
        -:  325:
function fullDeckCount called 6 returned 100% blocks executed 100%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
        6:  328:  int count = 0;
        -:  329:
       26:  330:  for (i = 0; i < state->deckCount[player]; i++)
        6:  330-block  0
       26:  330-block  1
branch  0 taken 77%
branch  1 taken 23%
       20:  330-block  2
        -:  331:    {
       20:  332:      if (state->deck[player][i] == card) count++;
       20:  332-block  0
branch  0 taken 20%
branch  1 taken 80%
        4:  332-block  1
       20:  333:    }
       20:  333-block  0
        -:  334:
       26:  335:  for (i = 0; i < state->handCount[player]; i++)
        6:  335-block  0
       26:  335-block  1
branch  0 taken 77%
branch  1 taken 23%
       20:  335-block  2
        -:  336:    {
       20:  337:      if (state->hand[player][i] == card) count++;
       20:  337-block  0
branch  0 taken 20%
branch  1 taken 80%
        4:  337-block  1
       20:  338:    }
       20:  338-block  0
        -:  339:
        8:  340:  for (i = 0; i < state->discardCount[player]; i++)
        6:  340-block  0
        8:  340-block  1
branch  0 taken 25%
branch  1 taken 75%
        2:  340-block  2
        -:  341:    {
        2:  342:      if (state->discard[player][i] == card) count++;
        2:  342-block  0
branch  0 taken 100%
branch  1 taken 0%
        2:  342-block  1
        2:  343:    }
        2:  343-block  0
        -:  344:
        6:  345:  return count;
        6:  345-block  0
        -:  346:}
        -:  347:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  348:int whoseTurn(struct gameState *state) {
    #####:  349:  return state->whoseTurn;
    $$$$$:  349-block  0
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  358-block  0
    $$$$$:  358-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  358-block  2
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    $$$$$:  361-block  0
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  365-block  0
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
    $$$$$:  367-block  0
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  369-block  0
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    $$$$$:  382-block  0
    $$$$$:  382-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  382-block  2
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
    $$$$$:  384-block  0
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
    $$$$$:  389-block  0
        -:  390:}
        -:  391:
function isGameOver called 6 returned 100% blocks executed 100%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        6:  397-block  0
branch  0 taken 33%
branch  1 taken 67%
        -:  398:    {
        2:  399:      return 1;
        2:  399-block  0
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        4:  404-block  0
      104:  404-block  1
branch  0 taken 96%
branch  1 taken 4%
      100:  404-block  2
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
      100:  406-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  407:	{
        6:  408:	  j++;
        6:  409:	}
        6:  409-block  0
      100:  410:    }
      100:  410-block  0
        4:  411:  if ( j >= 3)
        4:  411-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  412:    {
        2:  413:      return 1;
        2:  413-block  0
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        2:  416-block  0
        6:  417:}
        6:  417-block  0
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  424-block  0
    $$$$$:  424-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  2
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  430-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  430-block  1
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  431-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  431-block  1
    #####:  432:    }
    $$$$$:  432-block  0
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  435-block  0
    $$$$$:  435-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  2
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  441-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  441-block  1
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  442-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  442-block  1
    #####:  443:    }
    $$$$$:  443-block  0
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  446-block  0
    $$$$$:  446-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  2
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  452-block  1
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  453-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  453-block  1
    #####:  454:    }
    $$$$$:  454-block  0
        -:  455:
    #####:  456:  return score;
    $$$$$:  456-block  0
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  466-block  0
    $$$$$:  466-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  466-block  2
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
    $$$$$:  469-block  0
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
    $$$$$:  472-block  0
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
    $$$$$:  475-block  0
        -:  476:	}
    #####:  477:    }
    $$$$$:  477-block  0
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  481-block  0
    $$$$$:  481-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  481-block  2
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
    $$$$$:  483-block  0
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    $$$$$:  486-block  0
    #####:  487:    }
    $$$$$:  487-block  0
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  492-block  0
    $$$$$:  492-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  2
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  494-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  494-block  1
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    $$$$$:  497-block  0
    #####:  498:    }
    $$$$$:  498-block  0
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  502-block  0
    $$$$$:  502-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  502-block  2
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
    $$$$$:  504-block  0
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    $$$$$:  507-block  0
    #####:  508:    }
    $$$$$:  508-block  0
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  512-block  0
    $$$$$:  512-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  512-block  2
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
    $$$$$:  514-block  0
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
    $$$$$:  517-block  0
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
    $$$$$:  520-block  0
        -:  521:	}
    #####:  522:    }
    $$$$$:  522-block  0
        -:  523:
    #####:  524:  return 0;
    $$$$$:  524-block  0
        -:  525:}
        -:  526:
function drawCard called 10 returned 100% blocks executed 41%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       10:  530:  if (state->deckCount[player] <= 0){//Deck is empty
       10:  530-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
    $$$$$:  535-block  0
    $$$$$:  535-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  535-block  2
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
    $$$$$:  538-block  0
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
    $$$$$:  561-block  0
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
    $$$$$:  562-block  0
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
    $$$$$:  567-block  0
        -:  568:
        -:  569:  else{
       10:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       10:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  578:    state->deckCount[player]--;
       10:  579:    state->handCount[player]++;//Increment hand count
       10:  579-block  0
        -:  580:  }
        -:  581:
       10:  582:  return 0;
       10:  582-block  0
       10:  583:}
       10:  583-block  0
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
    $$$$$:  587-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
    $$$$$:  590-block  0
        -:  591:    case estate:
    #####:  592:      return 2;
    $$$$$:  592-block  0
        -:  593:    case duchy:
    #####:  594:      return 5;
    $$$$$:  594-block  0
        -:  595:    case province:
    #####:  596:      return 8;
    $$$$$:  596-block  0
        -:  597:    case copper:
    #####:  598:      return 0;
    $$$$$:  598-block  0
        -:  599:    case silver:
    #####:  600:      return 3;
    $$$$$:  600-block  0
        -:  601:    case gold:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case adventurer:
    #####:  604:      return 6;
    $$$$$:  604-block  0
        -:  605:    case council_room:
    #####:  606:      return 5;
    $$$$$:  606-block  0
        -:  607:    case feast:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case gardens:
    #####:  610:      return 4;
    $$$$$:  610-block  0
        -:  611:    case mine:
    #####:  612:      return 5;
    $$$$$:  612-block  0
        -:  613:    case remodel:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case smithy:
    #####:  616:      return 4;
    $$$$$:  616-block  0
        -:  617:    case village:
    #####:  618:      return 3;
    $$$$$:  618-block  0
        -:  619:    case baron:
    #####:  620:      return 4;
    $$$$$:  620-block  0
        -:  621:    case great_hall:
    #####:  622:      return 3;
    $$$$$:  622-block  0
        -:  623:    case minion:
    #####:  624:      return 5;
    $$$$$:  624-block  0
        -:  625:    case steward:
    #####:  626:      return 3;
    $$$$$:  626-block  0
        -:  627:    case tribute:
    #####:  628:      return 5;
    $$$$$:  628-block  0
        -:  629:    case ambassador:
    #####:  630:      return 3;
    $$$$$:  630-block  0
        -:  631:    case cutpurse:
    #####:  632:      return 4;
    $$$$$:  632-block  0
        -:  633:    case embargo: 
    #####:  634:      return 2;
    $$$$$:  634-block  0
        -:  635:    case outpost:
    #####:  636:      return 5;
    $$$$$:  636-block  0
        -:  637:    case salvager:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case sea_hag:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    case treasure_map:
    #####:  642:      return 4;
    $$$$$:  642-block  0
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    $$$$$:  645-block  0
    #####:  646:}
    $$$$$:  646-block  0
        -:  647:
        -:  648:
function SmithyCard called 0 returned 0% blocks executed 0%
        -:  649:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  650:
        -:  651:  //+3 Cards
        -:  652:  int i;
    #####:  653:  for (i = 0; i < 5; i++)
    $$$$$:  653-block  0
    $$$$$:  653-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  653-block  2
        -:  654:  {
    #####:  655:      drawCard(currentPlayer, state);
    #####:  656:  }
    $$$$$:  656-block  0
        -:  657:   //discard card from hand
        -:  658:   //discardCard(handPos, currentPlayer, state, 0);
    #####:  659:   return 0;
    $$$$$:  659-block  0
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:
        -:  662:}
        -:  663:
function AdventurerCard called 0 returned 0% blocks executed 0%
        -:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
    #####:  666:  while(drawntreasure<5){
    $$$$$:  666-block  0
    $$$$$:  666-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  666-block  2
    #####:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    $$$$$:  667-block  0
branch  0 never executed
branch  1 never executed
    #####:  668:          shuffle(currentPlayer, state);
    #####:  669:        }
    $$$$$:  669-block  0
    #####:  670:        drawCard(currentPlayer, state);
    #####:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  672:        if (cardDrawn == gold || cardDrawn == silver || cardDrawn == copper)
    $$$$$:  672-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  672-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  672-block  2
branch  4 never executed
branch  5 never executed
    #####:  673:		drawntreasure++;
    $$$$$:  673-block  0
        -:  674:        else{
    #####:  675:          temphand[z]=cardDrawn;
    #####:  676:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:          z++;
    $$$$$:  677-block  0
        -:  678:        }
        -:  679:      }
    #####:  680:      while(z-1>=0){
    $$$$$:  680-block  0
    $$$$$:  680-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  680-block  2
    #####:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:        z=z-1;
        -:  683:      }
        -:  684:
    #####:  685:  return 0;
    $$$$$:  685-block  0
        -:  686:// bug introduced: player is able to draw 5 treasure cards instead of 2. 
        -:  687:}
        -:  688:
        -:  689:
function VillageCard called 0 returned 0% blocks executed 0%
        -:  690:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  691:
        -:  692:   //+1 Card
    #####:  693:   drawCard(currentPlayer, state);
    #####:  694:   drawCard(currentPlayer, state);	
    #####:  695:drawCard(currentPlayer, state);
        -:  696:
        -:  697:   //+2 Actions
    #####:  698:   state->numActions = state->numActions + 10;
        -:  699:  
        -:  700:    //discard played card from hand
    #####:  701:    discardCard(handPos, currentPlayer, state, 0);
        -:  702:
    #####:  703:  return 0; 
    $$$$$:  703-block  0
        -:  704:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1 
        -:  705:}
        -:  706:
function GreatHallCard called 0 returned 0% blocks executed 0%
        -:  707:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  708:
        -:  709:      //+1 Card
    #####:  710:      drawCard(currentPlayer, state);
        -:  711:
        -:  712:      //+1 Actions
    #####:  713:      state->numActions++;
        -:  714:
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
        -:  717:      
    #####:  718:      return 0;   
    $$$$$:  718-block  0
        -:  719:}
        -:  720:
function EmbargoCard called 0 returned 0% blocks executed 0%
        -:  721:int EmbargoCard(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  722:
    #####:  723:	state->coins = state->coins + 20;
        -:  724:
        -:  725:      //see if selected pile is in play
    #####:  726:       if ( state->supplyCount[choice1] == -1 )
    $$$$$:  726-block  0
branch  0 never executed
branch  1 never executed
        -:  727:          {
    #####:  728:             return -1;
    $$$$$:  728-block  0
        -:  729:          }
        -:  730:    
        -:  731:       //add embargo token to selected supply pile
    #####:  732:       state->embargoTokens[choice1]++;
    #####:  733:       state->embargoTokens[choice1]++;  
        -:  734:
        -:  735:      //trash card
    #####:  736:       discardCard(handPos, currentPlayer, state, 1);
        -:  737:
    #####:  738:	return 0; 
    $$$$$:  738-block  0
        -:  739://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
    #####:  740:}
    $$$$$:  740-block  0
        -:  741:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
    #####:  749:  int currentPlayer = whoseTurn(state);
    #####:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
    #####:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
    #####:  754:  int drawntreasure=0;
        -:  755:  int cardDrawn;
    #####:  756:  int z = 0;// this is the counter for the temp hand
    #####:  757:  if (nextPlayer > (state->numPlayers - 1)){
    $$$$$:  757-block  0
branch  0 never executed
branch  1 never executed
    #####:  758:    nextPlayer = 0;
    #####:  759:  }
    $$$$$:  759-block  0
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
    #####:  763:  switch( card ) 
    $$$$$:  763-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  764:    {
        -:  765:    case adventurer:
        -:  766:     
        -:  767:	//call function 
    #####:  768:	AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
    #####:  770:	return 0;
    $$$$$:  770-block  0
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
    $$$$$:  774-block  0
    $$$$$:  774-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  774-block  2
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
    #####:  777:	}
    $$$$$:  777-block  0
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  783-block  0
    $$$$$:  783-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  783-block  2
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
    $$$$$:  785-block  0
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
    #####:  788:	    }
    $$$$$:  788-block  0
    #####:  789:	}
    $$$$$:  789-block  0
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
    $$$$$:  794-block  0
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  799-block  0
    $$$$$:  799-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  799-block  2
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  802:      }
    $$$$$:  802-block  0
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    $$$$$:  808-block  0
    $$$$$:  808-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  808-block  2
    #####:  809:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  809-block  0
branch  0 never executed
branch  1 never executed
        -:  810:	  if (DEBUG)
        -:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
    #####:  816:	}
    $$$$$:  816-block  0
    #####:  817:	else if (state->coins < getCost(choice1)){
    $$$$$:  817-block  0
branch  0 never executed
branch  1 never executed
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
    #####:  823:	}
    $$$$$:  823-block  0
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
    $$$$$:  831-block  0
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  841-block  0
    $$$$$:  841-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  841-block  2
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
    #####:  844:      }
    $$$$$:  844-block  0
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
    $$$$$:  847-block  0
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
    $$$$$:  850-block  0
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  855-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
    $$$$$:  857-block  0
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  860-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  860-block  1
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
    $$$$$:  862-block  0
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  865-block  0
branch  0 never executed
branch  1 never executed
        -:  866:	{
    #####:  867:	  return -1;
    $$$$$:  867-block  0
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  876-block  0
    $$$$$:  876-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  876-block  2
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  878-block  0
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
    $$$$$:  881-block  0
        -:  882:	    }
    #####:  883:	}
    $$$$$:  883-block  0
        -:  884:			
    #####:  885:      return 0;
    $$$$$:  885-block  0
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  890-block  0
branch  0 never executed
branch  1 never executed
        -:  891:	{
    #####:  892:	  return -1;
    $$$$$:  892-block  0
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  901-block  0
    $$$$$:  901-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  901-block  2
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  903-block  0
branch  0 never executed
branch  1 never executed
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
    $$$$$:  906-block  0
        -:  907:	    }
    #####:  908:	}
    $$$$$:  908-block  0
        -:  909:
        -:  910:
    #####:  911:      return 0;
    $$$$$:  911-block  0
        -:  912:		
        -:  913:    case smithy:
    #####:  914:      	SmithyCard(currentPlayer, state, handPos);
    #####:  915:	return 0;
    $$$$$:  915-block  0
        -:  916:		
        -:  917:    case village:
        -:  918:      
    #####:  919:	VillageCard(currentPlayer, state, handPos);
        -:  920:
    #####:  921:	return 0;
    $$$$$:  921-block  0
        -:  922:		
        -:  923:    case baron:
    #####:  924:      state->numBuys++;//Increase buys by 1!
    #####:  925:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  925-block  0
branch  0 never executed
branch  1 never executed
    #####:  926:	int p = 0;//Iterator for hand!
    #####:  927:	int card_not_discarded = 1;//Flag for discard set!
    #####:  928:	while(card_not_discarded){
    $$$$$:  928-block  0
    $$$$$:  928-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  928-block  2
    #####:  929:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  929-block  0
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  931:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  932:	    state->discardCount[currentPlayer]++;
    #####:  933:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  933-block  0
    $$$$$:  933-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  933-block  2
    #####:  934:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  935:	    }
    $$$$$:  935-block  0
    #####:  936:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  937:	    state->handCount[currentPlayer]--;
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
    $$$$$:  939-block  0
    #####:  940:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  940-block  0
branch  0 never executed
branch  1 never executed
        -:  941:	    if(DEBUG) {
        -:  942:	      printf("No estate cards in your hand, invalid choice\n");
        -:  943:	      printf("Must gain an estate if there are any\n");
        -:  944:	    }
    #####:  945:	    if (supplyCount(estate, state) > 0){
    $$$$$:  945-block  0
branch  0 never executed
branch  1 never executed
    #####:  946:	      gainCard(estate, state, 0, currentPlayer);
    #####:  947:	      state->supplyCount[estate]--;//Decrement estates
    #####:  948:	      if (supplyCount(estate, state) == 0){
    $$$$$:  948-block  0
branch  0 never executed
branch  1 never executed
    #####:  949:		isGameOver(state);
    #####:  950:	      }
    $$$$$:  950-block  0
    #####:  951:	    }
    $$$$$:  951-block  0
    #####:  952:	    card_not_discarded = 0;//Exit the loop
    #####:  953:	  }
    $$$$$:  953-block  0
        -:  954:			    
        -:  955:	  else{
    #####:  956:	    p++;//Next card
    $$$$$:  956-block  0
        -:  957:	  }
        -:  958:	}
    #####:  959:      }
    $$$$$:  959-block  0
        -:  960:			    
        -:  961:      else{
    #####:  962:	if (supplyCount(estate, state) > 0){
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
    #####:  963:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  964:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  965:	  if (supplyCount(estate, state) == 0){
    $$$$$:  965-block  0
branch  0 never executed
branch  1 never executed
    #####:  966:	    isGameOver(state);
    #####:  967:	  }
    $$$$$:  967-block  0
    #####:  968:	}
    $$$$$:  968-block  0
        -:  969:      }
        -:  970:	    
        -:  971:      
    #####:  972:      return 0;
    $$$$$:  972-block  0
        -:  973:		
        -:  974:    case great_hall:
        -:  975:      
    #####:  976:	GreatHallCard(currentPlayer, state, handPos);
        -:  977:
    #####:  978:	return 0;
    $$$$$:  978-block  0
        -:  979:		
        -:  980:    case minion:
        -:  981:      //+1 action
    #####:  982:      state->numActions++;
        -:  983:			
        -:  984:      //discard card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
        -:  986:			
    #####:  987:      if (choice1)		//+2 coins
    $$$$$:  987-block  0
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  state->coins = state->coins + 2;
    #####:  990:	}
    $$$$$:  990-block  0
        -:  991:			
    #####:  992:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  992-block  0
branch  0 never executed
branch  1 never executed
        -:  993:	{
        -:  994:	  //discard hand
    #####:  995:	  while(numHandCards(state) > 0)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  995-block  2
        -:  996:	    {
    #####:  997:	      discardCard(handPos, currentPlayer, state, 0);
        -:  998:	    }
        -:  999:				
        -: 1000:	  //draw 4
    #####: 1001:	  for (i = 0; i < 4; i++)
    $$$$$: 1001-block  0
    $$$$$: 1001-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1001-block  2
        -: 1002:	    {
    #####: 1003:	      drawCard(currentPlayer, state);
    #####: 1004:	    }
    $$$$$: 1004-block  0
        -: 1005:				
        -: 1006:	  //other players discard hand and redraw if hand size > 4
    #####: 1007:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1007-block  0
    $$$$$: 1007-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1007-block  2
        -: 1008:	    {
    #####: 1009:	      if (i != currentPlayer)
    $$$$$: 1009-block  0
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  if ( state->handCount[i] > 4 )
    $$$$$: 1011-block  0
branch  0 never executed
branch  1 never executed
        -: 1012:		    {
        -: 1013:		      //discard hand
    #####: 1014:		      while( state->handCount[i] > 0 )
    $$$$$: 1014-block  0
    $$$$$: 1014-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1014-block  2
        -: 1015:			{
    #####: 1016:			  discardCard(handPos, i, state, 0);
        -: 1017:			}
        -: 1018:							
        -: 1019:		      //draw 4
    #####: 1020:		      for (j = 0; j < 4; j++)
    $$$$$: 1020-block  0
    $$$$$: 1020-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1020-block  2
        -: 1021:			{
    #####: 1022:			  drawCard(i, state);
    #####: 1023:			}
    $$$$$: 1023-block  0
    #####: 1024:		    }
    $$$$$: 1024-block  0
    #####: 1025:		}
    $$$$$: 1025-block  0
    #####: 1026:	    }
    $$$$$: 1026-block  0
        -: 1027:				
    #####: 1028:	}
    $$$$$: 1028-block  0
    #####: 1029:      return 0;
    $$$$$: 1029-block  0
        -: 1030:		
        -: 1031:    case steward:
    #####: 1032:      if (choice1 == 1)
    $$$$$: 1032-block  0
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //+2 cards
    #####: 1035:	  drawCard(currentPlayer, state);
    #####: 1036:	  drawCard(currentPlayer, state);
    #####: 1037:	}
    $$$$$: 1037-block  0
    #####: 1038:      else if (choice1 == 2)
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
        -: 1039:	{
        -: 1040:	  //+2 coins
    #####: 1041:	  state->coins = state->coins + 2;
    #####: 1042:	}
    $$$$$: 1042-block  0
        -: 1043:      else
        -: 1044:	{
        -: 1045:	  //trash 2 cards in hand
    #####: 1046:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1047:	  discardCard(choice3, currentPlayer, state, 1);
    $$$$$: 1047-block  0
        -: 1048:	}
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1052:      return 0;
    $$$$$: 1052-block  0
        -: 1053:		
        -: 1054:    case tribute:
    #####: 1055:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
    #####: 1056:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	  state->deckCount[nextPlayer]--;
    #####: 1059:	}
    $$$$$: 1059-block  0
    #####: 1060:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1060-block  0
branch  0 never executed
branch  1 never executed
    #####: 1061:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1062:	  state->discardCount[nextPlayer]--;
    #####: 1063:	}
    $$$$$: 1063-block  0
        -: 1064:	else{
        -: 1065:	  //No Card to Reveal
        -: 1066:	  if (DEBUG){
        -: 1067:	    printf("No cards to reveal\n");
        -: 1068:	  }
        -: 1069:	}
    #####: 1070:      }
    $$$$$: 1070-block  0
        -: 1071:	    
        -: 1072:      else{
    #####: 1073:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    #####: 1074:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1074-block  0
    $$$$$: 1074-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1074-block  2
    #####: 1075:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1076:	    state->deckCount[nextPlayer]++;
    #####: 1077:	    state->discard[nextPlayer][i] = -1;
    #####: 1078:	    state->discardCount[nextPlayer]--;
    #####: 1079:	  }
    $$$$$: 1079-block  0
        -: 1080:			    
    #####: 1081:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1082:	} 
    $$$$$: 1082-block  0
    #####: 1083:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
    #####: 1086:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1088:	state->deckCount[nextPlayer]--;
    $$$$$: 1088-block  0
        -: 1089:      }    
        -: 1090:		       
    #####: 1091:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    #####: 1092:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1093:	state->playedCardCount++;
    #####: 1094:	tributeRevealedCards[1] = -1;
    #####: 1095:      }
    $$$$$: 1095-block  0
        -: 1096:
    #####: 1097:      for (i = 0; i <= 2; i ++){
    $$$$$: 1097-block  0
    $$$$$: 1097-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1097-block  2
    #####: 1098:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1098-block  2
branch  4 never executed
branch  5 never executed
    #####: 1099:	  state->coins += 2;
    #####: 1100:	}
    $$$$$: 1100-block  0
        -: 1101:		    
    #####: 1102:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1102-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1102-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1102-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1102-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1102-block  4
branch  8 never executed
branch  9 never executed
    #####: 1103:	  drawCard(currentPlayer, state);
    #####: 1104:	  drawCard(currentPlayer, state);
    #####: 1105:	}
    $$$$$: 1105-block  0
        -: 1106:	else{//Action Card
    #####: 1107:	  state->numActions = state->numActions + 2;
    $$$$$: 1107-block  0
        -: 1108:	}
    #####: 1109:      }
    $$$$$: 1109-block  0
        -: 1110:	    
    #####: 1111:      return 0;
    $$$$$: 1111-block  0
        -: 1112:		
        -: 1113:    case ambassador:
    #####: 1114:      j = 0;		//used to check if player has enough cards to discard
        -: 1115:
    #####: 1116:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1116-block  1
branch  2 never executed
branch  3 never executed
        -: 1117:	{
    #####: 1118:	  return -1;				
    $$$$$: 1118-block  0
        -: 1119:	}
        -: 1120:
    #####: 1121:      if (choice1 == handPos)
    $$$$$: 1121-block  0
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  return -1;
    $$$$$: 1123-block  0
        -: 1124:	}
        -: 1125:
    #####: 1126:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1126-block  0
    $$$$$: 1126-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1126-block  2
        -: 1127:	{
    #####: 1128:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1128-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1128-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1128-block  2
branch  4 never executed
branch  5 never executed
        -: 1129:	    {
    #####: 1130:	      j++;
    #####: 1131:	    }
    $$$$$: 1131-block  0
    #####: 1132:	}
    $$$$$: 1132-block  0
    #####: 1133:      if (j < choice2)
    $$$$$: 1133-block  0
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  return -1;				
    $$$$$: 1135-block  0
        -: 1136:	}
        -: 1137:
        -: 1138:      if (DEBUG) 
        -: 1139:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1140:
        -: 1141:      //increase supply count for choosen card by amount being discarded
    #####: 1142:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1143:			
        -: 1144:      //each other player gains a copy of revealed card
    #####: 1145:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1145-block  0
    $$$$$: 1145-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1145-block  2
        -: 1146:	{
    #####: 1147:	  if (i != currentPlayer)
    $$$$$: 1147-block  0
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1150:	    }
    $$$$$: 1150-block  0
    #####: 1151:	}
    $$$$$: 1151-block  0
        -: 1152:
        -: 1153:      //discard played card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1155:
        -: 1156:      //trash copies of cards returned to supply
    #####: 1157:      for (j = 0; j < choice2; j++)
    $$$$$: 1157-block  0
    $$$$$: 1157-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1157-block  2
        -: 1158:	{
    #####: 1159:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1159-block  0
    $$$$$: 1159-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1159-block  2
        -: 1160:	    {
    #####: 1161:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1161-block  0
branch  0 never executed
branch  1 never executed
        -: 1162:		{
    #####: 1163:		  discardCard(i, currentPlayer, state, 1);
    #####: 1164:		  break;
    $$$$$: 1164-block  0
        -: 1165:		}
    #####: 1166:	    }
    $$$$$: 1166-block  0
    #####: 1167:	}			
    $$$$$: 1167-block  0
        -: 1168:
    #####: 1169:      return 0;
    $$$$$: 1169-block  0
        -: 1170:		
        -: 1171:    case cutpurse:
        -: 1172:
    #####: 1173:      updateCoins(currentPlayer, state, 2);
    #####: 1174:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1174-block  0
    $$$$$: 1174-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1174-block  2
        -: 1175:	{
    #####: 1176:	  if (i != currentPlayer)
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1178-block  0
    $$$$$: 1178-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1178-block  2
        -: 1179:		{
    #####: 1180:		  if (state->hand[i][j] == copper)
    $$$$$: 1180-block  0
branch  0 never executed
branch  1 never executed
        -: 1181:		    {
    #####: 1182:		      discardCard(j, i, state, 0);
    #####: 1183:		      break;
    $$$$$: 1183-block  0
        -: 1184:		    }
    #####: 1185:		  if (j == state->handCount[i])
    $$$$$: 1185-block  0
branch  0 never executed
branch  1 never executed
        -: 1186:		    {
    #####: 1187:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1187-block  0
    $$$$$: 1187-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1187-block  2
        -: 1188:			{
        -: 1189:			  if (DEBUG)
        -: 1190:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1191:			}	
    $$$$$: 1191-block  0
    #####: 1192:		      break;
    $$$$$: 1192-block  0
        -: 1193:		    }		
    #####: 1194:		}
    $$$$$: 1194-block  0
        -: 1195:					
    #####: 1196:	    }
    $$$$$: 1196-block  0
        -: 1197:				
    #####: 1198:	}				
    $$$$$: 1198-block  0
        -: 1199:
        -: 1200:      //discard played card from hand
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1202:
    #####: 1203:      return 0;
    $$$$$: 1203-block  0
        -: 1204:
        -: 1205:		
        -: 1206:    case embargo: 
        -: 1207:      
    #####: 1208:	EmbargoCard(currentPlayer, handPos, state, choice1); 
    #####: 1209:	return 0;
    $$$$$: 1209-block  0
        -: 1210:		
        -: 1211:    case outpost:
        -: 1212:      //set outpost flag
    #####: 1213:      state->outpostPlayed++;
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:      return 0;
    $$$$$: 1217-block  0
        -: 1218:		
        -: 1219:    case salvager:
        -: 1220:      //+1 buy
    #####: 1221:      state->numBuys++;
        -: 1222:			
    #####: 1223:      if (choice1)
    $$$$$: 1223-block  0
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //gain coins equal to trashed card
    #####: 1226:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1227:	  //trash card
    #####: 1228:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1229:	}
    $$$$$: 1229-block  0
        -: 1230:			
        -: 1231:      //discard card
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1233:      return 0;
    $$$$$: 1233-block  0
        -: 1234:		
        -: 1235:    case sea_hag:
    #####: 1236:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1236-block  0
    $$$$$: 1236-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1236-block  2
    #####: 1237:	if (i != currentPlayer){
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    #####: 1238:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1239:	  state->discardCount[i]++;
    #####: 1240:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1241:	}
    $$$$$: 1241-block  0
    #####: 1242:      }
    $$$$$: 1242-block  0
    #####: 1243:      return 0;
    $$$$$: 1243-block  0
        -: 1244:		
        -: 1245:    case treasure_map:
        -: 1246:      //search hand for another treasure_map
    #####: 1247:      index = -1;
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1248-block  0
    $$$$$: 1248-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1248-block  2
        -: 1249:	{
    #####: 1250:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1250-block  1
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      index = i;
    #####: 1253:	      break;
    $$$$$: 1253-block  0
        -: 1254:	    }
    #####: 1255:	}
    $$$$$: 1255-block  0
    #####: 1256:      if (index > -1)
    $$$$$: 1256-block  0
branch  0 never executed
branch  1 never executed
        -: 1257:	{
        -: 1258:	  //trash both treasure cards
    #####: 1259:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1260:	  discardCard(index, currentPlayer, state, 1);
        -: 1261:
        -: 1262:	  //gain 4 Gold cards
    #####: 1263:	  for (i = 0; i < 4; i++)
    $$$$$: 1263-block  0
    $$$$$: 1263-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1263-block  2
        -: 1264:	    {
    #####: 1265:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1266:	    }
    $$$$$: 1266-block  0
        -: 1267:				
        -: 1268:	  //return success
    #####: 1269:	  return 1;
    $$$$$: 1269-block  0
        -: 1270:	}
        -: 1271:			
        -: 1272:      //no second treasure_map found in hand
    #####: 1273:      return -1;
    $$$$$: 1273-block  0
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return -1;
    $$$$$: 1276-block  0
    #####: 1277:}
    $$$$$: 1277-block  0
        -: 1278:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
    #####: 1283:  if (trashFlag < 1)
    $$$$$: 1283-block  0
branch  0 never executed
branch  1 never executed
        -: 1284:    {
        -: 1285:      //add card to played pile
    #####: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1287:      state->playedCardCount++;
    #####: 1288:    }
    $$$$$: 1288-block  0
        -: 1289:	
        -: 1290:  //set played card to -1
    #####: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
    #####: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    $$$$$: 1294-block  0
branch  0 never executed
branch  1 never executed
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
    $$$$$: 1298-block  0
    #####: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    $$$$$: 1299-block  0
branch  0 never executed
branch  1 never executed
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
    $$$$$: 1303-block  0
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
    #####: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
    #####: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
    #####: 1311:      state->handCount[currentPlayer]--;
    $$$$$: 1311-block  0
        -: 1312:    }
        -: 1313:	
    #####: 1314:  return 0;
    $$$$$: 1314-block  0
        -: 1315:}
        -: 1316:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1322-block  0
branch  0 never executed
branch  1 never executed
        -: 1323:    {
    #####: 1324:      return -1;
    $$$$$: 1324-block  0
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
    $$$$$: 1332-block  0
branch  0 never executed
branch  1 never executed
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
    $$$$$: 1336-block  0
    #####: 1337:  else if (toFlag == 2)
    $$$$$: 1337-block  0
branch  0 never executed
branch  1 never executed
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
    #####: 1341:    }
    $$$$$: 1341-block  0
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
    $$$$$: 1345-block  0
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
    $$$$$: 1351-block  0
    #####: 1352:}
    $$$$$: 1352-block  0
        -: 1353:
function updateCoins called 2 returned 100% blocks executed 85%
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
        2: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       12: 1362:  for (i = 0; i < state->handCount[player]; i++)
        2: 1362-block  0
       12: 1362-block  1
branch  0 taken 83%
branch  1 taken 17%
       10: 1362-block  2
        -: 1363:    {
       10: 1364:      if (state->hand[player][i] == copper)
       10: 1364-block  0
branch  0 taken 80%
branch  1 taken 20%
        -: 1365:	{
        8: 1366:	  state->coins += 1;
        8: 1367:	}
        8: 1367-block  0
        2: 1368:      else if (state->hand[player][i] == silver)
        2: 1368-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
    #####: 1371:	}
    $$$$$: 1371-block  0
        2: 1372:      else if (state->hand[player][i] == gold)
        2: 1372-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
    #####: 1375:	}	
    $$$$$: 1375-block  0
       10: 1376:    }	
       10: 1376-block  0
        -: 1377:
        -: 1378:  //add bonus
        2: 1379:  state->coins += bonus;
        -: 1380:
        2: 1381:  return 0;
        2: 1381-block  0
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
----------------- Testing function: updateCoins ----------------
TEST 1: Player number invalid (-1) 
updateCoins state = 0, expected = 0

TEST 2: Player 0 has 1 copper, 1 silver, and 1 gold 
updateCoins state = 6, expected = 6

TEST 3: Player 0 has 3 cards in hand: 1 copper, 1 silver, 1 gold and 1 bonus  
updateCoins state = 7, expected = 7

 >>>>> Success: Testing complete updateCoins <<<<<

File 'dominion.c'
Lines executed:19.94% of 652
Branches executed:20.14% of 417
Taken at least once:17.27% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 84 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
       84:   11:  if (*(int*)a > *(int*)b)
       84:   11-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
    $$$$$:   12-block  0
       84:   13:  if (*(int*)a < *(int*)b)
       84:   13-block  0
branch  0 taken 36%
branch  1 taken 64%
       30:   14:    return -1;
       30:   14-block  0
       54:   15:  return 0;
       54:   15-block  0
       84:   16:}
       84:   16-block  0
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    $$$$$:   19-block  0
    #####:   20:  return g;
    $$$$$:   20-block  0
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
    $$$$$:   36-block  0
        -:   37:}
        -:   38:
function initializeGame called 3 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        3:   46:  SelectStream(1);
        3:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        3:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        3:   50-block  0
branch  0 taken 100%
branch  1 taken 0%
        3:   50-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
    $$$$$:   52-block  0
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        3:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       33:   59:  for (i = 0; i < 10; i++)
        3:   59-block  0
       33:   59-block  1
branch  0 taken 91%
branch  1 taken 9%
       30:   59-block  2
        -:   60:    {
      330:   61:      for (j = 0; j < 10; j++)
       30:   61-block  0
      330:   61-block  1
branch  0 taken 91%
branch  1 taken 9%
      300:   61-block  2
        -:   62:        {
      300:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      300:   63-block  0
branch  0 taken 90%
branch  1 taken 10%
      270:   63-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
    $$$$$:   65-block  0
        -:   66:	    }
      300:   67:        }
      300:   67-block  0
       30:   68:    }
       30:   68-block  0
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        3:   75:  if (numPlayers == 2)
        3:   75-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        3:   77:      state->supplyCount[curse] = 10;
        3:   78:    }
        3:   78-block  0
    #####:   79:  else if (numPlayers == 3)
    $$$$$:   79-block  0
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
    $$$$$:   82-block  0
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
    $$$$$:   85-block  0
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        3:   89:  if (numPlayers == 2)
        3:   89-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        3:   91:      state->supplyCount[estate] = 8;
        3:   92:      state->supplyCount[duchy] = 8;
        3:   93:      state->supplyCount[province] = 8;
        3:   94:    }
        3:   94-block  0
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
    $$$$$:   99-block  0
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        3:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  104:  state->supplyCount[silver] = 40;
        3:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       63:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        3:  108-block  0
       63:  108-block  1
branch  0 taken 95%
branch  1 taken 5%
       60:  108-block  2
        -:  109:    {
      495:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
       60:  110-block  0
      495:  110-block  1
branch  0 taken 94%
branch  1 taken 6%
      435:  110-block  2
        -:  111:	{
      465:  112:	  if (kingdomCards[j] == i)
      465:  112-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       30:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       30:  115-block  0
branch  0 taken 100%
branch  1 taken 0%
       30:  115-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    $$$$$:  117-block  0
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    $$$$$:  119-block  0
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  120-block  0
    #####:  121:		}
    $$$$$:  121-block  0
        -:  122:	      else
        -:  123:		{
       30:  124:		  state->supplyCount[i] = 10;
       30:  124-block  0
        -:  125:		}
       30:  126:	      break;
       30:  126-block  0
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      435:  130:	      state->supplyCount[i] = -1;
      435:  130-block  0
        -:  131:	    }
      435:  132:	}
      435:  132-block  0
        -:  133:
       60:  134:    }
       60:  134-block  0
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        9:  140:  for (i = 0; i < numPlayers; i++)
        3:  140-block  0
        9:  140-block  1
branch  0 taken 67%
branch  1 taken 33%
        6:  140-block  2
        -:  141:    {
        6:  142:      state->deckCount[i] = 0;
       24:  143:      for (j = 0; j < 3; j++)
        6:  143-block  0
       24:  143-block  1
branch  0 taken 75%
branch  1 taken 25%
       18:  143-block  2
        -:  144:	{
       18:  145:	  state->deck[i][j] = estate;
       18:  146:	  state->deckCount[i]++;
       18:  147:	}
       18:  147-block  0
       48:  148:      for (j = 3; j < 10; j++)
        6:  148-block  0
       48:  148-block  1
branch  0 taken 88%
branch  1 taken 13%
       42:  148-block  2
        -:  149:	{
       42:  150:	  state->deck[i][j] = copper;
       42:  151:	  state->deckCount[i]++;		
       42:  152:	}
       42:  152-block  0
        6:  153:    }
        6:  153-block  0
        -:  154:
        -:  155:  //shuffle player decks
        9:  156:  for (i = 0; i < numPlayers; i++)
        3:  156-block  0
        9:  156-block  1
branch  0 taken 67%
branch  1 taken 33%
        6:  156-block  2
        -:  157:    {
        6:  158:      if ( shuffle(i, state) < 0 )
        6:  158-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
    $$$$$:  160-block  0
        -:  161:	}
        6:  162:    }
        6:  162-block  0
        -:  163:
        -:  164:  //draw player hands
        9:  165:  for (i = 0; i < numPlayers; i++)
        3:  165-block  0
        9:  165-block  1
branch  0 taken 67%
branch  1 taken 33%
        6:  165-block  2
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        6:  168:      state->handCount[i] = 0;
        6:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        6:  175:    }
        6:  175-block  0
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       84:  178:  for (i = 0; i <= treasure_map; i++)
        3:  178-block  0
       84:  178-block  1
branch  0 taken 96%
branch  1 taken 4%
       81:  178-block  2
        -:  179:    {
       81:  180:      state->embargoTokens[i] = 0;
       81:  181:    }
       81:  181-block  0
        -:  182:
        -:  183:  //initialize first player's turn
        3:  184:  state->outpostPlayed = 0;
        3:  185:  state->phase = 0;
        3:  186:  state->numActions = 1;
        3:  187:  state->numBuys = 1;
        3:  188:  state->playedCardCount = 0;
        3:  189:  state->whoseTurn = 0;
        3:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       18:  194:  for (it = 0; it < 5; it++){
        3:  194-block  0
       18:  194-block  1
branch  0 taken 83%
branch  1 taken 17%
       15:  194-block  2
       15:  195:    drawCard(state->whoseTurn, state);
       15:  196:  }
       15:  196-block  0
        -:  197:
        3:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        3:  200:  return 0;
        3:  200-block  0
        3:  201:}
        3:  201-block  0
        -:  202:
function shuffle called 6 returned 100% blocks executed 93%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        6:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        6:  211:  if (state->deckCount[player] < 1)
        6:  211-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:    return -1;
    $$$$$:  212-block  0
        6:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       66:  216:  while (state->deckCount[player] > 0) {
        6:  216-block  0
       66:  216-block  1
branch  0 taken 91%
branch  1 taken 9%
       60:  216-block  2
       60:  217:    card = floor(Random() * state->deckCount[player]);
       60:  218:    newDeck[newDeckPos] = state->deck[player][card];
       60:  219:    newDeckPos++;
      210:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
       60:  220-block  0
      210:  220-block  1
branch  0 taken 71%
branch  1 taken 29%
      150:  220-block  2
      150:  221:      state->deck[player][i] = state->deck[player][i+1];
      150:  222:    }
      150:  222-block  0
       60:  223:    state->deckCount[player]--;
        -:  224:  }
       66:  225:  for (i = 0; i < newDeckPos; i++) {
        6:  225-block  0
       66:  225-block  1
branch  0 taken 91%
branch  1 taken 9%
       60:  225-block  2
       60:  226:    state->deck[player][i] = newDeck[i];
       60:  227:    state->deckCount[player]++;
       60:  228:  }
       60:  228-block  0
        -:  229:
        6:  230:  return 0;
        6:  230-block  0
        6:  231:}
        6:  231-block  0
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
    $$$$$:  239-block  0
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
    $$$$$:  241-block  0
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
    $$$$$:  245-block  0
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
    $$$$$:  247-block  0
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
    $$$$$:  254-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  254-block  1
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
    $$$$$:  256-block  0
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  260-block  0
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
    $$$$$:  262-block  0
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    $$$$$:  271-block  0
    #####:  272:}
    $$$$$:  272-block  0
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
    $$$$$:  284-block  0
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    $$$$$:  287-block  0
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  288-block  0
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    $$$$$:  291-block  0
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  292-block  0
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
    $$$$$:  295-block  0
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
    $$$$$:  302-block  0
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
    $$$$$:  310-block  0
    #####:  311:}
    $$$$$:  311-block  0
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  314-block  0
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
    $$$$$:  319-block  0
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
    $$$$$:  323-block  0
        -:  324:}
        -:  325:
function fullDeckCount called 6 returned 100% blocks executed 100%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
        6:  328:  int count = 0;
        -:  329:
       26:  330:  for (i = 0; i < state->deckCount[player]; i++)
        6:  330-block  0
       26:  330-block  1
branch  0 taken 77%
branch  1 taken 23%
       20:  330-block  2
        -:  331:    {
       20:  332:      if (state->deck[player][i] == card) count++;
       20:  332-block  0
branch  0 taken 20%
branch  1 taken 80%
        4:  332-block  1
       20:  333:    }
       20:  333-block  0
        -:  334:
       26:  335:  for (i = 0; i < state->handCount[player]; i++)
        6:  335-block  0
       26:  335-block  1
branch  0 taken 77%
branch  1 taken 23%
       20:  335-block  2
        -:  336:    {
       20:  337:      if (state->hand[player][i] == card) count++;
       20:  337-block  0
branch  0 taken 20%
branch  1 taken 80%
        4:  337-block  1
       20:  338:    }
       20:  338-block  0
        -:  339:
        8:  340:  for (i = 0; i < state->discardCount[player]; i++)
        6:  340-block  0
        8:  340-block  1
branch  0 taken 25%
branch  1 taken 75%
        2:  340-block  2
        -:  341:    {
        2:  342:      if (state->discard[player][i] == card) count++;
        2:  342-block  0
branch  0 taken 100%
branch  1 taken 0%
        2:  342-block  1
        2:  343:    }
        2:  343-block  0
        -:  344:
        6:  345:  return count;
        6:  345-block  0
        -:  346:}
        -:  347:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  348:int whoseTurn(struct gameState *state) {
    #####:  349:  return state->whoseTurn;
    $$$$$:  349-block  0
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  358-block  0
    $$$$$:  358-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  358-block  2
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    $$$$$:  361-block  0
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  365-block  0
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
    $$$$$:  367-block  0
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  369-block  0
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    $$$$$:  382-block  0
    $$$$$:  382-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  382-block  2
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
    $$$$$:  384-block  0
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
    $$$$$:  389-block  0
        -:  390:}
        -:  391:
function isGameOver called 6 returned 100% blocks executed 100%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        6:  397-block  0
branch  0 taken 33%
branch  1 taken 67%
        -:  398:    {
        2:  399:      return 1;
        2:  399-block  0
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        4:  404-block  0
      104:  404-block  1
branch  0 taken 96%
branch  1 taken 4%
      100:  404-block  2
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
      100:  406-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  407:	{
        6:  408:	  j++;
        6:  409:	}
        6:  409-block  0
      100:  410:    }
      100:  410-block  0
        4:  411:  if ( j >= 3)
        4:  411-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  412:    {
        2:  413:      return 1;
        2:  413-block  0
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        2:  416-block  0
        6:  417:}
        6:  417-block  0
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  424-block  0
    $$$$$:  424-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  2
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  430-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  430-block  1
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  431-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  431-block  1
    #####:  432:    }
    $$$$$:  432-block  0
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  435-block  0
    $$$$$:  435-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  2
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  441-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  441-block  1
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  442-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  442-block  1
    #####:  443:    }
    $$$$$:  443-block  0
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  446-block  0
    $$$$$:  446-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  2
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  452-block  1
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  453-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  453-block  1
    #####:  454:    }
    $$$$$:  454-block  0
        -:  455:
    #####:  456:  return score;
    $$$$$:  456-block  0
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  466-block  0
    $$$$$:  466-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  466-block  2
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
    $$$$$:  469-block  0
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
    $$$$$:  472-block  0
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
    $$$$$:  475-block  0
        -:  476:	}
    #####:  477:    }
    $$$$$:  477-block  0
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  481-block  0
    $$$$$:  481-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  481-block  2
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
    $$$$$:  483-block  0
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    $$$$$:  486-block  0
    #####:  487:    }
    $$$$$:  487-block  0
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  492-block  0
    $$$$$:  492-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  2
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  494-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  494-block  1
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    $$$$$:  497-block  0
    #####:  498:    }
    $$$$$:  498-block  0
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  502-block  0
    $$$$$:  502-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  502-block  2
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
    $$$$$:  504-block  0
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    $$$$$:  507-block  0
    #####:  508:    }
    $$$$$:  508-block  0
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  512-block  0
    $$$$$:  512-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  512-block  2
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
    $$$$$:  514-block  0
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
    $$$$$:  517-block  0
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
    $$$$$:  520-block  0
        -:  521:	}
    #####:  522:    }
    $$$$$:  522-block  0
        -:  523:
    #####:  524:  return 0;
    $$$$$:  524-block  0
        -:  525:}
        -:  526:
function drawCard called 15 returned 100% blocks executed 41%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       15:  530:  if (state->deckCount[player] <= 0){//Deck is empty
       15:  530-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
    $$$$$:  535-block  0
    $$$$$:  535-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  535-block  2
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
    $$$$$:  538-block  0
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
    $$$$$:  561-block  0
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
    $$$$$:  562-block  0
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
    $$$$$:  567-block  0
        -:  568:
        -:  569:  else{
       15:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       15:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  578:    state->deckCount[player]--;
       15:  579:    state->handCount[player]++;//Increment hand count
       15:  579-block  0
        -:  580:  }
        -:  581:
       15:  582:  return 0;
       15:  582-block  0
       15:  583:}
       15:  583-block  0
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
    $$$$$:  587-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
    $$$$$:  590-block  0
        -:  591:    case estate:
    #####:  592:      return 2;
    $$$$$:  592-block  0
        -:  593:    case duchy:
    #####:  594:      return 5;
    $$$$$:  594-block  0
        -:  595:    case province:
    #####:  596:      return 8;
    $$$$$:  596-block  0
        -:  597:    case copper:
    #####:  598:      return 0;
    $$$$$:  598-block  0
        -:  599:    case silver:
    #####:  600:      return 3;
    $$$$$:  600-block  0
        -:  601:    case gold:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case adventurer:
    #####:  604:      return 6;
    $$$$$:  604-block  0
        -:  605:    case council_room:
    #####:  606:      return 5;
    $$$$$:  606-block  0
        -:  607:    case feast:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case gardens:
    #####:  610:      return 4;
    $$$$$:  610-block  0
        -:  611:    case mine:
    #####:  612:      return 5;
    $$$$$:  612-block  0
        -:  613:    case remodel:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case smithy:
    #####:  616:      return 4;
    $$$$$:  616-block  0
        -:  617:    case village:
    #####:  618:      return 3;
    $$$$$:  618-block  0
        -:  619:    case baron:
    #####:  620:      return 4;
    $$$$$:  620-block  0
        -:  621:    case great_hall:
    #####:  622:      return 3;
    $$$$$:  622-block  0
        -:  623:    case minion:
    #####:  624:      return 5;
    $$$$$:  624-block  0
        -:  625:    case steward:
    #####:  626:      return 3;
    $$$$$:  626-block  0
        -:  627:    case tribute:
    #####:  628:      return 5;
    $$$$$:  628-block  0
        -:  629:    case ambassador:
    #####:  630:      return 3;
    $$$$$:  630-block  0
        -:  631:    case cutpurse:
    #####:  632:      return 4;
    $$$$$:  632-block  0
        -:  633:    case embargo: 
    #####:  634:      return 2;
    $$$$$:  634-block  0
        -:  635:    case outpost:
    #####:  636:      return 5;
    $$$$$:  636-block  0
        -:  637:    case salvager:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case sea_hag:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    case treasure_map:
    #####:  642:      return 4;
    $$$$$:  642-block  0
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    $$$$$:  645-block  0
    #####:  646:}
    $$$$$:  646-block  0
        -:  647:
        -:  648:
function SmithyCard called 0 returned 0% blocks executed 0%
        -:  649:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  650:
        -:  651:  //+3 Cards
        -:  652:  int i;
    #####:  653:  for (i = 0; i < 5; i++)
    $$$$$:  653-block  0
    $$$$$:  653-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  653-block  2
        -:  654:  {
    #####:  655:      drawCard(currentPlayer, state);
    #####:  656:  }
    $$$$$:  656-block  0
        -:  657:   //discard card from hand
        -:  658:   //discardCard(handPos, currentPlayer, state, 0);
    #####:  659:   return 0;
    $$$$$:  659-block  0
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:
        -:  662:}
        -:  663:
function AdventurerCard called 0 returned 0% blocks executed 0%
        -:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
    #####:  666:  while(drawntreasure<5){
    $$$$$:  666-block  0
    $$$$$:  666-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  666-block  2
    #####:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    $$$$$:  667-block  0
branch  0 never executed
branch  1 never executed
    #####:  668:          shuffle(currentPlayer, state);
    #####:  669:        }
    $$$$$:  669-block  0
    #####:  670:        drawCard(currentPlayer, state);
    #####:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  672:        if (cardDrawn == gold || cardDrawn == silver || cardDrawn == copper)
    $$$$$:  672-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  672-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  672-block  2
branch  4 never executed
branch  5 never executed
    #####:  673:		drawntreasure++;
    $$$$$:  673-block  0
        -:  674:        else{
    #####:  675:          temphand[z]=cardDrawn;
    #####:  676:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:          z++;
    $$$$$:  677-block  0
        -:  678:        }
        -:  679:      }
    #####:  680:      while(z-1>=0){
    $$$$$:  680-block  0
    $$$$$:  680-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  680-block  2
    #####:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:        z=z-1;
        -:  683:      }
        -:  684:
    #####:  685:  return 0;
    $$$$$:  685-block  0
        -:  686:// bug introduced: player is able to draw 5 treasure cards instead of 2. 
        -:  687:}
        -:  688:
        -:  689:
function VillageCard called 0 returned 0% blocks executed 0%
        -:  690:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  691:
        -:  692:   //+1 Card
    #####:  693:   drawCard(currentPlayer, state);
    #####:  694:   drawCard(currentPlayer, state);	
    #####:  695:drawCard(currentPlayer, state);
        -:  696:
        -:  697:   //+2 Actions
    #####:  698:   state->numActions = state->numActions + 10;
        -:  699:  
        -:  700:    //discard played card from hand
    #####:  701:    discardCard(handPos, currentPlayer, state, 0);
        -:  702:
    #####:  703:  return 0; 
    $$$$$:  703-block  0
        -:  704:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1 
        -:  705:}
        -:  706:
function GreatHallCard called 0 returned 0% blocks executed 0%
        -:  707:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  708:
        -:  709:      //+1 Card
    #####:  710:      drawCard(currentPlayer, state);
        -:  711:
        -:  712:      //+1 Actions
    #####:  713:      state->numActions++;
        -:  714:
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
        -:  717:      
    #####:  718:      return 0;   
    $$$$$:  718-block  0
        -:  719:}
        -:  720:
function EmbargoCard called 0 returned 0% blocks executed 0%
        -:  721:int EmbargoCard(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  722:
    #####:  723:	state->coins = state->coins + 20;
        -:  724:
        -:  725:      //see if selected pile is in play
    #####:  726:       if ( state->supplyCount[choice1] == -1 )
    $$$$$:  726-block  0
branch  0 never executed
branch  1 never executed
        -:  727:          {
    #####:  728:             return -1;
    $$$$$:  728-block  0
        -:  729:          }
        -:  730:    
        -:  731:       //add embargo token to selected supply pile
    #####:  732:       state->embargoTokens[choice1]++;
    #####:  733:       state->embargoTokens[choice1]++;  
        -:  734:
        -:  735:      //trash card
    #####:  736:       discardCard(handPos, currentPlayer, state, 1);
        -:  737:
    #####:  738:	return 0; 
    $$$$$:  738-block  0
        -:  739://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
    #####:  740:}
    $$$$$:  740-block  0
        -:  741:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
    #####:  749:  int currentPlayer = whoseTurn(state);
    #####:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
    #####:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
    #####:  754:  int drawntreasure=0;
        -:  755:  int cardDrawn;
    #####:  756:  int z = 0;// this is the counter for the temp hand
    #####:  757:  if (nextPlayer > (state->numPlayers - 1)){
    $$$$$:  757-block  0
branch  0 never executed
branch  1 never executed
    #####:  758:    nextPlayer = 0;
    #####:  759:  }
    $$$$$:  759-block  0
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
    #####:  763:  switch( card ) 
    $$$$$:  763-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  764:    {
        -:  765:    case adventurer:
        -:  766:     
        -:  767:	//call function 
    #####:  768:	AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
    #####:  770:	return 0;
    $$$$$:  770-block  0
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
    $$$$$:  774-block  0
    $$$$$:  774-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  774-block  2
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
    #####:  777:	}
    $$$$$:  777-block  0
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  783-block  0
    $$$$$:  783-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  783-block  2
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
    $$$$$:  785-block  0
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
    #####:  788:	    }
    $$$$$:  788-block  0
    #####:  789:	}
    $$$$$:  789-block  0
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
    $$$$$:  794-block  0
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  799-block  0
    $$$$$:  799-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  799-block  2
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  802:      }
    $$$$$:  802-block  0
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    $$$$$:  808-block  0
    $$$$$:  808-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  808-block  2
    #####:  809:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  809-block  0
branch  0 never executed
branch  1 never executed
        -:  810:	  if (DEBUG)
        -:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
    #####:  816:	}
    $$$$$:  816-block  0
    #####:  817:	else if (state->coins < getCost(choice1)){
    $$$$$:  817-block  0
branch  0 never executed
branch  1 never executed
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
    #####:  823:	}
    $$$$$:  823-block  0
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
    $$$$$:  831-block  0
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  841-block  0
    $$$$$:  841-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  841-block  2
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
    #####:  844:      }
    $$$$$:  844-block  0
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
    $$$$$:  847-block  0
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
    $$$$$:  850-block  0
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  855-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
    $$$$$:  857-block  0
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  860-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  860-block  1
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
    $$$$$:  862-block  0
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  865-block  0
branch  0 never executed
branch  1 never executed
        -:  866:	{
    #####:  867:	  return -1;
    $$$$$:  867-block  0
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  876-block  0
    $$$$$:  876-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  876-block  2
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  878-block  0
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
    $$$$$:  881-block  0
        -:  882:	    }
    #####:  883:	}
    $$$$$:  883-block  0
        -:  884:			
    #####:  885:      return 0;
    $$$$$:  885-block  0
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  890-block  0
branch  0 never executed
branch  1 never executed
        -:  891:	{
    #####:  892:	  return -1;
    $$$$$:  892-block  0
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  901-block  0
    $$$$$:  901-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  901-block  2
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  903-block  0
branch  0 never executed
branch  1 never executed
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
    $$$$$:  906-block  0
        -:  907:	    }
    #####:  908:	}
    $$$$$:  908-block  0
        -:  909:
        -:  910:
    #####:  911:      return 0;
    $$$$$:  911-block  0
        -:  912:		
        -:  913:    case smithy:
    #####:  914:      	SmithyCard(currentPlayer, state, handPos);
    #####:  915:	return 0;
    $$$$$:  915-block  0
        -:  916:		
        -:  917:    case village:
        -:  918:      
    #####:  919:	VillageCard(currentPlayer, state, handPos);
        -:  920:
    #####:  921:	return 0;
    $$$$$:  921-block  0
        -:  922:		
        -:  923:    case baron:
    #####:  924:      state->numBuys++;//Increase buys by 1!
    #####:  925:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  925-block  0
branch  0 never executed
branch  1 never executed
    #####:  926:	int p = 0;//Iterator for hand!
    #####:  927:	int card_not_discarded = 1;//Flag for discard set!
    #####:  928:	while(card_not_discarded){
    $$$$$:  928-block  0
    $$$$$:  928-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  928-block  2
    #####:  929:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  929-block  0
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  931:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  932:	    state->discardCount[currentPlayer]++;
    #####:  933:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  933-block  0
    $$$$$:  933-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  933-block  2
    #####:  934:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  935:	    }
    $$$$$:  935-block  0
    #####:  936:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  937:	    state->handCount[currentPlayer]--;
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
    $$$$$:  939-block  0
    #####:  940:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  940-block  0
branch  0 never executed
branch  1 never executed
        -:  941:	    if(DEBUG) {
        -:  942:	      printf("No estate cards in your hand, invalid choice\n");
        -:  943:	      printf("Must gain an estate if there are any\n");
        -:  944:	    }
    #####:  945:	    if (supplyCount(estate, state) > 0){
    $$$$$:  945-block  0
branch  0 never executed
branch  1 never executed
    #####:  946:	      gainCard(estate, state, 0, currentPlayer);
    #####:  947:	      state->supplyCount[estate]--;//Decrement estates
    #####:  948:	      if (supplyCount(estate, state) == 0){
    $$$$$:  948-block  0
branch  0 never executed
branch  1 never executed
    #####:  949:		isGameOver(state);
    #####:  950:	      }
    $$$$$:  950-block  0
    #####:  951:	    }
    $$$$$:  951-block  0
    #####:  952:	    card_not_discarded = 0;//Exit the loop
    #####:  953:	  }
    $$$$$:  953-block  0
        -:  954:			    
        -:  955:	  else{
    #####:  956:	    p++;//Next card
    $$$$$:  956-block  0
        -:  957:	  }
        -:  958:	}
    #####:  959:      }
    $$$$$:  959-block  0
        -:  960:			    
        -:  961:      else{
    #####:  962:	if (supplyCount(estate, state) > 0){
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
    #####:  963:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  964:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  965:	  if (supplyCount(estate, state) == 0){
    $$$$$:  965-block  0
branch  0 never executed
branch  1 never executed
    #####:  966:	    isGameOver(state);
    #####:  967:	  }
    $$$$$:  967-block  0
    #####:  968:	}
    $$$$$:  968-block  0
        -:  969:      }
        -:  970:	    
        -:  971:      
    #####:  972:      return 0;
    $$$$$:  972-block  0
        -:  973:		
        -:  974:    case great_hall:
        -:  975:      
    #####:  976:	GreatHallCard(currentPlayer, state, handPos);
        -:  977:
    #####:  978:	return 0;
    $$$$$:  978-block  0
        -:  979:		
        -:  980:    case minion:
        -:  981:      //+1 action
    #####:  982:      state->numActions++;
        -:  983:			
        -:  984:      //discard card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
        -:  986:			
    #####:  987:      if (choice1)		//+2 coins
    $$$$$:  987-block  0
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  state->coins = state->coins + 2;
    #####:  990:	}
    $$$$$:  990-block  0
        -:  991:			
    #####:  992:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  992-block  0
branch  0 never executed
branch  1 never executed
        -:  993:	{
        -:  994:	  //discard hand
    #####:  995:	  while(numHandCards(state) > 0)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  995-block  2
        -:  996:	    {
    #####:  997:	      discardCard(handPos, currentPlayer, state, 0);
        -:  998:	    }
        -:  999:				
        -: 1000:	  //draw 4
    #####: 1001:	  for (i = 0; i < 4; i++)
    $$$$$: 1001-block  0
    $$$$$: 1001-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1001-block  2
        -: 1002:	    {
    #####: 1003:	      drawCard(currentPlayer, state);
    #####: 1004:	    }
    $$$$$: 1004-block  0
        -: 1005:				
        -: 1006:	  //other players discard hand and redraw if hand size > 4
    #####: 1007:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1007-block  0
    $$$$$: 1007-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1007-block  2
        -: 1008:	    {
    #####: 1009:	      if (i != currentPlayer)
    $$$$$: 1009-block  0
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  if ( state->handCount[i] > 4 )
    $$$$$: 1011-block  0
branch  0 never executed
branch  1 never executed
        -: 1012:		    {
        -: 1013:		      //discard hand
    #####: 1014:		      while( state->handCount[i] > 0 )
    $$$$$: 1014-block  0
    $$$$$: 1014-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1014-block  2
        -: 1015:			{
    #####: 1016:			  discardCard(handPos, i, state, 0);
        -: 1017:			}
        -: 1018:							
        -: 1019:		      //draw 4
    #####: 1020:		      for (j = 0; j < 4; j++)
    $$$$$: 1020-block  0
    $$$$$: 1020-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1020-block  2
        -: 1021:			{
    #####: 1022:			  drawCard(i, state);
    #####: 1023:			}
    $$$$$: 1023-block  0
    #####: 1024:		    }
    $$$$$: 1024-block  0
    #####: 1025:		}
    $$$$$: 1025-block  0
    #####: 1026:	    }
    $$$$$: 1026-block  0
        -: 1027:				
    #####: 1028:	}
    $$$$$: 1028-block  0
    #####: 1029:      return 0;
    $$$$$: 1029-block  0
        -: 1030:		
        -: 1031:    case steward:
    #####: 1032:      if (choice1 == 1)
    $$$$$: 1032-block  0
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //+2 cards
    #####: 1035:	  drawCard(currentPlayer, state);
    #####: 1036:	  drawCard(currentPlayer, state);
    #####: 1037:	}
    $$$$$: 1037-block  0
    #####: 1038:      else if (choice1 == 2)
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
        -: 1039:	{
        -: 1040:	  //+2 coins
    #####: 1041:	  state->coins = state->coins + 2;
    #####: 1042:	}
    $$$$$: 1042-block  0
        -: 1043:      else
        -: 1044:	{
        -: 1045:	  //trash 2 cards in hand
    #####: 1046:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1047:	  discardCard(choice3, currentPlayer, state, 1);
    $$$$$: 1047-block  0
        -: 1048:	}
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1052:      return 0;
    $$$$$: 1052-block  0
        -: 1053:		
        -: 1054:    case tribute:
    #####: 1055:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
    #####: 1056:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	  state->deckCount[nextPlayer]--;
    #####: 1059:	}
    $$$$$: 1059-block  0
    #####: 1060:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1060-block  0
branch  0 never executed
branch  1 never executed
    #####: 1061:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1062:	  state->discardCount[nextPlayer]--;
    #####: 1063:	}
    $$$$$: 1063-block  0
        -: 1064:	else{
        -: 1065:	  //No Card to Reveal
        -: 1066:	  if (DEBUG){
        -: 1067:	    printf("No cards to reveal\n");
        -: 1068:	  }
        -: 1069:	}
    #####: 1070:      }
    $$$$$: 1070-block  0
        -: 1071:	    
        -: 1072:      else{
    #####: 1073:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    #####: 1074:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1074-block  0
    $$$$$: 1074-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1074-block  2
    #####: 1075:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1076:	    state->deckCount[nextPlayer]++;
    #####: 1077:	    state->discard[nextPlayer][i] = -1;
    #####: 1078:	    state->discardCount[nextPlayer]--;
    #####: 1079:	  }
    $$$$$: 1079-block  0
        -: 1080:			    
    #####: 1081:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1082:	} 
    $$$$$: 1082-block  0
    #####: 1083:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
    #####: 1086:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1088:	state->deckCount[nextPlayer]--;
    $$$$$: 1088-block  0
        -: 1089:      }    
        -: 1090:		       
    #####: 1091:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    #####: 1092:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1093:	state->playedCardCount++;
    #####: 1094:	tributeRevealedCards[1] = -1;
    #####: 1095:      }
    $$$$$: 1095-block  0
        -: 1096:
    #####: 1097:      for (i = 0; i <= 2; i ++){
    $$$$$: 1097-block  0
    $$$$$: 1097-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1097-block  2
    #####: 1098:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1098-block  2
branch  4 never executed
branch  5 never executed
    #####: 1099:	  state->coins += 2;
    #####: 1100:	}
    $$$$$: 1100-block  0
        -: 1101:		    
    #####: 1102:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1102-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1102-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1102-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1102-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1102-block  4
branch  8 never executed
branch  9 never executed
    #####: 1103:	  drawCard(currentPlayer, state);
    #####: 1104:	  drawCard(currentPlayer, state);
    #####: 1105:	}
    $$$$$: 1105-block  0
        -: 1106:	else{//Action Card
    #####: 1107:	  state->numActions = state->numActions + 2;
    $$$$$: 1107-block  0
        -: 1108:	}
    #####: 1109:      }
    $$$$$: 1109-block  0
        -: 1110:	    
    #####: 1111:      return 0;
    $$$$$: 1111-block  0
        -: 1112:		
        -: 1113:    case ambassador:
    #####: 1114:      j = 0;		//used to check if player has enough cards to discard
        -: 1115:
    #####: 1116:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1116-block  1
branch  2 never executed
branch  3 never executed
        -: 1117:	{
    #####: 1118:	  return -1;				
    $$$$$: 1118-block  0
        -: 1119:	}
        -: 1120:
    #####: 1121:      if (choice1 == handPos)
    $$$$$: 1121-block  0
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  return -1;
    $$$$$: 1123-block  0
        -: 1124:	}
        -: 1125:
    #####: 1126:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1126-block  0
    $$$$$: 1126-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1126-block  2
        -: 1127:	{
    #####: 1128:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1128-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1128-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1128-block  2
branch  4 never executed
branch  5 never executed
        -: 1129:	    {
    #####: 1130:	      j++;
    #####: 1131:	    }
    $$$$$: 1131-block  0
    #####: 1132:	}
    $$$$$: 1132-block  0
    #####: 1133:      if (j < choice2)
    $$$$$: 1133-block  0
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  return -1;				
    $$$$$: 1135-block  0
        -: 1136:	}
        -: 1137:
        -: 1138:      if (DEBUG) 
        -: 1139:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1140:
        -: 1141:      //increase supply count for choosen card by amount being discarded
    #####: 1142:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1143:			
        -: 1144:      //each other player gains a copy of revealed card
    #####: 1145:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1145-block  0
    $$$$$: 1145-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1145-block  2
        -: 1146:	{
    #####: 1147:	  if (i != currentPlayer)
    $$$$$: 1147-block  0
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1150:	    }
    $$$$$: 1150-block  0
    #####: 1151:	}
    $$$$$: 1151-block  0
        -: 1152:
        -: 1153:      //discard played card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1155:
        -: 1156:      //trash copies of cards returned to supply
    #####: 1157:      for (j = 0; j < choice2; j++)
    $$$$$: 1157-block  0
    $$$$$: 1157-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1157-block  2
        -: 1158:	{
    #####: 1159:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1159-block  0
    $$$$$: 1159-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1159-block  2
        -: 1160:	    {
    #####: 1161:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1161-block  0
branch  0 never executed
branch  1 never executed
        -: 1162:		{
    #####: 1163:		  discardCard(i, currentPlayer, state, 1);
    #####: 1164:		  break;
    $$$$$: 1164-block  0
        -: 1165:		}
    #####: 1166:	    }
    $$$$$: 1166-block  0
    #####: 1167:	}			
    $$$$$: 1167-block  0
        -: 1168:
    #####: 1169:      return 0;
    $$$$$: 1169-block  0
        -: 1170:		
        -: 1171:    case cutpurse:
        -: 1172:
    #####: 1173:      updateCoins(currentPlayer, state, 2);
    #####: 1174:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1174-block  0
    $$$$$: 1174-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1174-block  2
        -: 1175:	{
    #####: 1176:	  if (i != currentPlayer)
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1178-block  0
    $$$$$: 1178-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1178-block  2
        -: 1179:		{
    #####: 1180:		  if (state->hand[i][j] == copper)
    $$$$$: 1180-block  0
branch  0 never executed
branch  1 never executed
        -: 1181:		    {
    #####: 1182:		      discardCard(j, i, state, 0);
    #####: 1183:		      break;
    $$$$$: 1183-block  0
        -: 1184:		    }
    #####: 1185:		  if (j == state->handCount[i])
    $$$$$: 1185-block  0
branch  0 never executed
branch  1 never executed
        -: 1186:		    {
    #####: 1187:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1187-block  0
    $$$$$: 1187-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1187-block  2
        -: 1188:			{
        -: 1189:			  if (DEBUG)
        -: 1190:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1191:			}	
    $$$$$: 1191-block  0
    #####: 1192:		      break;
    $$$$$: 1192-block  0
        -: 1193:		    }		
    #####: 1194:		}
    $$$$$: 1194-block  0
        -: 1195:					
    #####: 1196:	    }
    $$$$$: 1196-block  0
        -: 1197:				
    #####: 1198:	}				
    $$$$$: 1198-block  0
        -: 1199:
        -: 1200:      //discard played card from hand
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1202:
    #####: 1203:      return 0;
    $$$$$: 1203-block  0
        -: 1204:
        -: 1205:		
        -: 1206:    case embargo: 
        -: 1207:      
    #####: 1208:	EmbargoCard(currentPlayer, handPos, state, choice1); 
    #####: 1209:	return 0;
    $$$$$: 1209-block  0
        -: 1210:		
        -: 1211:    case outpost:
        -: 1212:      //set outpost flag
    #####: 1213:      state->outpostPlayed++;
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:      return 0;
    $$$$$: 1217-block  0
        -: 1218:		
        -: 1219:    case salvager:
        -: 1220:      //+1 buy
    #####: 1221:      state->numBuys++;
        -: 1222:			
    #####: 1223:      if (choice1)
    $$$$$: 1223-block  0
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //gain coins equal to trashed card
    #####: 1226:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1227:	  //trash card
    #####: 1228:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1229:	}
    $$$$$: 1229-block  0
        -: 1230:			
        -: 1231:      //discard card
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1233:      return 0;
    $$$$$: 1233-block  0
        -: 1234:		
        -: 1235:    case sea_hag:
    #####: 1236:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1236-block  0
    $$$$$: 1236-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1236-block  2
    #####: 1237:	if (i != currentPlayer){
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    #####: 1238:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1239:	  state->discardCount[i]++;
    #####: 1240:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1241:	}
    $$$$$: 1241-block  0
    #####: 1242:      }
    $$$$$: 1242-block  0
    #####: 1243:      return 0;
    $$$$$: 1243-block  0
        -: 1244:		
        -: 1245:    case treasure_map:
        -: 1246:      //search hand for another treasure_map
    #####: 1247:      index = -1;
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1248-block  0
    $$$$$: 1248-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1248-block  2
        -: 1249:	{
    #####: 1250:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1250-block  1
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      index = i;
    #####: 1253:	      break;
    $$$$$: 1253-block  0
        -: 1254:	    }
    #####: 1255:	}
    $$$$$: 1255-block  0
    #####: 1256:      if (index > -1)
    $$$$$: 1256-block  0
branch  0 never executed
branch  1 never executed
        -: 1257:	{
        -: 1258:	  //trash both treasure cards
    #####: 1259:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1260:	  discardCard(index, currentPlayer, state, 1);
        -: 1261:
        -: 1262:	  //gain 4 Gold cards
    #####: 1263:	  for (i = 0; i < 4; i++)
    $$$$$: 1263-block  0
    $$$$$: 1263-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1263-block  2
        -: 1264:	    {
    #####: 1265:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1266:	    }
    $$$$$: 1266-block  0
        -: 1267:				
        -: 1268:	  //return success
    #####: 1269:	  return 1;
    $$$$$: 1269-block  0
        -: 1270:	}
        -: 1271:			
        -: 1272:      //no second treasure_map found in hand
    #####: 1273:      return -1;
    $$$$$: 1273-block  0
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return -1;
    $$$$$: 1276-block  0
    #####: 1277:}
    $$$$$: 1277-block  0
        -: 1278:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
    #####: 1283:  if (trashFlag < 1)
    $$$$$: 1283-block  0
branch  0 never executed
branch  1 never executed
        -: 1284:    {
        -: 1285:      //add card to played pile
    #####: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1287:      state->playedCardCount++;
    #####: 1288:    }
    $$$$$: 1288-block  0
        -: 1289:	
        -: 1290:  //set played card to -1
    #####: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
    #####: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    $$$$$: 1294-block  0
branch  0 never executed
branch  1 never executed
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
    $$$$$: 1298-block  0
    #####: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    $$$$$: 1299-block  0
branch  0 never executed
branch  1 never executed
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
    $$$$$: 1303-block  0
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
    #####: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
    #####: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
    #####: 1311:      state->handCount[currentPlayer]--;
    $$$$$: 1311-block  0
        -: 1312:    }
        -: 1313:	
    #####: 1314:  return 0;
    $$$$$: 1314-block  0
        -: 1315:}
        -: 1316:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1322-block  0
branch  0 never executed
branch  1 never executed
        -: 1323:    {
    #####: 1324:      return -1;
    $$$$$: 1324-block  0
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
    $$$$$: 1332-block  0
branch  0 never executed
branch  1 never executed
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
    $$$$$: 1336-block  0
    #####: 1337:  else if (toFlag == 2)
    $$$$$: 1337-block  0
branch  0 never executed
branch  1 never executed
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
    #####: 1341:    }
    $$$$$: 1341-block  0
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
    $$$$$: 1345-block  0
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
    $$$$$: 1351-block  0
    #####: 1352:}
    $$$$$: 1352-block  0
        -: 1353:
function updateCoins called 6 returned 100% blocks executed 100%
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
        6: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       27: 1362:  for (i = 0; i < state->handCount[player]; i++)
        6: 1362-block  0
       27: 1362-block  1
branch  0 taken 78%
branch  1 taken 22%
       21: 1362-block  2
        -: 1363:    {
       21: 1364:      if (state->hand[player][i] == copper)
       21: 1364-block  0
branch  0 taken 67%
branch  1 taken 33%
        -: 1365:	{
       14: 1366:	  state->coins += 1;
       14: 1367:	}
       14: 1367-block  0
        7: 1368:      else if (state->hand[player][i] == silver)
        7: 1368-block  0
branch  0 taken 29%
branch  1 taken 71%
        -: 1369:	{
        2: 1370:	  state->coins += 2;
        2: 1371:	}
        2: 1371-block  0
        5: 1372:      else if (state->hand[player][i] == gold)
        5: 1372-block  0
branch  0 taken 40%
branch  1 taken 60%
        -: 1373:	{
        2: 1374:	  state->coins += 3;
        2: 1375:	}	
        2: 1375-block  0
       21: 1376:    }	
       21: 1376-block  0
        -: 1377:
        -: 1378:  //add bonus
        6: 1379:  state->coins += bonus;
        -: 1380:
        6: 1381:  return 0;
        6: 1381-block  0
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:

TEST 2: Shuffle results in same number of cards 
deckCount[player] state = 5, expected = 5

TEST 3: Zero cards the player's deck 
shuffle state = -1, expected = -1

TEST 4: Make sure the cards are shuffled 
shuffle state = 0, expected = 0

 >>>>> Success: Testing complete shuffle <<<<<

File 'dominion.c'
Lines executed:20.09% of 652
Branches executed:20.14% of 417
Taken at least once:17.51% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 124 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
      124:   11:  if (*(int*)a > *(int*)b)
      124:   11-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
    $$$$$:   12-block  0
      124:   13:  if (*(int*)a < *(int*)b)
      124:   13-block  0
branch  0 taken 35%
branch  1 taken 65%
       43:   14:    return -1;
       43:   14-block  0
       81:   15:  return 0;
       81:   15-block  0
      124:   16:}
      124:   16-block  0
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    $$$$$:   19-block  0
    #####:   20:  return g;
    $$$$$:   20-block  0
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
    $$$$$:   36-block  0
        -:   37:}
        -:   38:
function initializeGame called 4 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        4:   46:  SelectStream(1);
        4:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        4:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        4:   50-block  0
branch  0 taken 100%
branch  1 taken 0%
        4:   50-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
    $$$$$:   52-block  0
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        4:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       44:   59:  for (i = 0; i < 10; i++)
        4:   59-block  0
       44:   59-block  1
branch  0 taken 91%
branch  1 taken 9%
       40:   59-block  2
        -:   60:    {
      440:   61:      for (j = 0; j < 10; j++)
       40:   61-block  0
      440:   61-block  1
branch  0 taken 91%
branch  1 taken 9%
      400:   61-block  2
        -:   62:        {
      400:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      400:   63-block  0
branch  0 taken 90%
branch  1 taken 10%
      360:   63-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
    $$$$$:   65-block  0
        -:   66:	    }
      400:   67:        }
      400:   67-block  0
       40:   68:    }
       40:   68-block  0
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        4:   75:  if (numPlayers == 2)
        4:   75-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        4:   77:      state->supplyCount[curse] = 10;
        4:   78:    }
        4:   78-block  0
    #####:   79:  else if (numPlayers == 3)
    $$$$$:   79-block  0
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
    $$$$$:   82-block  0
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
    $$$$$:   85-block  0
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        4:   89:  if (numPlayers == 2)
        4:   89-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        4:   91:      state->supplyCount[estate] = 8;
        4:   92:      state->supplyCount[duchy] = 8;
        4:   93:      state->supplyCount[province] = 8;
        4:   94:    }
        4:   94-block  0
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
    $$$$$:   99-block  0
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        4:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  104:  state->supplyCount[silver] = 40;
        4:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       84:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        4:  108-block  0
       84:  108-block  1
branch  0 taken 95%
branch  1 taken 5%
       80:  108-block  2
        -:  109:    {
      660:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
       80:  110-block  0
      660:  110-block  1
branch  0 taken 94%
branch  1 taken 6%
      580:  110-block  2
        -:  111:	{
      620:  112:	  if (kingdomCards[j] == i)
      620:  112-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       40:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       40:  115-block  0
branch  0 taken 100%
branch  1 taken 0%
       40:  115-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    $$$$$:  117-block  0
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    $$$$$:  119-block  0
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  120-block  0
    #####:  121:		}
    $$$$$:  121-block  0
        -:  122:	      else
        -:  123:		{
       40:  124:		  state->supplyCount[i] = 10;
       40:  124-block  0
        -:  125:		}
       40:  126:	      break;
       40:  126-block  0
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      580:  130:	      state->supplyCount[i] = -1;
      580:  130-block  0
        -:  131:	    }
      580:  132:	}
      580:  132-block  0
        -:  133:
       80:  134:    }
       80:  134-block  0
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       12:  140:  for (i = 0; i < numPlayers; i++)
        4:  140-block  0
       12:  140-block  1
branch  0 taken 67%
branch  1 taken 33%
        8:  140-block  2
        -:  141:    {
        8:  142:      state->deckCount[i] = 0;
       32:  143:      for (j = 0; j < 3; j++)
        8:  143-block  0
       32:  143-block  1
branch  0 taken 75%
branch  1 taken 25%
       24:  143-block  2
        -:  144:	{
       24:  145:	  state->deck[i][j] = estate;
       24:  146:	  state->deckCount[i]++;
       24:  147:	}
       24:  147-block  0
       64:  148:      for (j = 3; j < 10; j++)
        8:  148-block  0
       64:  148-block  1
branch  0 taken 88%
branch  1 taken 13%
       56:  148-block  2
        -:  149:	{
       56:  150:	  state->deck[i][j] = copper;
       56:  151:	  state->deckCount[i]++;		
       56:  152:	}
       56:  152-block  0
        8:  153:    }
        8:  153-block  0
        -:  154:
        -:  155:  //shuffle player decks
       12:  156:  for (i = 0; i < numPlayers; i++)
        4:  156-block  0
       12:  156-block  1
branch  0 taken 67%
branch  1 taken 33%
        8:  156-block  2
        -:  157:    {
        8:  158:      if ( shuffle(i, state) < 0 )
        8:  158-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
    $$$$$:  160-block  0
        -:  161:	}
        8:  162:    }
        8:  162-block  0
        -:  163:
        -:  164:  //draw player hands
       12:  165:  for (i = 0; i < numPlayers; i++)
        4:  165-block  0
       12:  165-block  1
branch  0 taken 67%
branch  1 taken 33%
        8:  165-block  2
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        8:  168:      state->handCount[i] = 0;
        8:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        8:  175:    }
        8:  175-block  0
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      112:  178:  for (i = 0; i <= treasure_map; i++)
        4:  178-block  0
      112:  178-block  1
branch  0 taken 96%
branch  1 taken 4%
      108:  178-block  2
        -:  179:    {
      108:  180:      state->embargoTokens[i] = 0;
      108:  181:    }
      108:  181-block  0
        -:  182:
        -:  183:  //initialize first player's turn
        4:  184:  state->outpostPlayed = 0;
        4:  185:  state->phase = 0;
        4:  186:  state->numActions = 1;
        4:  187:  state->numBuys = 1;
        4:  188:  state->playedCardCount = 0;
        4:  189:  state->whoseTurn = 0;
        4:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       24:  194:  for (it = 0; it < 5; it++){
        4:  194-block  0
       24:  194-block  1
branch  0 taken 83%
branch  1 taken 17%
       20:  194-block  2
       20:  195:    drawCard(state->whoseTurn, state);
       20:  196:  }
       20:  196-block  0
        -:  197:
        4:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        4:  200:  return 0;
        4:  200-block  0
        4:  201:}
        4:  201-block  0
        -:  202:
function shuffle called 13 returned 100% blocks executed 100%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       13:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       13:  211:  if (state->deckCount[player] < 1)
       13:  211-block  0
branch  0 taken 15%
branch  1 taken 85%
        2:  212:    return -1;
        2:  212-block  0
       11:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      106:  216:  while (state->deckCount[player] > 0) {
       11:  216-block  0
      106:  216-block  1
branch  0 taken 90%
branch  1 taken 10%
       95:  216-block  2
       95:  217:    card = floor(Random() * state->deckCount[player]);
       95:  218:    newDeck[newDeckPos] = state->deck[player][card];
       95:  219:    newDeckPos++;
      311:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
       95:  220-block  0
      311:  220-block  1
branch  0 taken 69%
branch  1 taken 31%
      216:  220-block  2
      216:  221:      state->deck[player][i] = state->deck[player][i+1];
      216:  222:    }
      216:  222-block  0
       95:  223:    state->deckCount[player]--;
        -:  224:  }
      106:  225:  for (i = 0; i < newDeckPos; i++) {
       11:  225-block  0
      106:  225-block  1
branch  0 taken 90%
branch  1 taken 10%
       95:  225-block  2
       95:  226:    state->deck[player][i] = newDeck[i];
       95:  227:    state->deckCount[player]++;
       95:  228:  }
       95:  228-block  0
        -:  229:
       11:  230:  return 0;
       11:  230-block  0
       13:  231:}
       13:  231-block  0
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
    $$$$$:  239-block  0
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
    $$$$$:  241-block  0
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
    $$$$$:  245-block  0
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
    $$$$$:  247-block  0
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
    $$$$$:  254-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  254-block  1
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
    $$$$$:  256-block  0
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  260-block  0
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
    $$$$$:  262-block  0
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    $$$$$:  271-block  0
    #####:  272:}
    $$$$$:  272-block  0
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
    $$$$$:  284-block  0
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    $$$$$:  287-block  0
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  288-block  0
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    $$$$$:  291-block  0
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  292-block  0
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
    $$$$$:  295-block  0
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
    $$$$$:  302-block  0
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
    $$$$$:  310-block  0
    #####:  311:}
    $$$$$:  311-block  0
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  314-block  0
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
    $$$$$:  319-block  0
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
    $$$$$:  323-block  0
        -:  324:}
        -:  325:
function fullDeckCount called 6 returned 100% blocks executed 100%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
        6:  328:  int count = 0;
        -:  329:
       26:  330:  for (i = 0; i < state->deckCount[player]; i++)
        6:  330-block  0
       26:  330-block  1
branch  0 taken 77%
branch  1 taken 23%
       20:  330-block  2
        -:  331:    {
       20:  332:      if (state->deck[player][i] == card) count++;
       20:  332-block  0
branch  0 taken 20%
branch  1 taken 80%
        4:  332-block  1
       20:  333:    }
       20:  333-block  0
        -:  334:
       26:  335:  for (i = 0; i < state->handCount[player]; i++)
        6:  335-block  0
       26:  335-block  1
branch  0 taken 77%
branch  1 taken 23%
       20:  335-block  2
        -:  336:    {
       20:  337:      if (state->hand[player][i] == card) count++;
       20:  337-block  0
branch  0 taken 20%
branch  1 taken 80%
        4:  337-block  1
       20:  338:    }
       20:  338-block  0
        -:  339:
        8:  340:  for (i = 0; i < state->discardCount[player]; i++)
        6:  340-block  0
        8:  340-block  1
branch  0 taken 25%
branch  1 taken 75%
        2:  340-block  2
        -:  341:    {
        2:  342:      if (state->discard[player][i] == card) count++;
        2:  342-block  0
branch  0 taken 100%
branch  1 taken 0%
        2:  342-block  1
        2:  343:    }
        2:  343-block  0
        -:  344:
        6:  345:  return count;
        6:  345-block  0
        -:  346:}
        -:  347:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  348:int whoseTurn(struct gameState *state) {
    #####:  349:  return state->whoseTurn;
    $$$$$:  349-block  0
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  358-block  0
    $$$$$:  358-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  358-block  2
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    $$$$$:  361-block  0
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  365-block  0
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
    $$$$$:  367-block  0
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  369-block  0
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    $$$$$:  382-block  0
    $$$$$:  382-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  382-block  2
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
    $$$$$:  384-block  0
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
    $$$$$:  389-block  0
        -:  390:}
        -:  391:
function isGameOver called 6 returned 100% blocks executed 100%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        6:  397-block  0
branch  0 taken 33%
branch  1 taken 67%
        -:  398:    {
        2:  399:      return 1;
        2:  399-block  0
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        4:  404-block  0
      104:  404-block  1
branch  0 taken 96%
branch  1 taken 4%
      100:  404-block  2
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
      100:  406-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  407:	{
        6:  408:	  j++;
        6:  409:	}
        6:  409-block  0
      100:  410:    }
      100:  410-block  0
        4:  411:  if ( j >= 3)
        4:  411-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  412:    {
        2:  413:      return 1;
        2:  413-block  0
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        2:  416-block  0
        6:  417:}
        6:  417-block  0
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  424-block  0
    $$$$$:  424-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  2
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  430-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  430-block  1
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  431-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  431-block  1
    #####:  432:    }
    $$$$$:  432-block  0
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  435-block  0
    $$$$$:  435-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  2
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  441-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  441-block  1
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  442-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  442-block  1
    #####:  443:    }
    $$$$$:  443-block  0
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  446-block  0
    $$$$$:  446-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  2
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  452-block  1
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  453-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  453-block  1
    #####:  454:    }
    $$$$$:  454-block  0
        -:  455:
    #####:  456:  return score;
    $$$$$:  456-block  0
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  466-block  0
    $$$$$:  466-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  466-block  2
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
    $$$$$:  469-block  0
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
    $$$$$:  472-block  0
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
    $$$$$:  475-block  0
        -:  476:	}
    #####:  477:    }
    $$$$$:  477-block  0
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  481-block  0
    $$$$$:  481-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  481-block  2
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
    $$$$$:  483-block  0
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    $$$$$:  486-block  0
    #####:  487:    }
    $$$$$:  487-block  0
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  492-block  0
    $$$$$:  492-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  2
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  494-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  494-block  1
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    $$$$$:  497-block  0
    #####:  498:    }
    $$$$$:  498-block  0
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  502-block  0
    $$$$$:  502-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  502-block  2
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
    $$$$$:  504-block  0
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    $$$$$:  507-block  0
    #####:  508:    }
    $$$$$:  508-block  0
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  512-block  0
    $$$$$:  512-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  512-block  2
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
    $$$$$:  514-block  0
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
    $$$$$:  517-block  0
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
    $$$$$:  520-block  0
        -:  521:	}
    #####:  522:    }
    $$$$$:  522-block  0
        -:  523:
    #####:  524:  return 0;
    $$$$$:  524-block  0
        -:  525:}
        -:  526:
function drawCard called 20 returned 100% blocks executed 41%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       20:  530:  if (state->deckCount[player] <= 0){//Deck is empty
       20:  530-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
    $$$$$:  535-block  0
    $$$$$:  535-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  535-block  2
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
    $$$$$:  538-block  0
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
    $$$$$:  561-block  0
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
    $$$$$:  562-block  0
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
    $$$$$:  567-block  0
        -:  568:
        -:  569:  else{
       20:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       20:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  578:    state->deckCount[player]--;
       20:  579:    state->handCount[player]++;//Increment hand count
       20:  579-block  0
        -:  580:  }
        -:  581:
       20:  582:  return 0;
       20:  582-block  0
       20:  583:}
       20:  583-block  0
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
    $$$$$:  587-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
    $$$$$:  590-block  0
        -:  591:    case estate:
    #####:  592:      return 2;
    $$$$$:  592-block  0
        -:  593:    case duchy:
    #####:  594:      return 5;
    $$$$$:  594-block  0
        -:  595:    case province:
    #####:  596:      return 8;
    $$$$$:  596-block  0
        -:  597:    case copper:
    #####:  598:      return 0;
    $$$$$:  598-block  0
        -:  599:    case silver:
    #####:  600:      return 3;
    $$$$$:  600-block  0
        -:  601:    case gold:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case adventurer:
    #####:  604:      return 6;
    $$$$$:  604-block  0
        -:  605:    case council_room:
    #####:  606:      return 5;
    $$$$$:  606-block  0
        -:  607:    case feast:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case gardens:
    #####:  610:      return 4;
    $$$$$:  610-block  0
        -:  611:    case mine:
    #####:  612:      return 5;
    $$$$$:  612-block  0
        -:  613:    case remodel:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case smithy:
    #####:  616:      return 4;
    $$$$$:  616-block  0
        -:  617:    case village:
    #####:  618:      return 3;
    $$$$$:  618-block  0
        -:  619:    case baron:
    #####:  620:      return 4;
    $$$$$:  620-block  0
        -:  621:    case great_hall:
    #####:  622:      return 3;
    $$$$$:  622-block  0
        -:  623:    case minion:
    #####:  624:      return 5;
    $$$$$:  624-block  0
        -:  625:    case steward:
    #####:  626:      return 3;
    $$$$$:  626-block  0
        -:  627:    case tribute:
    #####:  628:      return 5;
    $$$$$:  628-block  0
        -:  629:    case ambassador:
    #####:  630:      return 3;
    $$$$$:  630-block  0
        -:  631:    case cutpurse:
    #####:  632:      return 4;
    $$$$$:  632-block  0
        -:  633:    case embargo: 
    #####:  634:      return 2;
    $$$$$:  634-block  0
        -:  635:    case outpost:
    #####:  636:      return 5;
    $$$$$:  636-block  0
        -:  637:    case salvager:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case sea_hag:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    case treasure_map:
    #####:  642:      return 4;
    $$$$$:  642-block  0
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    $$$$$:  645-block  0
    #####:  646:}
    $$$$$:  646-block  0
        -:  647:
        -:  648:
function SmithyCard called 0 returned 0% blocks executed 0%
        -:  649:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  650:
        -:  651:  //+3 Cards
        -:  652:  int i;
    #####:  653:  for (i = 0; i < 5; i++)
    $$$$$:  653-block  0
    $$$$$:  653-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  653-block  2
        -:  654:  {
    #####:  655:      drawCard(currentPlayer, state);
    #####:  656:  }
    $$$$$:  656-block  0
        -:  657:   //discard card from hand
        -:  658:   //discardCard(handPos, currentPlayer, state, 0);
    #####:  659:   return 0;
    $$$$$:  659-block  0
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:
        -:  662:}
        -:  663:
function AdventurerCard called 0 returned 0% blocks executed 0%
        -:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
    #####:  666:  while(drawntreasure<5){
    $$$$$:  666-block  0
    $$$$$:  666-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  666-block  2
    #####:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    $$$$$:  667-block  0
branch  0 never executed
branch  1 never executed
    #####:  668:          shuffle(currentPlayer, state);
    #####:  669:        }
    $$$$$:  669-block  0
    #####:  670:        drawCard(currentPlayer, state);
    #####:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  672:        if (cardDrawn == gold || cardDrawn == silver || cardDrawn == copper)
    $$$$$:  672-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  672-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  672-block  2
branch  4 never executed
branch  5 never executed
    #####:  673:		drawntreasure++;
    $$$$$:  673-block  0
        -:  674:        else{
    #####:  675:          temphand[z]=cardDrawn;
    #####:  676:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:          z++;
    $$$$$:  677-block  0
        -:  678:        }
        -:  679:      }
    #####:  680:      while(z-1>=0){
    $$$$$:  680-block  0
    $$$$$:  680-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  680-block  2
    #####:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:        z=z-1;
        -:  683:      }
        -:  684:
    #####:  685:  return 0;
    $$$$$:  685-block  0
        -:  686:// bug introduced: player is able to draw 5 treasure cards instead of 2. 
        -:  687:}
        -:  688:
        -:  689:
function VillageCard called 0 returned 0% blocks executed 0%
        -:  690:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  691:
        -:  692:   //+1 Card
    #####:  693:   drawCard(currentPlayer, state);
    #####:  694:   drawCard(currentPlayer, state);	
    #####:  695:drawCard(currentPlayer, state);
        -:  696:
        -:  697:   //+2 Actions
    #####:  698:   state->numActions = state->numActions + 10;
        -:  699:  
        -:  700:    //discard played card from hand
    #####:  701:    discardCard(handPos, currentPlayer, state, 0);
        -:  702:
    #####:  703:  return 0; 
    $$$$$:  703-block  0
        -:  704:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1 
        -:  705:}
        -:  706:
function GreatHallCard called 0 returned 0% blocks executed 0%
        -:  707:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  708:
        -:  709:      //+1 Card
    #####:  710:      drawCard(currentPlayer, state);
        -:  711:
        -:  712:      //+1 Actions
    #####:  713:      state->numActions++;
        -:  714:
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
        -:  717:      
    #####:  718:      return 0;   
    $$$$$:  718-block  0
        -:  719:}
        -:  720:
function EmbargoCard called 0 returned 0% blocks executed 0%
        -:  721:int EmbargoCard(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  722:
    #####:  723:	state->coins = state->coins + 20;
        -:  724:
        -:  725:      //see if selected pile is in play
    #####:  726:       if ( state->supplyCount[choice1] == -1 )
    $$$$$:  726-block  0
branch  0 never executed
branch  1 never executed
        -:  727:          {
    #####:  728:             return -1;
    $$$$$:  728-block  0
        -:  729:          }
        -:  730:    
        -:  731:       //add embargo token to selected supply pile
    #####:  732:       state->embargoTokens[choice1]++;
    #####:  733:       state->embargoTokens[choice1]++;  
        -:  734:
        -:  735:      //trash card
    #####:  736:       discardCard(handPos, currentPlayer, state, 1);
        -:  737:
    #####:  738:	return 0; 
    $$$$$:  738-block  0
        -:  739://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
    #####:  740:}
    $$$$$:  740-block  0
        -:  741:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
    #####:  749:  int currentPlayer = whoseTurn(state);
    #####:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
    #####:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
    #####:  754:  int drawntreasure=0;
        -:  755:  int cardDrawn;
    #####:  756:  int z = 0;// this is the counter for the temp hand
    #####:  757:  if (nextPlayer > (state->numPlayers - 1)){
    $$$$$:  757-block  0
branch  0 never executed
branch  1 never executed
    #####:  758:    nextPlayer = 0;
    #####:  759:  }
    $$$$$:  759-block  0
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
    #####:  763:  switch( card ) 
    $$$$$:  763-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  764:    {
        -:  765:    case adventurer:
        -:  766:     
        -:  767:	//call function 
    #####:  768:	AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
    #####:  770:	return 0;
    $$$$$:  770-block  0
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
    $$$$$:  774-block  0
    $$$$$:  774-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  774-block  2
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
    #####:  777:	}
    $$$$$:  777-block  0
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  783-block  0
    $$$$$:  783-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  783-block  2
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
    $$$$$:  785-block  0
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
    #####:  788:	    }
    $$$$$:  788-block  0
    #####:  789:	}
    $$$$$:  789-block  0
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
    $$$$$:  794-block  0
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  799-block  0
    $$$$$:  799-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  799-block  2
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  802:      }
    $$$$$:  802-block  0
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    $$$$$:  808-block  0
    $$$$$:  808-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  808-block  2
    #####:  809:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  809-block  0
branch  0 never executed
branch  1 never executed
        -:  810:	  if (DEBUG)
        -:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
    #####:  816:	}
    $$$$$:  816-block  0
    #####:  817:	else if (state->coins < getCost(choice1)){
    $$$$$:  817-block  0
branch  0 never executed
branch  1 never executed
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
    #####:  823:	}
    $$$$$:  823-block  0
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
    $$$$$:  831-block  0
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  841-block  0
    $$$$$:  841-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  841-block  2
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
    #####:  844:      }
    $$$$$:  844-block  0
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
    $$$$$:  847-block  0
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
    $$$$$:  850-block  0
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  855-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
    $$$$$:  857-block  0
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  860-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  860-block  1
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
    $$$$$:  862-block  0
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  865-block  0
branch  0 never executed
branch  1 never executed
        -:  866:	{
    #####:  867:	  return -1;
    $$$$$:  867-block  0
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  876-block  0
    $$$$$:  876-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  876-block  2
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  878-block  0
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
    $$$$$:  881-block  0
        -:  882:	    }
    #####:  883:	}
    $$$$$:  883-block  0
        -:  884:			
    #####:  885:      return 0;
    $$$$$:  885-block  0
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  890-block  0
branch  0 never executed
branch  1 never executed
        -:  891:	{
    #####:  892:	  return -1;
    $$$$$:  892-block  0
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  901-block  0
    $$$$$:  901-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  901-block  2
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  903-block  0
branch  0 never executed
branch  1 never executed
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
    $$$$$:  906-block  0
        -:  907:	    }
    #####:  908:	}
    $$$$$:  908-block  0
        -:  909:
        -:  910:
    #####:  911:      return 0;
    $$$$$:  911-block  0
        -:  912:		
        -:  913:    case smithy:
    #####:  914:      	SmithyCard(currentPlayer, state, handPos);
    #####:  915:	return 0;
    $$$$$:  915-block  0
        -:  916:		
        -:  917:    case village:
        -:  918:      
    #####:  919:	VillageCard(currentPlayer, state, handPos);
        -:  920:
    #####:  921:	return 0;
    $$$$$:  921-block  0
        -:  922:		
        -:  923:    case baron:
    #####:  924:      state->numBuys++;//Increase buys by 1!
    #####:  925:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  925-block  0
branch  0 never executed
branch  1 never executed
    #####:  926:	int p = 0;//Iterator for hand!
    #####:  927:	int card_not_discarded = 1;//Flag for discard set!
    #####:  928:	while(card_not_discarded){
    $$$$$:  928-block  0
    $$$$$:  928-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  928-block  2
    #####:  929:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  929-block  0
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  931:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  932:	    state->discardCount[currentPlayer]++;
    #####:  933:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  933-block  0
    $$$$$:  933-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  933-block  2
    #####:  934:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  935:	    }
    $$$$$:  935-block  0
    #####:  936:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  937:	    state->handCount[currentPlayer]--;
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
    $$$$$:  939-block  0
    #####:  940:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  940-block  0
branch  0 never executed
branch  1 never executed
        -:  941:	    if(DEBUG) {
        -:  942:	      printf("No estate cards in your hand, invalid choice\n");
        -:  943:	      printf("Must gain an estate if there are any\n");
        -:  944:	    }
    #####:  945:	    if (supplyCount(estate, state) > 0){
    $$$$$:  945-block  0
branch  0 never executed
branch  1 never executed
    #####:  946:	      gainCard(estate, state, 0, currentPlayer);
    #####:  947:	      state->supplyCount[estate]--;//Decrement estates
    #####:  948:	      if (supplyCount(estate, state) == 0){
    $$$$$:  948-block  0
branch  0 never executed
branch  1 never executed
    #####:  949:		isGameOver(state);
    #####:  950:	      }
    $$$$$:  950-block  0
    #####:  951:	    }
    $$$$$:  951-block  0
    #####:  952:	    card_not_discarded = 0;//Exit the loop
    #####:  953:	  }
    $$$$$:  953-block  0
        -:  954:			    
        -:  955:	  else{
    #####:  956:	    p++;//Next card
    $$$$$:  956-block  0
        -:  957:	  }
        -:  958:	}
    #####:  959:      }
    $$$$$:  959-block  0
        -:  960:			    
        -:  961:      else{
    #####:  962:	if (supplyCount(estate, state) > 0){
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
    #####:  963:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  964:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  965:	  if (supplyCount(estate, state) == 0){
    $$$$$:  965-block  0
branch  0 never executed
branch  1 never executed
    #####:  966:	    isGameOver(state);
    #####:  967:	  }
    $$$$$:  967-block  0
    #####:  968:	}
    $$$$$:  968-block  0
        -:  969:      }
        -:  970:	    
        -:  971:      
    #####:  972:      return 0;
    $$$$$:  972-block  0
        -:  973:		
        -:  974:    case great_hall:
        -:  975:      
    #####:  976:	GreatHallCard(currentPlayer, state, handPos);
        -:  977:
    #####:  978:	return 0;
    $$$$$:  978-block  0
        -:  979:		
        -:  980:    case minion:
        -:  981:      //+1 action
    #####:  982:      state->numActions++;
        -:  983:			
        -:  984:      //discard card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
        -:  986:			
    #####:  987:      if (choice1)		//+2 coins
    $$$$$:  987-block  0
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  state->coins = state->coins + 2;
    #####:  990:	}
    $$$$$:  990-block  0
        -:  991:			
    #####:  992:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  992-block  0
branch  0 never executed
branch  1 never executed
        -:  993:	{
        -:  994:	  //discard hand
    #####:  995:	  while(numHandCards(state) > 0)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  995-block  2
        -:  996:	    {
    #####:  997:	      discardCard(handPos, currentPlayer, state, 0);
        -:  998:	    }
        -:  999:				
        -: 1000:	  //draw 4
    #####: 1001:	  for (i = 0; i < 4; i++)
    $$$$$: 1001-block  0
    $$$$$: 1001-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1001-block  2
        -: 1002:	    {
    #####: 1003:	      drawCard(currentPlayer, state);
    #####: 1004:	    }
    $$$$$: 1004-block  0
        -: 1005:				
        -: 1006:	  //other players discard hand and redraw if hand size > 4
    #####: 1007:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1007-block  0
    $$$$$: 1007-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1007-block  2
        -: 1008:	    {
    #####: 1009:	      if (i != currentPlayer)
    $$$$$: 1009-block  0
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  if ( state->handCount[i] > 4 )
    $$$$$: 1011-block  0
branch  0 never executed
branch  1 never executed
        -: 1012:		    {
        -: 1013:		      //discard hand
    #####: 1014:		      while( state->handCount[i] > 0 )
    $$$$$: 1014-block  0
    $$$$$: 1014-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1014-block  2
        -: 1015:			{
    #####: 1016:			  discardCard(handPos, i, state, 0);
        -: 1017:			}
        -: 1018:							
        -: 1019:		      //draw 4
    #####: 1020:		      for (j = 0; j < 4; j++)
    $$$$$: 1020-block  0
    $$$$$: 1020-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1020-block  2
        -: 1021:			{
    #####: 1022:			  drawCard(i, state);
    #####: 1023:			}
    $$$$$: 1023-block  0
    #####: 1024:		    }
    $$$$$: 1024-block  0
    #####: 1025:		}
    $$$$$: 1025-block  0
    #####: 1026:	    }
    $$$$$: 1026-block  0
        -: 1027:				
    #####: 1028:	}
    $$$$$: 1028-block  0
    #####: 1029:      return 0;
    $$$$$: 1029-block  0
        -: 1030:		
        -: 1031:    case steward:
    #####: 1032:      if (choice1 == 1)
    $$$$$: 1032-block  0
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //+2 cards
    #####: 1035:	  drawCard(currentPlayer, state);
    #####: 1036:	  drawCard(currentPlayer, state);
    #####: 1037:	}
    $$$$$: 1037-block  0
    #####: 1038:      else if (choice1 == 2)
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
        -: 1039:	{
        -: 1040:	  //+2 coins
    #####: 1041:	  state->coins = state->coins + 2;
    #####: 1042:	}
    $$$$$: 1042-block  0
        -: 1043:      else
        -: 1044:	{
        -: 1045:	  //trash 2 cards in hand
    #####: 1046:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1047:	  discardCard(choice3, currentPlayer, state, 1);
    $$$$$: 1047-block  0
        -: 1048:	}
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1052:      return 0;
    $$$$$: 1052-block  0
        -: 1053:		
        -: 1054:    case tribute:
    #####: 1055:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
    #####: 1056:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	  state->deckCount[nextPlayer]--;
    #####: 1059:	}
    $$$$$: 1059-block  0
    #####: 1060:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1060-block  0
branch  0 never executed
branch  1 never executed
    #####: 1061:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1062:	  state->discardCount[nextPlayer]--;
    #####: 1063:	}
    $$$$$: 1063-block  0
        -: 1064:	else{
        -: 1065:	  //No Card to Reveal
        -: 1066:	  if (DEBUG){
        -: 1067:	    printf("No cards to reveal\n");
        -: 1068:	  }
        -: 1069:	}
    #####: 1070:      }
    $$$$$: 1070-block  0
        -: 1071:	    
        -: 1072:      else{
    #####: 1073:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    #####: 1074:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1074-block  0
    $$$$$: 1074-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1074-block  2
    #####: 1075:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1076:	    state->deckCount[nextPlayer]++;
    #####: 1077:	    state->discard[nextPlayer][i] = -1;
    #####: 1078:	    state->discardCount[nextPlayer]--;
    #####: 1079:	  }
    $$$$$: 1079-block  0
        -: 1080:			    
    #####: 1081:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1082:	} 
    $$$$$: 1082-block  0
    #####: 1083:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
    #####: 1086:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1088:	state->deckCount[nextPlayer]--;
    $$$$$: 1088-block  0
        -: 1089:      }    
        -: 1090:		       
    #####: 1091:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    #####: 1092:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1093:	state->playedCardCount++;
    #####: 1094:	tributeRevealedCards[1] = -1;
    #####: 1095:      }
    $$$$$: 1095-block  0
        -: 1096:
    #####: 1097:      for (i = 0; i <= 2; i ++){
    $$$$$: 1097-block  0
    $$$$$: 1097-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1097-block  2
    #####: 1098:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1098-block  2
branch  4 never executed
branch  5 never executed
    #####: 1099:	  state->coins += 2;
    #####: 1100:	}
    $$$$$: 1100-block  0
        -: 1101:		    
    #####: 1102:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1102-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1102-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1102-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1102-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1102-block  4
branch  8 never executed
branch  9 never executed
    #####: 1103:	  drawCard(currentPlayer, state);
    #####: 1104:	  drawCard(currentPlayer, state);
    #####: 1105:	}
    $$$$$: 1105-block  0
        -: 1106:	else{//Action Card
    #####: 1107:	  state->numActions = state->numActions + 2;
    $$$$$: 1107-block  0
        -: 1108:	}
    #####: 1109:      }
    $$$$$: 1109-block  0
        -: 1110:	    
    #####: 1111:      return 0;
    $$$$$: 1111-block  0
        -: 1112:		
        -: 1113:    case ambassador:
    #####: 1114:      j = 0;		//used to check if player has enough cards to discard
        -: 1115:
    #####: 1116:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1116-block  1
branch  2 never executed
branch  3 never executed
        -: 1117:	{
    #####: 1118:	  return -1;				
    $$$$$: 1118-block  0
        -: 1119:	}
        -: 1120:
    #####: 1121:      if (choice1 == handPos)
    $$$$$: 1121-block  0
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  return -1;
    $$$$$: 1123-block  0
        -: 1124:	}
        -: 1125:
    #####: 1126:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1126-block  0
    $$$$$: 1126-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1126-block  2
        -: 1127:	{
    #####: 1128:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1128-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1128-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1128-block  2
branch  4 never executed
branch  5 never executed
        -: 1129:	    {
    #####: 1130:	      j++;
    #####: 1131:	    }
    $$$$$: 1131-block  0
    #####: 1132:	}
    $$$$$: 1132-block  0
    #####: 1133:      if (j < choice2)
    $$$$$: 1133-block  0
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  return -1;				
    $$$$$: 1135-block  0
        -: 1136:	}
        -: 1137:
        -: 1138:      if (DEBUG) 
        -: 1139:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1140:
        -: 1141:      //increase supply count for choosen card by amount being discarded
    #####: 1142:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1143:			
        -: 1144:      //each other player gains a copy of revealed card
    #####: 1145:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1145-block  0
    $$$$$: 1145-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1145-block  2
        -: 1146:	{
    #####: 1147:	  if (i != currentPlayer)
    $$$$$: 1147-block  0
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1150:	    }
    $$$$$: 1150-block  0
    #####: 1151:	}
    $$$$$: 1151-block  0
        -: 1152:
        -: 1153:      //discard played card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1155:
        -: 1156:      //trash copies of cards returned to supply
    #####: 1157:      for (j = 0; j < choice2; j++)
    $$$$$: 1157-block  0
    $$$$$: 1157-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1157-block  2
        -: 1158:	{
    #####: 1159:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1159-block  0
    $$$$$: 1159-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1159-block  2
        -: 1160:	    {
    #####: 1161:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1161-block  0
branch  0 never executed
branch  1 never executed
        -: 1162:		{
    #####: 1163:		  discardCard(i, currentPlayer, state, 1);
    #####: 1164:		  break;
    $$$$$: 1164-block  0
        -: 1165:		}
    #####: 1166:	    }
    $$$$$: 1166-block  0
    #####: 1167:	}			
    $$$$$: 1167-block  0
        -: 1168:
    #####: 1169:      return 0;
    $$$$$: 1169-block  0
        -: 1170:		
        -: 1171:    case cutpurse:
        -: 1172:
    #####: 1173:      updateCoins(currentPlayer, state, 2);
    #####: 1174:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1174-block  0
    $$$$$: 1174-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1174-block  2
        -: 1175:	{
    #####: 1176:	  if (i != currentPlayer)
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1178-block  0
    $$$$$: 1178-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1178-block  2
        -: 1179:		{
    #####: 1180:		  if (state->hand[i][j] == copper)
    $$$$$: 1180-block  0
branch  0 never executed
branch  1 never executed
        -: 1181:		    {
    #####: 1182:		      discardCard(j, i, state, 0);
    #####: 1183:		      break;
    $$$$$: 1183-block  0
        -: 1184:		    }
    #####: 1185:		  if (j == state->handCount[i])
    $$$$$: 1185-block  0
branch  0 never executed
branch  1 never executed
        -: 1186:		    {
    #####: 1187:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1187-block  0
    $$$$$: 1187-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1187-block  2
        -: 1188:			{
        -: 1189:			  if (DEBUG)
        -: 1190:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1191:			}	
    $$$$$: 1191-block  0
    #####: 1192:		      break;
    $$$$$: 1192-block  0
        -: 1193:		    }		
    #####: 1194:		}
    $$$$$: 1194-block  0
        -: 1195:					
    #####: 1196:	    }
    $$$$$: 1196-block  0
        -: 1197:				
    #####: 1198:	}				
    $$$$$: 1198-block  0
        -: 1199:
        -: 1200:      //discard played card from hand
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1202:
    #####: 1203:      return 0;
    $$$$$: 1203-block  0
        -: 1204:
        -: 1205:		
        -: 1206:    case embargo: 
        -: 1207:      
    #####: 1208:	EmbargoCard(currentPlayer, handPos, state, choice1); 
    #####: 1209:	return 0;
    $$$$$: 1209-block  0
        -: 1210:		
        -: 1211:    case outpost:
        -: 1212:      //set outpost flag
    #####: 1213:      state->outpostPlayed++;
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:      return 0;
    $$$$$: 1217-block  0
        -: 1218:		
        -: 1219:    case salvager:
        -: 1220:      //+1 buy
    #####: 1221:      state->numBuys++;
        -: 1222:			
    #####: 1223:      if (choice1)
    $$$$$: 1223-block  0
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //gain coins equal to trashed card
    #####: 1226:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1227:	  //trash card
    #####: 1228:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1229:	}
    $$$$$: 1229-block  0
        -: 1230:			
        -: 1231:      //discard card
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1233:      return 0;
    $$$$$: 1233-block  0
        -: 1234:		
        -: 1235:    case sea_hag:
    #####: 1236:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1236-block  0
    $$$$$: 1236-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1236-block  2
    #####: 1237:	if (i != currentPlayer){
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    #####: 1238:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1239:	  state->discardCount[i]++;
    #####: 1240:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1241:	}
    $$$$$: 1241-block  0
    #####: 1242:      }
    $$$$$: 1242-block  0
    #####: 1243:      return 0;
    $$$$$: 1243-block  0
        -: 1244:		
        -: 1245:    case treasure_map:
        -: 1246:      //search hand for another treasure_map
    #####: 1247:      index = -1;
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1248-block  0
    $$$$$: 1248-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1248-block  2
        -: 1249:	{
    #####: 1250:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1250-block  1
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      index = i;
    #####: 1253:	      break;
    $$$$$: 1253-block  0
        -: 1254:	    }
    #####: 1255:	}
    $$$$$: 1255-block  0
    #####: 1256:      if (index > -1)
    $$$$$: 1256-block  0
branch  0 never executed
branch  1 never executed
        -: 1257:	{
        -: 1258:	  //trash both treasure cards
    #####: 1259:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1260:	  discardCard(index, currentPlayer, state, 1);
        -: 1261:
        -: 1262:	  //gain 4 Gold cards
    #####: 1263:	  for (i = 0; i < 4; i++)
    $$$$$: 1263-block  0
    $$$$$: 1263-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1263-block  2
        -: 1264:	    {
    #####: 1265:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1266:	    }
    $$$$$: 1266-block  0
        -: 1267:				
        -: 1268:	  //return success
    #####: 1269:	  return 1;
    $$$$$: 1269-block  0
        -: 1270:	}
        -: 1271:			
        -: 1272:      //no second treasure_map found in hand
    #####: 1273:      return -1;
    $$$$$: 1273-block  0
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return -1;
    $$$$$: 1276-block  0
    #####: 1277:}
    $$$$$: 1277-block  0
        -: 1278:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
    #####: 1283:  if (trashFlag < 1)
    $$$$$: 1283-block  0
branch  0 never executed
branch  1 never executed
        -: 1284:    {
        -: 1285:      //add card to played pile
    #####: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1287:      state->playedCardCount++;
    #####: 1288:    }
    $$$$$: 1288-block  0
        -: 1289:	
        -: 1290:  //set played card to -1
    #####: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
    #####: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    $$$$$: 1294-block  0
branch  0 never executed
branch  1 never executed
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
    $$$$$: 1298-block  0
    #####: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    $$$$$: 1299-block  0
branch  0 never executed
branch  1 never executed
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
    $$$$$: 1303-block  0
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
    #####: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
    #####: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
    #####: 1311:      state->handCount[currentPlayer]--;
    $$$$$: 1311-block  0
        -: 1312:    }
        -: 1313:	
    #####: 1314:  return 0;
    $$$$$: 1314-block  0
        -: 1315:}
        -: 1316:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1322-block  0
branch  0 never executed
branch  1 never executed
        -: 1323:    {
    #####: 1324:      return -1;
    $$$$$: 1324-block  0
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
    $$$$$: 1332-block  0
branch  0 never executed
branch  1 never executed
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
    $$$$$: 1336-block  0
    #####: 1337:  else if (toFlag == 2)
    $$$$$: 1337-block  0
branch  0 never executed
branch  1 never executed
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
    #####: 1341:    }
    $$$$$: 1341-block  0
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
    $$$$$: 1345-block  0
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
    $$$$$: 1351-block  0
    #####: 1352:}
    $$$$$: 1352-block  0
        -: 1353:
function updateCoins called 7 returned 100% blocks executed 100%
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
        7: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       33: 1362:  for (i = 0; i < state->handCount[player]; i++)
        7: 1362-block  0
       33: 1362-block  1
branch  0 taken 79%
branch  1 taken 21%
       26: 1362-block  2
        -: 1363:    {
       26: 1364:      if (state->hand[player][i] == copper)
       26: 1364-block  0
branch  0 taken 69%
branch  1 taken 31%
        -: 1365:	{
       18: 1366:	  state->coins += 1;
       18: 1367:	}
       18: 1367-block  0
        8: 1368:      else if (state->hand[player][i] == silver)
        8: 1368-block  0
branch  0 taken 25%
branch  1 taken 75%
        -: 1369:	{
        2: 1370:	  state->coins += 2;
        2: 1371:	}
        2: 1371-block  0
        6: 1372:      else if (state->hand[player][i] == gold)
        6: 1372-block  0
branch  0 taken 33%
branch  1 taken 67%
        -: 1373:	{
        2: 1374:	  state->coins += 3;
        2: 1375:	}	
        2: 1375-block  0
       26: 1376:    }	
       26: 1376-block  0
        -: 1377:
        -: 1378:  //add bonus
        7: 1379:  state->coins += bonus;
        -: 1380:
        7: 1381:  return 0;
        7: 1381-block  0
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
----------------- Testing Card: smithy ----------------
TEST 1: +3 cards
hand count = 10, expected = 7
deck count = 0, expected = 2
played count = 0, expected = 1
10 7
TEST 2: Check smithy is not trashed after play
Gaining 1 smithy card for player 0
Before playing smithy:
Player 0 smithy count 1, expected 1
After playing smithy:
Player 0 smithy count 1, expected 1

TEST 3: Smithy cost test
Buy smithy with 4 coins: 0 expected: 0
Buy smithy with 1 coins: -1 expected: -1

TEST 4: No state change occur for other players
Initial player 1 state:
Player 1 hand count: 0 expected: 0
Player 1 deck count: 10 expected: 10
Player 1 discard count: 0 expected: 0
Player 0 plays smithy.
Player 1 hand count: 0 expected: 0
Player 1 deck count: 10 expected: 10
Player 1 discard count: 0 expected: 0

TEST 5: No state change should occur to the victory card piles and kingdom card piles
Before play smithy card
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 98 expected: 98
Player 0 plays smithy.
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 98 expected: 98

 >>>>> Failsure: Testing complete smithy <<<<<

File 'dominion.c'
Lines executed:28.83% of 652
Branches executed:36.69% of 417
Taken at least once:21.82% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 153 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
      153:   11:  if (*(int*)a > *(int*)b)
      153:   11-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
    $$$$$:   12-block  0
      153:   13:  if (*(int*)a < *(int*)b)
      153:   13-block  0
branch  0 taken 35%
branch  1 taken 65%
       53:   14:    return -1;
       53:   14-block  0
      100:   15:  return 0;
      100:   15-block  0
      153:   16:}
      153:   16-block  0
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    $$$$$:   19-block  0
    #####:   20:  return g;
    $$$$$:   20-block  0
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
    $$$$$:   36-block  0
        -:   37:}
        -:   38:
function initializeGame called 5 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        5:   46:  SelectStream(1);
        5:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        5:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        5:   50-block  0
branch  0 taken 100%
branch  1 taken 0%
        5:   50-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
    $$$$$:   52-block  0
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        5:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       55:   59:  for (i = 0; i < 10; i++)
        5:   59-block  0
       55:   59-block  1
branch  0 taken 91%
branch  1 taken 9%
       50:   59-block  2
        -:   60:    {
      550:   61:      for (j = 0; j < 10; j++)
       50:   61-block  0
      550:   61-block  1
branch  0 taken 91%
branch  1 taken 9%
      500:   61-block  2
        -:   62:        {
      500:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      500:   63-block  0
branch  0 taken 90%
branch  1 taken 10%
      450:   63-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
    $$$$$:   65-block  0
        -:   66:	    }
      500:   67:        }
      500:   67-block  0
       50:   68:    }
       50:   68-block  0
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        5:   75:  if (numPlayers == 2)
        5:   75-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        5:   77:      state->supplyCount[curse] = 10;
        5:   78:    }
        5:   78-block  0
    #####:   79:  else if (numPlayers == 3)
    $$$$$:   79-block  0
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
    $$$$$:   82-block  0
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
    $$$$$:   85-block  0
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        5:   89:  if (numPlayers == 2)
        5:   89-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        5:   91:      state->supplyCount[estate] = 8;
        5:   92:      state->supplyCount[duchy] = 8;
        5:   93:      state->supplyCount[province] = 8;
        5:   94:    }
        5:   94-block  0
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
    $$$$$:   99-block  0
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        5:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  104:  state->supplyCount[silver] = 40;
        5:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      105:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        5:  108-block  0
      105:  108-block  1
branch  0 taken 95%
branch  1 taken 5%
      100:  108-block  2
        -:  109:    {
      825:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
      100:  110-block  0
      825:  110-block  1
branch  0 taken 94%
branch  1 taken 6%
      725:  110-block  2
        -:  111:	{
      775:  112:	  if (kingdomCards[j] == i)
      775:  112-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       50:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       50:  115-block  0
branch  0 taken 100%
branch  1 taken 0%
       50:  115-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    $$$$$:  117-block  0
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    $$$$$:  119-block  0
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  120-block  0
    #####:  121:		}
    $$$$$:  121-block  0
        -:  122:	      else
        -:  123:		{
       50:  124:		  state->supplyCount[i] = 10;
       50:  124-block  0
        -:  125:		}
       50:  126:	      break;
       50:  126-block  0
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      725:  130:	      state->supplyCount[i] = -1;
      725:  130-block  0
        -:  131:	    }
      725:  132:	}
      725:  132-block  0
        -:  133:
      100:  134:    }
      100:  134-block  0
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       15:  140:  for (i = 0; i < numPlayers; i++)
        5:  140-block  0
       15:  140-block  1
branch  0 taken 67%
branch  1 taken 33%
       10:  140-block  2
        -:  141:    {
       10:  142:      state->deckCount[i] = 0;
       40:  143:      for (j = 0; j < 3; j++)
       10:  143-block  0
       40:  143-block  1
branch  0 taken 75%
branch  1 taken 25%
       30:  143-block  2
        -:  144:	{
       30:  145:	  state->deck[i][j] = estate;
       30:  146:	  state->deckCount[i]++;
       30:  147:	}
       30:  147-block  0
       80:  148:      for (j = 3; j < 10; j++)
       10:  148-block  0
       80:  148-block  1
branch  0 taken 88%
branch  1 taken 13%
       70:  148-block  2
        -:  149:	{
       70:  150:	  state->deck[i][j] = copper;
       70:  151:	  state->deckCount[i]++;		
       70:  152:	}
       70:  152-block  0
       10:  153:    }
       10:  153-block  0
        -:  154:
        -:  155:  //shuffle player decks
       15:  156:  for (i = 0; i < numPlayers; i++)
        5:  156-block  0
       15:  156-block  1
branch  0 taken 67%
branch  1 taken 33%
       10:  156-block  2
        -:  157:    {
       10:  158:      if ( shuffle(i, state) < 0 )
       10:  158-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
    $$$$$:  160-block  0
        -:  161:	}
       10:  162:    }
       10:  162-block  0
        -:  163:
        -:  164:  //draw player hands
       15:  165:  for (i = 0; i < numPlayers; i++)
        5:  165-block  0
       15:  165-block  1
branch  0 taken 67%
branch  1 taken 33%
       10:  165-block  2
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       10:  168:      state->handCount[i] = 0;
       10:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
       10:  175:    }
       10:  175-block  0
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      140:  178:  for (i = 0; i <= treasure_map; i++)
        5:  178-block  0
      140:  178-block  1
branch  0 taken 96%
branch  1 taken 4%
      135:  178-block  2
        -:  179:    {
      135:  180:      state->embargoTokens[i] = 0;
      135:  181:    }
      135:  181-block  0
        -:  182:
        -:  183:  //initialize first player's turn
        5:  184:  state->outpostPlayed = 0;
        5:  185:  state->phase = 0;
        5:  186:  state->numActions = 1;
        5:  187:  state->numBuys = 1;
        5:  188:  state->playedCardCount = 0;
        5:  189:  state->whoseTurn = 0;
        5:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       30:  194:  for (it = 0; it < 5; it++){
        5:  194-block  0
       30:  194-block  1
branch  0 taken 83%
branch  1 taken 17%
       25:  194-block  2
       25:  195:    drawCard(state->whoseTurn, state);
       25:  196:  }
       25:  196-block  0
        -:  197:
        5:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        5:  200:  return 0;
        5:  200-block  0
        5:  201:}
        5:  201-block  0
        -:  202:
function shuffle called 19 returned 100% blocks executed 100%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       19:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       19:  211:  if (state->deckCount[player] < 1)
       19:  211-block  0
branch  0 taken 26%
branch  1 taken 74%
        5:  212:    return -1;
        5:  212-block  0
       14:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      131:  216:  while (state->deckCount[player] > 0) {
       14:  216-block  0
      131:  216-block  1
branch  0 taken 89%
branch  1 taken 11%
      117:  216-block  2
      117:  217:    card = floor(Random() * state->deckCount[player]);
      117:  218:    newDeck[newDeckPos] = state->deck[player][card];
      117:  219:    newDeckPos++;
      384:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      117:  220-block  0
      384:  220-block  1
branch  0 taken 70%
branch  1 taken 30%
      267:  220-block  2
      267:  221:      state->deck[player][i] = state->deck[player][i+1];
      267:  222:    }
      267:  222-block  0
      117:  223:    state->deckCount[player]--;
        -:  224:  }
      131:  225:  for (i = 0; i < newDeckPos; i++) {
       14:  225-block  0
      131:  225-block  1
branch  0 taken 89%
branch  1 taken 11%
      117:  225-block  2
      117:  226:    state->deck[player][i] = newDeck[i];
      117:  227:    state->deckCount[player]++;
      117:  228:  }
      117:  228-block  0
        -:  229:
       14:  230:  return 0;
       14:  230-block  0
       19:  231:}
       19:  231-block  0
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
    $$$$$:  239-block  0
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
    $$$$$:  241-block  0
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
    $$$$$:  245-block  0
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
    $$$$$:  247-block  0
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
    $$$$$:  254-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  254-block  1
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
    $$$$$:  256-block  0
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  260-block  0
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
    $$$$$:  262-block  0
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    $$$$$:  271-block  0
    #####:  272:}
    $$$$$:  272-block  0
        -:  273:
function buyCard called 4 returned 100% blocks executed 83%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
        4:  282:  who = state->whoseTurn;
        -:  283:
        4:  284:  if (state->numBuys < 1){
        4:  284-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    $$$$$:  287-block  0
        4:  288:  } else if (supplyCount(supplyPos, state) <1){
        4:  288-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    $$$$$:  291-block  0
        4:  292:  } else if (state->coins < getCost(supplyPos)){
        4:  292-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        2:  295:    return -1;
        2:  295-block  0
        -:  296:  } else {
        2:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
        2:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
        2:  301:    state->coins = (state->coins) - (getCost(supplyPos));
        2:  302:    state->numBuys--;
        2:  302-block  0
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
        2:  310:  return 0;
        2:  310-block  0
        4:  311:}
        4:  311-block  0
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  314-block  0
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
    $$$$$:  319-block  0
        -:  320:}
        -:  321:
function supplyCount called 46 returned 100% blocks executed 100%
        -:  322:int supplyCount(int card, struct gameState *state) {
       46:  323:  return state->supplyCount[card];
       46:  323-block  0
        -:  324:}
        -:  325:
function fullDeckCount called 10 returned 100% blocks executed 100%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
       10:  328:  int count = 0;
        -:  329:
       40:  330:  for (i = 0; i < state->deckCount[player]; i++)
       10:  330-block  0
       40:  330-block  1
branch  0 taken 75%
branch  1 taken 25%
       30:  330-block  2
        -:  331:    {
       30:  332:      if (state->deck[player][i] == card) count++;
       30:  332-block  0
branch  0 taken 13%
branch  1 taken 87%
        4:  332-block  1
       30:  333:    }
       30:  333-block  0
        -:  334:
       64:  335:  for (i = 0; i < state->handCount[player]; i++)
       10:  335-block  0
       64:  335-block  1
branch  0 taken 84%
branch  1 taken 16%
       54:  335-block  2
        -:  336:    {
       54:  337:      if (state->hand[player][i] == card) count++;
       54:  337-block  0
branch  0 taken 15%
branch  1 taken 85%
        8:  337-block  1
       54:  338:    }
       54:  338-block  0
        -:  339:
       12:  340:  for (i = 0; i < state->discardCount[player]; i++)
       10:  340-block  0
       12:  340-block  1
branch  0 taken 17%
branch  1 taken 83%
        2:  340-block  2
        -:  341:    {
        2:  342:      if (state->discard[player][i] == card) count++;
        2:  342-block  0
branch  0 taken 100%
branch  1 taken 0%
        2:  342-block  1
        2:  343:    }
        2:  343-block  0
        -:  344:
       10:  345:  return count;
       10:  345-block  0
        -:  346:}
        -:  347:
function whoseTurn called 4 returned 100% blocks executed 100%
        -:  348:int whoseTurn(struct gameState *state) {
        4:  349:  return state->whoseTurn;
        4:  349-block  0
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  358-block  0
    $$$$$:  358-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  358-block  2
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    $$$$$:  361-block  0
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  365-block  0
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
    $$$$$:  367-block  0
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  369-block  0
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    $$$$$:  382-block  0
    $$$$$:  382-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  382-block  2
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
    $$$$$:  384-block  0
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
    $$$$$:  389-block  0
        -:  390:}
        -:  391:
function isGameOver called 6 returned 100% blocks executed 100%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        6:  397-block  0
branch  0 taken 33%
branch  1 taken 67%
        -:  398:    {
        2:  399:      return 1;
        2:  399-block  0
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        4:  404-block  0
      104:  404-block  1
branch  0 taken 96%
branch  1 taken 4%
      100:  404-block  2
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
      100:  406-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  407:	{
        6:  408:	  j++;
        6:  409:	}
        6:  409-block  0
      100:  410:    }
      100:  410-block  0
        4:  411:  if ( j >= 3)
        4:  411-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  412:    {
        2:  413:      return 1;
        2:  413-block  0
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        2:  416-block  0
        6:  417:}
        6:  417-block  0
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  424-block  0
    $$$$$:  424-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  2
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  430-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  430-block  1
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  431-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  431-block  1
    #####:  432:    }
    $$$$$:  432-block  0
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  435-block  0
    $$$$$:  435-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  2
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  441-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  441-block  1
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  442-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  442-block  1
    #####:  443:    }
    $$$$$:  443-block  0
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  446-block  0
    $$$$$:  446-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  2
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  452-block  1
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  453-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  453-block  1
    #####:  454:    }
    $$$$$:  454-block  0
        -:  455:
    #####:  456:  return score;
    $$$$$:  456-block  0
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  466-block  0
    $$$$$:  466-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  466-block  2
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
    $$$$$:  469-block  0
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
    $$$$$:  472-block  0
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
    $$$$$:  475-block  0
        -:  476:	}
    #####:  477:    }
    $$$$$:  477-block  0
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  481-block  0
    $$$$$:  481-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  481-block  2
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
    $$$$$:  483-block  0
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    $$$$$:  486-block  0
    #####:  487:    }
    $$$$$:  487-block  0
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  492-block  0
    $$$$$:  492-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  2
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  494-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  494-block  1
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    $$$$$:  497-block  0
    #####:  498:    }
    $$$$$:  498-block  0
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  502-block  0
    $$$$$:  502-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  502-block  2
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
    $$$$$:  504-block  0
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    $$$$$:  507-block  0
    #####:  508:    }
    $$$$$:  508-block  0
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  512-block  0
    $$$$$:  512-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  512-block  2
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
    $$$$$:  514-block  0
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
    $$$$$:  517-block  0
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
    $$$$$:  520-block  0
        -:  521:	}
    #####:  522:    }
    $$$$$:  522-block  0
        -:  523:
    #####:  524:  return 0;
    $$$$$:  524-block  0
        -:  525:}
        -:  526:
function drawCard called 45 returned 100% blocks executed 100%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       45:  530:  if (state->deckCount[player] <= 0){//Deck is empty
       45:  530-block  0
branch  0 taken 9%
branch  1 taken 91%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
        6:  535:    for (i = 0; i < state->discardCount[player];i++){
        4:  535-block  0
        6:  535-block  1
branch  0 taken 33%
branch  1 taken 67%
        2:  535-block  2
        2:  536:      state->deck[player][i] = state->discard[player][i];
        2:  537:      state->discard[player][i] = -1;
        2:  538:    }
        2:  538-block  0
        -:  539:
        4:  540:    state->deckCount[player] = state->discardCount[player];
        4:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
        4:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
        4:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
        4:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
        4:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
        4:  561:    if (deckCounter == 0)
        4:  561-block  0
branch  0 taken 75%
branch  1 taken 25%
        3:  562:      return -1;
        3:  562-block  0
        -:  563:
        1:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  565:    state->deckCount[player]--;
        1:  566:    state->handCount[player]++;//Increment hand count
        1:  567:  }
        1:  567-block  0
        -:  568:
        -:  569:  else{
       41:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       41:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       41:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       41:  578:    state->deckCount[player]--;
       41:  579:    state->handCount[player]++;//Increment hand count
       41:  579-block  0
        -:  580:  }
        -:  581:
       42:  582:  return 0;
       42:  582-block  0
       45:  583:}
       45:  583-block  0
        -:  584:
function getCost called 6 returned 100% blocks executed 12%
        -:  585:int getCost(int cardNumber)
        -:  586:{
        6:  587:  switch( cardNumber ) 
        6:  587-block  0
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 100%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
    $$$$$:  590-block  0
        -:  591:    case estate:
    #####:  592:      return 2;
    $$$$$:  592-block  0
        -:  593:    case duchy:
    #####:  594:      return 5;
    $$$$$:  594-block  0
        -:  595:    case province:
    #####:  596:      return 8;
    $$$$$:  596-block  0
        -:  597:    case copper:
    #####:  598:      return 0;
    $$$$$:  598-block  0
        -:  599:    case silver:
    #####:  600:      return 3;
    $$$$$:  600-block  0
        -:  601:    case gold:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case adventurer:
    #####:  604:      return 6;
    $$$$$:  604-block  0
        -:  605:    case council_room:
    #####:  606:      return 5;
    $$$$$:  606-block  0
        -:  607:    case feast:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case gardens:
    #####:  610:      return 4;
    $$$$$:  610-block  0
        -:  611:    case mine:
    #####:  612:      return 5;
    $$$$$:  612-block  0
        -:  613:    case remodel:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case smithy:
        6:  616:      return 4;
        6:  616-block  0
        -:  617:    case village:
    #####:  618:      return 3;
    $$$$$:  618-block  0
        -:  619:    case baron:
    #####:  620:      return 4;
    $$$$$:  620-block  0
        -:  621:    case great_hall:
    #####:  622:      return 3;
    $$$$$:  622-block  0
        -:  623:    case minion:
    #####:  624:      return 5;
    $$$$$:  624-block  0
        -:  625:    case steward:
    #####:  626:      return 3;
    $$$$$:  626-block  0
        -:  627:    case tribute:
    #####:  628:      return 5;
    $$$$$:  628-block  0
        -:  629:    case ambassador:
    #####:  630:      return 3;
    $$$$$:  630-block  0
        -:  631:    case cutpurse:
    #####:  632:      return 4;
    $$$$$:  632-block  0
        -:  633:    case embargo: 
    #####:  634:      return 2;
    $$$$$:  634-block  0
        -:  635:    case outpost:
    #####:  636:      return 5;
    $$$$$:  636-block  0
        -:  637:    case salvager:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case sea_hag:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    case treasure_map:
    #####:  642:      return 4;
    $$$$$:  642-block  0
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    $$$$$:  645-block  0
        6:  646:}
        6:  646-block  0
        -:  647:
        -:  648:
function SmithyCard called 4 returned 100% blocks executed 100%
        -:  649:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  650:
        -:  651:  //+3 Cards
        -:  652:  int i;
       24:  653:  for (i = 0; i < 5; i++)
        4:  653-block  0
       24:  653-block  1
branch  0 taken 83%
branch  1 taken 17%
       20:  653-block  2
        -:  654:  {
       20:  655:      drawCard(currentPlayer, state);
       20:  656:  }
       20:  656-block  0
        -:  657:   //discard card from hand
        -:  658:   //discardCard(handPos, currentPlayer, state, 0);
        4:  659:   return 0;
        4:  659-block  0
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:
        -:  662:}
        -:  663:
function AdventurerCard called 0 returned 0% blocks executed 0%
        -:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
    #####:  666:  while(drawntreasure<5){
    $$$$$:  666-block  0
    $$$$$:  666-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  666-block  2
    #####:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    $$$$$:  667-block  0
branch  0 never executed
branch  1 never executed
    #####:  668:          shuffle(currentPlayer, state);
    #####:  669:        }
    $$$$$:  669-block  0
    #####:  670:        drawCard(currentPlayer, state);
    #####:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  672:        if (cardDrawn == gold || cardDrawn == silver || cardDrawn == copper)
    $$$$$:  672-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  672-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  672-block  2
branch  4 never executed
branch  5 never executed
    #####:  673:		drawntreasure++;
    $$$$$:  673-block  0
        -:  674:        else{
    #####:  675:          temphand[z]=cardDrawn;
    #####:  676:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:          z++;
    $$$$$:  677-block  0
        -:  678:        }
        -:  679:      }
    #####:  680:      while(z-1>=0){
    $$$$$:  680-block  0
    $$$$$:  680-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  680-block  2
    #####:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:        z=z-1;
        -:  683:      }
        -:  684:
    #####:  685:  return 0;
    $$$$$:  685-block  0
        -:  686:// bug introduced: player is able to draw 5 treasure cards instead of 2. 
        -:  687:}
        -:  688:
        -:  689:
function VillageCard called 0 returned 0% blocks executed 0%
        -:  690:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  691:
        -:  692:   //+1 Card
    #####:  693:   drawCard(currentPlayer, state);
    #####:  694:   drawCard(currentPlayer, state);	
    #####:  695:drawCard(currentPlayer, state);
        -:  696:
        -:  697:   //+2 Actions
    #####:  698:   state->numActions = state->numActions + 10;
        -:  699:  
        -:  700:    //discard played card from hand
    #####:  701:    discardCard(handPos, currentPlayer, state, 0);
        -:  702:
    #####:  703:  return 0; 
    $$$$$:  703-block  0
        -:  704:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1 
        -:  705:}
        -:  706:
function GreatHallCard called 0 returned 0% blocks executed 0%
        -:  707:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  708:
        -:  709:      //+1 Card
    #####:  710:      drawCard(currentPlayer, state);
        -:  711:
        -:  712:      //+1 Actions
    #####:  713:      state->numActions++;
        -:  714:
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
        -:  717:      
    #####:  718:      return 0;   
    $$$$$:  718-block  0
        -:  719:}
        -:  720:
function EmbargoCard called 0 returned 0% blocks executed 0%
        -:  721:int EmbargoCard(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  722:
    #####:  723:	state->coins = state->coins + 20;
        -:  724:
        -:  725:      //see if selected pile is in play
    #####:  726:       if ( state->supplyCount[choice1] == -1 )
    $$$$$:  726-block  0
branch  0 never executed
branch  1 never executed
        -:  727:          {
    #####:  728:             return -1;
    $$$$$:  728-block  0
        -:  729:          }
        -:  730:    
        -:  731:       //add embargo token to selected supply pile
    #####:  732:       state->embargoTokens[choice1]++;
    #####:  733:       state->embargoTokens[choice1]++;  
        -:  734:
        -:  735:      //trash card
    #####:  736:       discardCard(handPos, currentPlayer, state, 1);
        -:  737:
    #####:  738:	return 0; 
    $$$$$:  738-block  0
        -:  739://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
    #####:  740:}
    $$$$$:  740-block  0
        -:  741:
function cardEffect called 4 returned 100% blocks executed 2%
        -:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
        4:  749:  int currentPlayer = whoseTurn(state);
        4:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
        4:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
        4:  754:  int drawntreasure=0;
        -:  755:  int cardDrawn;
        4:  756:  int z = 0;// this is the counter for the temp hand
        4:  757:  if (nextPlayer > (state->numPlayers - 1)){
        4:  757-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  758:    nextPlayer = 0;
    #####:  759:  }
    $$$$$:  759-block  0
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
        4:  763:  switch( card ) 
        4:  763-block  0
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  764:    {
        -:  765:    case adventurer:
        -:  766:     
        -:  767:	//call function 
    #####:  768:	AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
    #####:  770:	return 0;
    $$$$$:  770-block  0
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
    $$$$$:  774-block  0
    $$$$$:  774-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  774-block  2
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
    #####:  777:	}
    $$$$$:  777-block  0
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  783-block  0
    $$$$$:  783-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  783-block  2
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
    $$$$$:  785-block  0
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
    #####:  788:	    }
    $$$$$:  788-block  0
    #####:  789:	}
    $$$$$:  789-block  0
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
    $$$$$:  794-block  0
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  799-block  0
    $$$$$:  799-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  799-block  2
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  802:      }
    $$$$$:  802-block  0
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    $$$$$:  808-block  0
    $$$$$:  808-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  808-block  2
    #####:  809:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  809-block  0
branch  0 never executed
branch  1 never executed
        -:  810:	  if (DEBUG)
        -:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
    #####:  816:	}
    $$$$$:  816-block  0
    #####:  817:	else if (state->coins < getCost(choice1)){
    $$$$$:  817-block  0
branch  0 never executed
branch  1 never executed
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
    #####:  823:	}
    $$$$$:  823-block  0
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
    $$$$$:  831-block  0
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  841-block  0
    $$$$$:  841-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  841-block  2
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
    #####:  844:      }
    $$$$$:  844-block  0
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
    $$$$$:  847-block  0
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
    $$$$$:  850-block  0
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  855-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
    $$$$$:  857-block  0
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  860-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  860-block  1
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
    $$$$$:  862-block  0
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  865-block  0
branch  0 never executed
branch  1 never executed
        -:  866:	{
    #####:  867:	  return -1;
    $$$$$:  867-block  0
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  876-block  0
    $$$$$:  876-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  876-block  2
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  878-block  0
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
    $$$$$:  881-block  0
        -:  882:	    }
    #####:  883:	}
    $$$$$:  883-block  0
        -:  884:			
    #####:  885:      return 0;
    $$$$$:  885-block  0
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  890-block  0
branch  0 never executed
branch  1 never executed
        -:  891:	{
    #####:  892:	  return -1;
    $$$$$:  892-block  0
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  901-block  0
    $$$$$:  901-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  901-block  2
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  903-block  0
branch  0 never executed
branch  1 never executed
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
    $$$$$:  906-block  0
        -:  907:	    }
    #####:  908:	}
    $$$$$:  908-block  0
        -:  909:
        -:  910:
    #####:  911:      return 0;
    $$$$$:  911-block  0
        -:  912:		
        -:  913:    case smithy:
        4:  914:      	SmithyCard(currentPlayer, state, handPos);
        4:  915:	return 0;
        4:  915-block  0
        -:  916:		
        -:  917:    case village:
        -:  918:      
    #####:  919:	VillageCard(currentPlayer, state, handPos);
        -:  920:
    #####:  921:	return 0;
    $$$$$:  921-block  0
        -:  922:		
        -:  923:    case baron:
    #####:  924:      state->numBuys++;//Increase buys by 1!
    #####:  925:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  925-block  0
branch  0 never executed
branch  1 never executed
    #####:  926:	int p = 0;//Iterator for hand!
    #####:  927:	int card_not_discarded = 1;//Flag for discard set!
    #####:  928:	while(card_not_discarded){
    $$$$$:  928-block  0
    $$$$$:  928-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  928-block  2
    #####:  929:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  929-block  0
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  931:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  932:	    state->discardCount[currentPlayer]++;
    #####:  933:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  933-block  0
    $$$$$:  933-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  933-block  2
    #####:  934:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  935:	    }
    $$$$$:  935-block  0
    #####:  936:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  937:	    state->handCount[currentPlayer]--;
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
    $$$$$:  939-block  0
    #####:  940:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  940-block  0
branch  0 never executed
branch  1 never executed
        -:  941:	    if(DEBUG) {
        -:  942:	      printf("No estate cards in your hand, invalid choice\n");
        -:  943:	      printf("Must gain an estate if there are any\n");
        -:  944:	    }
    #####:  945:	    if (supplyCount(estate, state) > 0){
    $$$$$:  945-block  0
branch  0 never executed
branch  1 never executed
    #####:  946:	      gainCard(estate, state, 0, currentPlayer);
    #####:  947:	      state->supplyCount[estate]--;//Decrement estates
    #####:  948:	      if (supplyCount(estate, state) == 0){
    $$$$$:  948-block  0
branch  0 never executed
branch  1 never executed
    #####:  949:		isGameOver(state);
    #####:  950:	      }
    $$$$$:  950-block  0
    #####:  951:	    }
    $$$$$:  951-block  0
    #####:  952:	    card_not_discarded = 0;//Exit the loop
    #####:  953:	  }
    $$$$$:  953-block  0
        -:  954:			    
        -:  955:	  else{
    #####:  956:	    p++;//Next card
    $$$$$:  956-block  0
        -:  957:	  }
        -:  958:	}
    #####:  959:      }
    $$$$$:  959-block  0
        -:  960:			    
        -:  961:      else{
    #####:  962:	if (supplyCount(estate, state) > 0){
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
    #####:  963:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  964:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  965:	  if (supplyCount(estate, state) == 0){
    $$$$$:  965-block  0
branch  0 never executed
branch  1 never executed
    #####:  966:	    isGameOver(state);
    #####:  967:	  }
    $$$$$:  967-block  0
    #####:  968:	}
    $$$$$:  968-block  0
        -:  969:      }
        -:  970:	    
        -:  971:      
    #####:  972:      return 0;
    $$$$$:  972-block  0
        -:  973:		
        -:  974:    case great_hall:
        -:  975:      
    #####:  976:	GreatHallCard(currentPlayer, state, handPos);
        -:  977:
    #####:  978:	return 0;
    $$$$$:  978-block  0
        -:  979:		
        -:  980:    case minion:
        -:  981:      //+1 action
    #####:  982:      state->numActions++;
        -:  983:			
        -:  984:      //discard card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
        -:  986:			
    #####:  987:      if (choice1)		//+2 coins
    $$$$$:  987-block  0
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  state->coins = state->coins + 2;
    #####:  990:	}
    $$$$$:  990-block  0
        -:  991:			
    #####:  992:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  992-block  0
branch  0 never executed
branch  1 never executed
        -:  993:	{
        -:  994:	  //discard hand
    #####:  995:	  while(numHandCards(state) > 0)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  995-block  2
        -:  996:	    {
    #####:  997:	      discardCard(handPos, currentPlayer, state, 0);
        -:  998:	    }
        -:  999:				
        -: 1000:	  //draw 4
    #####: 1001:	  for (i = 0; i < 4; i++)
    $$$$$: 1001-block  0
    $$$$$: 1001-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1001-block  2
        -: 1002:	    {
    #####: 1003:	      drawCard(currentPlayer, state);
    #####: 1004:	    }
    $$$$$: 1004-block  0
        -: 1005:				
        -: 1006:	  //other players discard hand and redraw if hand size > 4
    #####: 1007:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1007-block  0
    $$$$$: 1007-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1007-block  2
        -: 1008:	    {
    #####: 1009:	      if (i != currentPlayer)
    $$$$$: 1009-block  0
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  if ( state->handCount[i] > 4 )
    $$$$$: 1011-block  0
branch  0 never executed
branch  1 never executed
        -: 1012:		    {
        -: 1013:		      //discard hand
    #####: 1014:		      while( state->handCount[i] > 0 )
    $$$$$: 1014-block  0
    $$$$$: 1014-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1014-block  2
        -: 1015:			{
    #####: 1016:			  discardCard(handPos, i, state, 0);
        -: 1017:			}
        -: 1018:							
        -: 1019:		      //draw 4
    #####: 1020:		      for (j = 0; j < 4; j++)
    $$$$$: 1020-block  0
    $$$$$: 1020-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1020-block  2
        -: 1021:			{
    #####: 1022:			  drawCard(i, state);
    #####: 1023:			}
    $$$$$: 1023-block  0
    #####: 1024:		    }
    $$$$$: 1024-block  0
    #####: 1025:		}
    $$$$$: 1025-block  0
    #####: 1026:	    }
    $$$$$: 1026-block  0
        -: 1027:				
    #####: 1028:	}
    $$$$$: 1028-block  0
    #####: 1029:      return 0;
    $$$$$: 1029-block  0
        -: 1030:		
        -: 1031:    case steward:
    #####: 1032:      if (choice1 == 1)
    $$$$$: 1032-block  0
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //+2 cards
    #####: 1035:	  drawCard(currentPlayer, state);
    #####: 1036:	  drawCard(currentPlayer, state);
    #####: 1037:	}
    $$$$$: 1037-block  0
    #####: 1038:      else if (choice1 == 2)
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
        -: 1039:	{
        -: 1040:	  //+2 coins
    #####: 1041:	  state->coins = state->coins + 2;
    #####: 1042:	}
    $$$$$: 1042-block  0
        -: 1043:      else
        -: 1044:	{
        -: 1045:	  //trash 2 cards in hand
    #####: 1046:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1047:	  discardCard(choice3, currentPlayer, state, 1);
    $$$$$: 1047-block  0
        -: 1048:	}
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1052:      return 0;
    $$$$$: 1052-block  0
        -: 1053:		
        -: 1054:    case tribute:
    #####: 1055:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
    #####: 1056:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	  state->deckCount[nextPlayer]--;
    #####: 1059:	}
    $$$$$: 1059-block  0
    #####: 1060:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1060-block  0
branch  0 never executed
branch  1 never executed
    #####: 1061:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1062:	  state->discardCount[nextPlayer]--;
    #####: 1063:	}
    $$$$$: 1063-block  0
        -: 1064:	else{
        -: 1065:	  //No Card to Reveal
        -: 1066:	  if (DEBUG){
        -: 1067:	    printf("No cards to reveal\n");
        -: 1068:	  }
        -: 1069:	}
    #####: 1070:      }
    $$$$$: 1070-block  0
        -: 1071:	    
        -: 1072:      else{
    #####: 1073:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    #####: 1074:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1074-block  0
    $$$$$: 1074-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1074-block  2
    #####: 1075:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1076:	    state->deckCount[nextPlayer]++;
    #####: 1077:	    state->discard[nextPlayer][i] = -1;
    #####: 1078:	    state->discardCount[nextPlayer]--;
    #####: 1079:	  }
    $$$$$: 1079-block  0
        -: 1080:			    
    #####: 1081:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1082:	} 
    $$$$$: 1082-block  0
    #####: 1083:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
    #####: 1086:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1088:	state->deckCount[nextPlayer]--;
    $$$$$: 1088-block  0
        -: 1089:      }    
        -: 1090:		       
    #####: 1091:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    #####: 1092:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1093:	state->playedCardCount++;
    #####: 1094:	tributeRevealedCards[1] = -1;
    #####: 1095:      }
    $$$$$: 1095-block  0
        -: 1096:
    #####: 1097:      for (i = 0; i <= 2; i ++){
    $$$$$: 1097-block  0
    $$$$$: 1097-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1097-block  2
    #####: 1098:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1098-block  2
branch  4 never executed
branch  5 never executed
    #####: 1099:	  state->coins += 2;
    #####: 1100:	}
    $$$$$: 1100-block  0
        -: 1101:		    
    #####: 1102:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1102-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1102-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1102-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1102-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1102-block  4
branch  8 never executed
branch  9 never executed
    #####: 1103:	  drawCard(currentPlayer, state);
    #####: 1104:	  drawCard(currentPlayer, state);
    #####: 1105:	}
    $$$$$: 1105-block  0
        -: 1106:	else{//Action Card
    #####: 1107:	  state->numActions = state->numActions + 2;
    $$$$$: 1107-block  0
        -: 1108:	}
    #####: 1109:      }
    $$$$$: 1109-block  0
        -: 1110:	    
    #####: 1111:      return 0;
    $$$$$: 1111-block  0
        -: 1112:		
        -: 1113:    case ambassador:
    #####: 1114:      j = 0;		//used to check if player has enough cards to discard
        -: 1115:
    #####: 1116:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1116-block  1
branch  2 never executed
branch  3 never executed
        -: 1117:	{
    #####: 1118:	  return -1;				
    $$$$$: 1118-block  0
        -: 1119:	}
        -: 1120:
    #####: 1121:      if (choice1 == handPos)
    $$$$$: 1121-block  0
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  return -1;
    $$$$$: 1123-block  0
        -: 1124:	}
        -: 1125:
    #####: 1126:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1126-block  0
    $$$$$: 1126-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1126-block  2
        -: 1127:	{
    #####: 1128:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1128-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1128-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1128-block  2
branch  4 never executed
branch  5 never executed
        -: 1129:	    {
    #####: 1130:	      j++;
    #####: 1131:	    }
    $$$$$: 1131-block  0
    #####: 1132:	}
    $$$$$: 1132-block  0
    #####: 1133:      if (j < choice2)
    $$$$$: 1133-block  0
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  return -1;				
    $$$$$: 1135-block  0
        -: 1136:	}
        -: 1137:
        -: 1138:      if (DEBUG) 
        -: 1139:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1140:
        -: 1141:      //increase supply count for choosen card by amount being discarded
    #####: 1142:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1143:			
        -: 1144:      //each other player gains a copy of revealed card
    #####: 1145:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1145-block  0
    $$$$$: 1145-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1145-block  2
        -: 1146:	{
    #####: 1147:	  if (i != currentPlayer)
    $$$$$: 1147-block  0
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1150:	    }
    $$$$$: 1150-block  0
    #####: 1151:	}
    $$$$$: 1151-block  0
        -: 1152:
        -: 1153:      //discard played card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1155:
        -: 1156:      //trash copies of cards returned to supply
    #####: 1157:      for (j = 0; j < choice2; j++)
    $$$$$: 1157-block  0
    $$$$$: 1157-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1157-block  2
        -: 1158:	{
    #####: 1159:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1159-block  0
    $$$$$: 1159-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1159-block  2
        -: 1160:	    {
    #####: 1161:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1161-block  0
branch  0 never executed
branch  1 never executed
        -: 1162:		{
    #####: 1163:		  discardCard(i, currentPlayer, state, 1);
    #####: 1164:		  break;
    $$$$$: 1164-block  0
        -: 1165:		}
    #####: 1166:	    }
    $$$$$: 1166-block  0
    #####: 1167:	}			
    $$$$$: 1167-block  0
        -: 1168:
    #####: 1169:      return 0;
    $$$$$: 1169-block  0
        -: 1170:		
        -: 1171:    case cutpurse:
        -: 1172:
    #####: 1173:      updateCoins(currentPlayer, state, 2);
    #####: 1174:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1174-block  0
    $$$$$: 1174-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1174-block  2
        -: 1175:	{
    #####: 1176:	  if (i != currentPlayer)
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1178-block  0
    $$$$$: 1178-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1178-block  2
        -: 1179:		{
    #####: 1180:		  if (state->hand[i][j] == copper)
    $$$$$: 1180-block  0
branch  0 never executed
branch  1 never executed
        -: 1181:		    {
    #####: 1182:		      discardCard(j, i, state, 0);
    #####: 1183:		      break;
    $$$$$: 1183-block  0
        -: 1184:		    }
    #####: 1185:		  if (j == state->handCount[i])
    $$$$$: 1185-block  0
branch  0 never executed
branch  1 never executed
        -: 1186:		    {
    #####: 1187:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1187-block  0
    $$$$$: 1187-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1187-block  2
        -: 1188:			{
        -: 1189:			  if (DEBUG)
        -: 1190:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1191:			}	
    $$$$$: 1191-block  0
    #####: 1192:		      break;
    $$$$$: 1192-block  0
        -: 1193:		    }		
    #####: 1194:		}
    $$$$$: 1194-block  0
        -: 1195:					
    #####: 1196:	    }
    $$$$$: 1196-block  0
        -: 1197:				
    #####: 1198:	}				
    $$$$$: 1198-block  0
        -: 1199:
        -: 1200:      //discard played card from hand
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1202:
    #####: 1203:      return 0;
    $$$$$: 1203-block  0
        -: 1204:
        -: 1205:		
        -: 1206:    case embargo: 
        -: 1207:      
    #####: 1208:	EmbargoCard(currentPlayer, handPos, state, choice1); 
    #####: 1209:	return 0;
    $$$$$: 1209-block  0
        -: 1210:		
        -: 1211:    case outpost:
        -: 1212:      //set outpost flag
    #####: 1213:      state->outpostPlayed++;
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:      return 0;
    $$$$$: 1217-block  0
        -: 1218:		
        -: 1219:    case salvager:
        -: 1220:      //+1 buy
    #####: 1221:      state->numBuys++;
        -: 1222:			
    #####: 1223:      if (choice1)
    $$$$$: 1223-block  0
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //gain coins equal to trashed card
    #####: 1226:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1227:	  //trash card
    #####: 1228:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1229:	}
    $$$$$: 1229-block  0
        -: 1230:			
        -: 1231:      //discard card
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1233:      return 0;
    $$$$$: 1233-block  0
        -: 1234:		
        -: 1235:    case sea_hag:
    #####: 1236:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1236-block  0
    $$$$$: 1236-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1236-block  2
    #####: 1237:	if (i != currentPlayer){
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    #####: 1238:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1239:	  state->discardCount[i]++;
    #####: 1240:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1241:	}
    $$$$$: 1241-block  0
    #####: 1242:      }
    $$$$$: 1242-block  0
    #####: 1243:      return 0;
    $$$$$: 1243-block  0
        -: 1244:		
        -: 1245:    case treasure_map:
        -: 1246:      //search hand for another treasure_map
    #####: 1247:      index = -1;
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1248-block  0
    $$$$$: 1248-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1248-block  2
        -: 1249:	{
    #####: 1250:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1250-block  1
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      index = i;
    #####: 1253:	      break;
    $$$$$: 1253-block  0
        -: 1254:	    }
    #####: 1255:	}
    $$$$$: 1255-block  0
    #####: 1256:      if (index > -1)
    $$$$$: 1256-block  0
branch  0 never executed
branch  1 never executed
        -: 1257:	{
        -: 1258:	  //trash both treasure cards
    #####: 1259:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1260:	  discardCard(index, currentPlayer, state, 1);
        -: 1261:
        -: 1262:	  //gain 4 Gold cards
    #####: 1263:	  for (i = 0; i < 4; i++)
    $$$$$: 1263-block  0
    $$$$$: 1263-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1263-block  2
        -: 1264:	    {
    #####: 1265:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1266:	    }
    $$$$$: 1266-block  0
        -: 1267:				
        -: 1268:	  //return success
    #####: 1269:	  return 1;
    $$$$$: 1269-block  0
        -: 1270:	}
        -: 1271:			
        -: 1272:      //no second treasure_map found in hand
    #####: 1273:      return -1;
    $$$$$: 1273-block  0
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return -1;
    $$$$$: 1276-block  0
        4: 1277:}
        4: 1277-block  0
        -: 1278:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
    #####: 1283:  if (trashFlag < 1)
    $$$$$: 1283-block  0
branch  0 never executed
branch  1 never executed
        -: 1284:    {
        -: 1285:      //add card to played pile
    #####: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1287:      state->playedCardCount++;
    #####: 1288:    }
    $$$$$: 1288-block  0
        -: 1289:	
        -: 1290:  //set played card to -1
    #####: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
    #####: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    $$$$$: 1294-block  0
branch  0 never executed
branch  1 never executed
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
    $$$$$: 1298-block  0
    #####: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    $$$$$: 1299-block  0
branch  0 never executed
branch  1 never executed
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
    $$$$$: 1303-block  0
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
    #####: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
    #####: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
    #####: 1311:      state->handCount[currentPlayer]--;
    $$$$$: 1311-block  0
        -: 1312:    }
        -: 1313:	
    #####: 1314:  return 0;
    $$$$$: 1314-block  0
        -: 1315:}
        -: 1316:
function gainCard called 3 returned 100% blocks executed 81%
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        3: 1322-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1323:    {
    #####: 1324:      return -1;
    $$$$$: 1324-block  0
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
        3: 1332:  if (toFlag == 1)
        3: 1332-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
    $$$$$: 1336-block  0
        3: 1337:  else if (toFlag == 2)
        3: 1337-block  0
branch  0 taken 33%
branch  1 taken 67%
        -: 1338:    {
        1: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1340:      state->handCount[player]++;
        1: 1341:    }
        1: 1341-block  0
        -: 1342:  else
        -: 1343:    {
        2: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1345:      state->discardCount[player]++;
        2: 1345-block  0
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
        3: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
        3: 1351:  return 0;
        3: 1351-block  0
        3: 1352:}
        3: 1352-block  0
        -: 1353:
function updateCoins called 8 returned 100% blocks executed 100%
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
        8: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       39: 1362:  for (i = 0; i < state->handCount[player]; i++)
        8: 1362-block  0
       39: 1362-block  1
branch  0 taken 79%
branch  1 taken 21%
       31: 1362-block  2
        -: 1363:    {
       31: 1364:      if (state->hand[player][i] == copper)
       31: 1364-block  0
branch  0 taken 71%
branch  1 taken 29%
        -: 1365:	{
       22: 1366:	  state->coins += 1;
       22: 1367:	}
       22: 1367-block  0
        9: 1368:      else if (state->hand[player][i] == silver)
        9: 1368-block  0
branch  0 taken 22%
branch  1 taken 78%
        -: 1369:	{
        2: 1370:	  state->coins += 2;
        2: 1371:	}
        2: 1371-block  0
        7: 1372:      else if (state->hand[player][i] == gold)
        7: 1372-block  0
branch  0 taken 29%
branch  1 taken 71%
        -: 1373:	{
        2: 1374:	  state->coins += 3;
        2: 1375:	}	
        2: 1375-block  0
       31: 1376:    }	
       31: 1376-block  0
        -: 1377:
        -: 1378:  //add bonus
        8: 1379:  state->coins += bonus;
        -: 1380:
        8: 1381:  return 0;
        8: 1381-block  0
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
----------------- Testing Card: adventurer ----------------
TEST 1: Play Adventurer Card 
hand count = 8, expected = 6
deck count = 0, expected = 3
discard count = 2, expected = 1

TEST 2: Check treasury card in deck and hand 
hand count = 7, expected = 6
deck count = 0, expected = 1

TEST 3: Number of revealed cards to discard 
hand count = 7, expected = 6
deck count = 0, expected = 1
discard count = 3, expected = 3

TEST 4: Adventurer cost test 
Buy adventurer with 6 coins: 0 expected: 0
Buy adventurer with 1 coins: -1 expected: -1

TEST 5: No state change occur for other players
Initial player 1 state:
Player 1 hand count: 0 expected: 0
Player 1 deck count: 10 expected: 10
Player 1 discard count: 0 expected: 0
Player 0 plays adventurer.
Player 1 hand count: 0 expected: 0
Player 1 deck count: 10 expected: 10
Player 1 discard count: 0 expected: 0

TEST 6: No state change should occur to the victory card piles and kingdom card piles
Before play adventurer card
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 98 expected: 98
Player 0 plays adventurer.
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 98 expected: 98

 >>>>> Failsure: Testing complete adventurer <<<<<

File 'dominion.c'
Lines executed:31.75% of 652
Branches executed:39.57% of 417
Taken at least once:24.94% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 191 returned 100% blocks executed 100%
        -:   10:int compare(const void* a, const void* b) {
      191:   11:  if (*(int*)a > *(int*)b)
      191:   11-block  0
branch  0 taken 3%
branch  1 taken 97%
        6:   12:    return 1;
        6:   12-block  0
      185:   13:  if (*(int*)a < *(int*)b)
      185:   13-block  0
branch  0 taken 34%
branch  1 taken 66%
       63:   14:    return -1;
       63:   14-block  0
      122:   15:  return 0;
      122:   15-block  0
      191:   16:}
      191:   16-block  0
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    $$$$$:   19-block  0
    #####:   20:  return g;
    $$$$$:   20-block  0
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
    $$$$$:   36-block  0
        -:   37:}
        -:   38:
function initializeGame called 6 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        6:   46:  SelectStream(1);
        6:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        6:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        6:   50-block  0
branch  0 taken 100%
branch  1 taken 0%
        6:   50-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
    $$$$$:   52-block  0
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        6:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       66:   59:  for (i = 0; i < 10; i++)
        6:   59-block  0
       66:   59-block  1
branch  0 taken 91%
branch  1 taken 9%
       60:   59-block  2
        -:   60:    {
      660:   61:      for (j = 0; j < 10; j++)
       60:   61-block  0
      660:   61-block  1
branch  0 taken 91%
branch  1 taken 9%
      600:   61-block  2
        -:   62:        {
      600:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      600:   63-block  0
branch  0 taken 90%
branch  1 taken 10%
      540:   63-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
    $$$$$:   65-block  0
        -:   66:	    }
      600:   67:        }
      600:   67-block  0
       60:   68:    }
       60:   68-block  0
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        6:   75:  if (numPlayers == 2)
        6:   75-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        6:   77:      state->supplyCount[curse] = 10;
        6:   78:    }
        6:   78-block  0
    #####:   79:  else if (numPlayers == 3)
    $$$$$:   79-block  0
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
    $$$$$:   82-block  0
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
    $$$$$:   85-block  0
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        6:   89:  if (numPlayers == 2)
        6:   89-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        6:   91:      state->supplyCount[estate] = 8;
        6:   92:      state->supplyCount[duchy] = 8;
        6:   93:      state->supplyCount[province] = 8;
        6:   94:    }
        6:   94-block  0
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
    $$$$$:   99-block  0
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        6:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  104:  state->supplyCount[silver] = 40;
        6:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      126:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        6:  108-block  0
      126:  108-block  1
branch  0 taken 95%
branch  1 taken 5%
      120:  108-block  2
        -:  109:    {
      990:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
      120:  110-block  0
      990:  110-block  1
branch  0 taken 94%
branch  1 taken 6%
      870:  110-block  2
        -:  111:	{
      930:  112:	  if (kingdomCards[j] == i)
      930:  112-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       60:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       60:  115-block  0
branch  0 taken 100%
branch  1 taken 0%
       60:  115-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    $$$$$:  117-block  0
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    $$$$$:  119-block  0
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  120-block  0
    #####:  121:		}
    $$$$$:  121-block  0
        -:  122:	      else
        -:  123:		{
       60:  124:		  state->supplyCount[i] = 10;
       60:  124-block  0
        -:  125:		}
       60:  126:	      break;
       60:  126-block  0
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      870:  130:	      state->supplyCount[i] = -1;
      870:  130-block  0
        -:  131:	    }
      870:  132:	}
      870:  132-block  0
        -:  133:
      120:  134:    }
      120:  134-block  0
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       18:  140:  for (i = 0; i < numPlayers; i++)
        6:  140-block  0
       18:  140-block  1
branch  0 taken 67%
branch  1 taken 33%
       12:  140-block  2
        -:  141:    {
       12:  142:      state->deckCount[i] = 0;
       48:  143:      for (j = 0; j < 3; j++)
       12:  143-block  0
       48:  143-block  1
branch  0 taken 75%
branch  1 taken 25%
       36:  143-block  2
        -:  144:	{
       36:  145:	  state->deck[i][j] = estate;
       36:  146:	  state->deckCount[i]++;
       36:  147:	}
       36:  147-block  0
       96:  148:      for (j = 3; j < 10; j++)
       12:  148-block  0
       96:  148-block  1
branch  0 taken 88%
branch  1 taken 13%
       84:  148-block  2
        -:  149:	{
       84:  150:	  state->deck[i][j] = copper;
       84:  151:	  state->deckCount[i]++;		
       84:  152:	}
       84:  152-block  0
       12:  153:    }
       12:  153-block  0
        -:  154:
        -:  155:  //shuffle player decks
       18:  156:  for (i = 0; i < numPlayers; i++)
        6:  156-block  0
       18:  156-block  1
branch  0 taken 67%
branch  1 taken 33%
       12:  156-block  2
        -:  157:    {
       12:  158:      if ( shuffle(i, state) < 0 )
       12:  158-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
    $$$$$:  160-block  0
        -:  161:	}
       12:  162:    }
       12:  162-block  0
        -:  163:
        -:  164:  //draw player hands
       18:  165:  for (i = 0; i < numPlayers; i++)
        6:  165-block  0
       18:  165-block  1
branch  0 taken 67%
branch  1 taken 33%
       12:  165-block  2
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       12:  168:      state->handCount[i] = 0;
       12:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
       12:  175:    }
       12:  175-block  0
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      168:  178:  for (i = 0; i <= treasure_map; i++)
        6:  178-block  0
      168:  178-block  1
branch  0 taken 96%
branch  1 taken 4%
      162:  178-block  2
        -:  179:    {
      162:  180:      state->embargoTokens[i] = 0;
      162:  181:    }
      162:  181-block  0
        -:  182:
        -:  183:  //initialize first player's turn
        6:  184:  state->outpostPlayed = 0;
        6:  185:  state->phase = 0;
        6:  186:  state->numActions = 1;
        6:  187:  state->numBuys = 1;
        6:  188:  state->playedCardCount = 0;
        6:  189:  state->whoseTurn = 0;
        6:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       36:  194:  for (it = 0; it < 5; it++){
        6:  194-block  0
       36:  194-block  1
branch  0 taken 83%
branch  1 taken 17%
       30:  194-block  2
       30:  195:    drawCard(state->whoseTurn, state);
       30:  196:  }
       30:  196-block  0
        -:  197:
        6:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        6:  200:  return 0;
        6:  200-block  0
        6:  201:}
        6:  201-block  0
        -:  202:
function shuffle called 44 returned 100% blocks executed 100%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       44:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       44:  211:  if (state->deckCount[player] < 1)
       44:  211-block  0
branch  0 taken 59%
branch  1 taken 41%
       26:  212:    return -1;
       26:  212-block  0
       18:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      162:  216:  while (state->deckCount[player] > 0) {
       18:  216-block  0
      162:  216-block  1
branch  0 taken 89%
branch  1 taken 11%
      144:  216-block  2
      144:  217:    card = floor(Random() * state->deckCount[player]);
      144:  218:    newDeck[newDeckPos] = state->deck[player][card];
      144:  219:    newDeckPos++;
      465:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      144:  220-block  0
      465:  220-block  1
branch  0 taken 69%
branch  1 taken 31%
      321:  220-block  2
      321:  221:      state->deck[player][i] = state->deck[player][i+1];
      321:  222:    }
      321:  222-block  0
      144:  223:    state->deckCount[player]--;
        -:  224:  }
      162:  225:  for (i = 0; i < newDeckPos; i++) {
       18:  225-block  0
      162:  225-block  1
branch  0 taken 89%
branch  1 taken 11%
      144:  225-block  2
      144:  226:    state->deck[player][i] = newDeck[i];
      144:  227:    state->deckCount[player]++;
      144:  228:  }
      144:  228-block  0
        -:  229:
       18:  230:  return 0;
       18:  230-block  0
       44:  231:}
       44:  231-block  0
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
    $$$$$:  239-block  0
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
    $$$$$:  241-block  0
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
    $$$$$:  245-block  0
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
    $$$$$:  247-block  0
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
    $$$$$:  254-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  254-block  1
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
    $$$$$:  256-block  0
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  260-block  0
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
    $$$$$:  262-block  0
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    $$$$$:  271-block  0
    #####:  272:}
    $$$$$:  272-block  0
        -:  273:
function buyCard called 8 returned 100% blocks executed 83%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
        8:  282:  who = state->whoseTurn;
        -:  283:
        8:  284:  if (state->numBuys < 1){
        8:  284-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    $$$$$:  287-block  0
        8:  288:  } else if (supplyCount(supplyPos, state) <1){
        8:  288-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    $$$$$:  291-block  0
        8:  292:  } else if (state->coins < getCost(supplyPos)){
        8:  292-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        4:  295:    return -1;
        4:  295-block  0
        -:  296:  } else {
        4:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
        4:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
        4:  301:    state->coins = (state->coins) - (getCost(supplyPos));
        4:  302:    state->numBuys--;
        4:  302-block  0
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
        4:  310:  return 0;
        4:  310-block  0
        8:  311:}
        8:  311-block  0
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  314-block  0
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
    $$$$$:  319-block  0
        -:  320:}
        -:  321:
function supplyCount called 91 returned 100% blocks executed 100%
        -:  322:int supplyCount(int card, struct gameState *state) {
       91:  323:  return state->supplyCount[card];
       91:  323-block  0
        -:  324:}
        -:  325:
function fullDeckCount called 10 returned 100% blocks executed 100%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
       10:  328:  int count = 0;
        -:  329:
       40:  330:  for (i = 0; i < state->deckCount[player]; i++)
       10:  330-block  0
       40:  330-block  1
branch  0 taken 75%
branch  1 taken 25%
       30:  330-block  2
        -:  331:    {
       30:  332:      if (state->deck[player][i] == card) count++;
       30:  332-block  0
branch  0 taken 13%
branch  1 taken 87%
        4:  332-block  1
       30:  333:    }
       30:  333-block  0
        -:  334:
       64:  335:  for (i = 0; i < state->handCount[player]; i++)
       10:  335-block  0
       64:  335-block  1
branch  0 taken 84%
branch  1 taken 16%
       54:  335-block  2
        -:  336:    {
       54:  337:      if (state->hand[player][i] == card) count++;
       54:  337-block  0
branch  0 taken 15%
branch  1 taken 85%
        8:  337-block  1
       54:  338:    }
       54:  338-block  0
        -:  339:
       12:  340:  for (i = 0; i < state->discardCount[player]; i++)
       10:  340-block  0
       12:  340-block  1
branch  0 taken 17%
branch  1 taken 83%
        2:  340-block  2
        -:  341:    {
        2:  342:      if (state->discard[player][i] == card) count++;
        2:  342-block  0
branch  0 taken 100%
branch  1 taken 0%
        2:  342-block  1
        2:  343:    }
        2:  343-block  0
        -:  344:
       10:  345:  return count;
       10:  345-block  0
        -:  346:}
        -:  347:
function whoseTurn called 9 returned 100% blocks executed 100%
        -:  348:int whoseTurn(struct gameState *state) {
        9:  349:  return state->whoseTurn;
        9:  349-block  0
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  358-block  0
    $$$$$:  358-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  358-block  2
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    $$$$$:  361-block  0
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  365-block  0
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
    $$$$$:  367-block  0
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  369-block  0
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    $$$$$:  382-block  0
    $$$$$:  382-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  382-block  2
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
    $$$$$:  384-block  0
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
    $$$$$:  389-block  0
        -:  390:}
        -:  391:
function isGameOver called 6 returned 100% blocks executed 100%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        6:  397-block  0
branch  0 taken 33%
branch  1 taken 67%
        -:  398:    {
        2:  399:      return 1;
        2:  399-block  0
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        4:  404-block  0
      104:  404-block  1
branch  0 taken 96%
branch  1 taken 4%
      100:  404-block  2
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
      100:  406-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  407:	{
        6:  408:	  j++;
        6:  409:	}
        6:  409-block  0
      100:  410:    }
      100:  410-block  0
        4:  411:  if ( j >= 3)
        4:  411-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  412:    {
        2:  413:      return 1;
        2:  413-block  0
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        2:  416-block  0
        6:  417:}
        6:  417-block  0
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  424-block  0
    $$$$$:  424-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  2
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  430-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  430-block  1
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  431-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  431-block  1
    #####:  432:    }
    $$$$$:  432-block  0
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  435-block  0
    $$$$$:  435-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  2
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  441-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  441-block  1
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  442-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  442-block  1
    #####:  443:    }
    $$$$$:  443-block  0
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  446-block  0
    $$$$$:  446-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  2
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  452-block  1
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  453-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  453-block  1
    #####:  454:    }
    $$$$$:  454-block  0
        -:  455:
    #####:  456:  return score;
    $$$$$:  456-block  0
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  466-block  0
    $$$$$:  466-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  466-block  2
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
    $$$$$:  469-block  0
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
    $$$$$:  472-block  0
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
    $$$$$:  475-block  0
        -:  476:	}
    #####:  477:    }
    $$$$$:  477-block  0
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  481-block  0
    $$$$$:  481-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  481-block  2
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
    $$$$$:  483-block  0
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    $$$$$:  486-block  0
    #####:  487:    }
    $$$$$:  487-block  0
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  492-block  0
    $$$$$:  492-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  2
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  494-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  494-block  1
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    $$$$$:  497-block  0
    #####:  498:    }
    $$$$$:  498-block  0
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  502-block  0
    $$$$$:  502-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  502-block  2
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
    $$$$$:  504-block  0
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    $$$$$:  507-block  0
    #####:  508:    }
    $$$$$:  508-block  0
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  512-block  0
    $$$$$:  512-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  512-block  2
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
    $$$$$:  514-block  0
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
    $$$$$:  517-block  0
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
    $$$$$:  520-block  0
        -:  521:	}
    #####:  522:    }
    $$$$$:  522-block  0
        -:  523:
    #####:  524:  return 0;
    $$$$$:  524-block  0
        -:  525:}
        -:  526:
function drawCard called 87 returned 100% blocks executed 100%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       87:  530:  if (state->deckCount[player] <= 0){//Deck is empty
       87:  530-block  0
branch  0 taken 18%
branch  1 taken 82%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
       25:  535:    for (i = 0; i < state->discardCount[player];i++){
       16:  535-block  0
       25:  535-block  1
branch  0 taken 36%
branch  1 taken 64%
        9:  535-block  2
        9:  536:      state->deck[player][i] = state->discard[player][i];
        9:  537:      state->discard[player][i] = -1;
        9:  538:    }
        9:  538-block  0
        -:  539:
       16:  540:    state->deckCount[player] = state->discardCount[player];
       16:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
       16:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
       16:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
       16:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
       16:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
       16:  561:    if (deckCounter == 0)
       16:  561-block  0
branch  0 taken 81%
branch  1 taken 19%
       13:  562:      return -1;
       13:  562-block  0
        -:  563:
        3:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  565:    state->deckCount[player]--;
        3:  566:    state->handCount[player]++;//Increment hand count
        3:  567:  }
        3:  567-block  0
        -:  568:
        -:  569:  else{
       71:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       71:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       71:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       71:  578:    state->deckCount[player]--;
       71:  579:    state->handCount[player]++;//Increment hand count
       71:  579-block  0
        -:  580:  }
        -:  581:
       74:  582:  return 0;
       74:  582-block  0
       87:  583:}
       87:  583-block  0
        -:  584:
function getCost called 12 returned 100% blocks executed 16%
        -:  585:int getCost(int cardNumber)
        -:  586:{
       12:  587:  switch( cardNumber ) 
       12:  587-block  0
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 50%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
    $$$$$:  590-block  0
        -:  591:    case estate:
    #####:  592:      return 2;
    $$$$$:  592-block  0
        -:  593:    case duchy:
    #####:  594:      return 5;
    $$$$$:  594-block  0
        -:  595:    case province:
    #####:  596:      return 8;
    $$$$$:  596-block  0
        -:  597:    case copper:
    #####:  598:      return 0;
    $$$$$:  598-block  0
        -:  599:    case silver:
    #####:  600:      return 3;
    $$$$$:  600-block  0
        -:  601:    case gold:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case adventurer:
        6:  604:      return 6;
        6:  604-block  0
        -:  605:    case council_room:
    #####:  606:      return 5;
    $$$$$:  606-block  0
        -:  607:    case feast:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case gardens:
    #####:  610:      return 4;
    $$$$$:  610-block  0
        -:  611:    case mine:
    #####:  612:      return 5;
    $$$$$:  612-block  0
        -:  613:    case remodel:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case smithy:
        6:  616:      return 4;
        6:  616-block  0
        -:  617:    case village:
    #####:  618:      return 3;
    $$$$$:  618-block  0
        -:  619:    case baron:
    #####:  620:      return 4;
    $$$$$:  620-block  0
        -:  621:    case great_hall:
    #####:  622:      return 3;
    $$$$$:  622-block  0
        -:  623:    case minion:
    #####:  624:      return 5;
    $$$$$:  624-block  0
        -:  625:    case steward:
    #####:  626:      return 3;
    $$$$$:  626-block  0
        -:  627:    case tribute:
    #####:  628:      return 5;
    $$$$$:  628-block  0
        -:  629:    case ambassador:
    #####:  630:      return 3;
    $$$$$:  630-block  0
        -:  631:    case cutpurse:
    #####:  632:      return 4;
    $$$$$:  632-block  0
        -:  633:    case embargo: 
    #####:  634:      return 2;
    $$$$$:  634-block  0
        -:  635:    case outpost:
    #####:  636:      return 5;
    $$$$$:  636-block  0
        -:  637:    case salvager:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case sea_hag:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    case treasure_map:
    #####:  642:      return 4;
    $$$$$:  642-block  0
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    $$$$$:  645-block  0
       12:  646:}
       12:  646-block  0
        -:  647:
        -:  648:
function SmithyCard called 5 returned 100% blocks executed 100%
        -:  649:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  650:
        -:  651:  //+3 Cards
        -:  652:  int i;
       30:  653:  for (i = 0; i < 5; i++)
        5:  653-block  0
       30:  653-block  1
branch  0 taken 83%
branch  1 taken 17%
       25:  653-block  2
        -:  654:  {
       25:  655:      drawCard(currentPlayer, state);
       25:  656:  }
       25:  656-block  0
        -:  657:   //discard card from hand
        -:  658:   //discardCard(handPos, currentPlayer, state, 0);
        5:  659:   return 0;
        5:  659-block  0
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:
        -:  662:}
        -:  663:
function AdventurerCard called 4 returned 100% blocks executed 100%
        -:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
       36:  666:  while(drawntreasure<5){
        4:  666-block  0
       36:  666-block  1
branch  0 taken 89%
branch  1 taken 11%
       32:  666-block  2
       32:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       32:  667-block  0
branch  0 taken 34%
branch  1 taken 66%
       11:  668:          shuffle(currentPlayer, state);
       11:  669:        }
       11:  669-block  0
       32:  670:        drawCard(currentPlayer, state);
       32:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       32:  672:        if (cardDrawn == gold || cardDrawn == silver || cardDrawn == copper)
       32:  672-block  0
branch  0 taken 100%
branch  1 taken 0%
       32:  672-block  1
branch  2 taken 100%
branch  3 taken 0%
       32:  672-block  2
branch  4 taken 63%
branch  5 taken 38%
       20:  673:		drawntreasure++;
       20:  673-block  0
        -:  674:        else{
       12:  675:          temphand[z]=cardDrawn;
       12:  676:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       12:  677:          z++;
       12:  677-block  0
        -:  678:        }
        -:  679:      }
       16:  680:      while(z-1>=0){
        4:  680-block  0
       16:  680-block  1
branch  0 taken 75%
branch  1 taken 25%
       12:  680-block  2
       12:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       12:  682:        z=z-1;
        -:  683:      }
        -:  684:
        4:  685:  return 0;
        4:  685-block  0
        -:  686:// bug introduced: player is able to draw 5 treasure cards instead of 2. 
        -:  687:}
        -:  688:
        -:  689:
function VillageCard called 0 returned 0% blocks executed 0%
        -:  690:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  691:
        -:  692:   //+1 Card
    #####:  693:   drawCard(currentPlayer, state);
    #####:  694:   drawCard(currentPlayer, state);	
    #####:  695:drawCard(currentPlayer, state);
        -:  696:
        -:  697:   //+2 Actions
    #####:  698:   state->numActions = state->numActions + 10;
        -:  699:  
        -:  700:    //discard played card from hand
    #####:  701:    discardCard(handPos, currentPlayer, state, 0);
        -:  702:
    #####:  703:  return 0; 
    $$$$$:  703-block  0
        -:  704:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1 
        -:  705:}
        -:  706:
function GreatHallCard called 0 returned 0% blocks executed 0%
        -:  707:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  708:
        -:  709:      //+1 Card
    #####:  710:      drawCard(currentPlayer, state);
        -:  711:
        -:  712:      //+1 Actions
    #####:  713:      state->numActions++;
        -:  714:
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
        -:  717:      
    #####:  718:      return 0;   
    $$$$$:  718-block  0
        -:  719:}
        -:  720:
function EmbargoCard called 0 returned 0% blocks executed 0%
        -:  721:int EmbargoCard(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  722:
    #####:  723:	state->coins = state->coins + 20;
        -:  724:
        -:  725:      //see if selected pile is in play
    #####:  726:       if ( state->supplyCount[choice1] == -1 )
    $$$$$:  726-block  0
branch  0 never executed
branch  1 never executed
        -:  727:          {
    #####:  728:             return -1;
    $$$$$:  728-block  0
        -:  729:          }
        -:  730:    
        -:  731:       //add embargo token to selected supply pile
    #####:  732:       state->embargoTokens[choice1]++;
    #####:  733:       state->embargoTokens[choice1]++;  
        -:  734:
        -:  735:      //trash card
    #####:  736:       discardCard(handPos, currentPlayer, state, 1);
        -:  737:
    #####:  738:	return 0; 
    $$$$$:  738-block  0
        -:  739://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
    #####:  740:}
    $$$$$:  740-block  0
        -:  741:
function cardEffect called 9 returned 100% blocks executed 2%
        -:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
        9:  749:  int currentPlayer = whoseTurn(state);
        9:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
        9:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
        9:  754:  int drawntreasure=0;
        -:  755:  int cardDrawn;
        9:  756:  int z = 0;// this is the counter for the temp hand
        9:  757:  if (nextPlayer > (state->numPlayers - 1)){
        9:  757-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  758:    nextPlayer = 0;
    #####:  759:  }
    $$$$$:  759-block  0
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
        9:  763:  switch( card ) 
        9:  763-block  0
branch  0 taken 44%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 56%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  764:    {
        -:  765:    case adventurer:
        -:  766:     
        -:  767:	//call function 
        4:  768:	AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
        4:  770:	return 0;
        4:  770-block  0
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
    $$$$$:  774-block  0
    $$$$$:  774-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  774-block  2
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
    #####:  777:	}
    $$$$$:  777-block  0
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  783-block  0
    $$$$$:  783-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  783-block  2
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
    $$$$$:  785-block  0
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
    #####:  788:	    }
    $$$$$:  788-block  0
    #####:  789:	}
    $$$$$:  789-block  0
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
    $$$$$:  794-block  0
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  799-block  0
    $$$$$:  799-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  799-block  2
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  802:      }
    $$$$$:  802-block  0
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    $$$$$:  808-block  0
    $$$$$:  808-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  808-block  2
    #####:  809:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  809-block  0
branch  0 never executed
branch  1 never executed
        -:  810:	  if (DEBUG)
        -:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
    #####:  816:	}
    $$$$$:  816-block  0
    #####:  817:	else if (state->coins < getCost(choice1)){
    $$$$$:  817-block  0
branch  0 never executed
branch  1 never executed
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
    #####:  823:	}
    $$$$$:  823-block  0
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
    $$$$$:  831-block  0
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  841-block  0
    $$$$$:  841-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  841-block  2
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
    #####:  844:      }
    $$$$$:  844-block  0
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
    $$$$$:  847-block  0
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
    $$$$$:  850-block  0
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  855-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
    $$$$$:  857-block  0
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  860-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  860-block  1
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
    $$$$$:  862-block  0
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  865-block  0
branch  0 never executed
branch  1 never executed
        -:  866:	{
    #####:  867:	  return -1;
    $$$$$:  867-block  0
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  876-block  0
    $$$$$:  876-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  876-block  2
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  878-block  0
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
    $$$$$:  881-block  0
        -:  882:	    }
    #####:  883:	}
    $$$$$:  883-block  0
        -:  884:			
    #####:  885:      return 0;
    $$$$$:  885-block  0
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  890-block  0
branch  0 never executed
branch  1 never executed
        -:  891:	{
    #####:  892:	  return -1;
    $$$$$:  892-block  0
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  901-block  0
    $$$$$:  901-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  901-block  2
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  903-block  0
branch  0 never executed
branch  1 never executed
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
    $$$$$:  906-block  0
        -:  907:	    }
    #####:  908:	}
    $$$$$:  908-block  0
        -:  909:
        -:  910:
    #####:  911:      return 0;
    $$$$$:  911-block  0
        -:  912:		
        -:  913:    case smithy:
        5:  914:      	SmithyCard(currentPlayer, state, handPos);
        5:  915:	return 0;
        5:  915-block  0
        -:  916:		
        -:  917:    case village:
        -:  918:      
    #####:  919:	VillageCard(currentPlayer, state, handPos);
        -:  920:
    #####:  921:	return 0;
    $$$$$:  921-block  0
        -:  922:		
        -:  923:    case baron:
    #####:  924:      state->numBuys++;//Increase buys by 1!
    #####:  925:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  925-block  0
branch  0 never executed
branch  1 never executed
    #####:  926:	int p = 0;//Iterator for hand!
    #####:  927:	int card_not_discarded = 1;//Flag for discard set!
    #####:  928:	while(card_not_discarded){
    $$$$$:  928-block  0
    $$$$$:  928-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  928-block  2
    #####:  929:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  929-block  0
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  931:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  932:	    state->discardCount[currentPlayer]++;
    #####:  933:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  933-block  0
    $$$$$:  933-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  933-block  2
    #####:  934:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  935:	    }
    $$$$$:  935-block  0
    #####:  936:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  937:	    state->handCount[currentPlayer]--;
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
    $$$$$:  939-block  0
    #####:  940:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  940-block  0
branch  0 never executed
branch  1 never executed
        -:  941:	    if(DEBUG) {
        -:  942:	      printf("No estate cards in your hand, invalid choice\n");
        -:  943:	      printf("Must gain an estate if there are any\n");
        -:  944:	    }
    #####:  945:	    if (supplyCount(estate, state) > 0){
    $$$$$:  945-block  0
branch  0 never executed
branch  1 never executed
    #####:  946:	      gainCard(estate, state, 0, currentPlayer);
    #####:  947:	      state->supplyCount[estate]--;//Decrement estates
    #####:  948:	      if (supplyCount(estate, state) == 0){
    $$$$$:  948-block  0
branch  0 never executed
branch  1 never executed
    #####:  949:		isGameOver(state);
    #####:  950:	      }
    $$$$$:  950-block  0
    #####:  951:	    }
    $$$$$:  951-block  0
    #####:  952:	    card_not_discarded = 0;//Exit the loop
    #####:  953:	  }
    $$$$$:  953-block  0
        -:  954:			    
        -:  955:	  else{
    #####:  956:	    p++;//Next card
    $$$$$:  956-block  0
        -:  957:	  }
        -:  958:	}
    #####:  959:      }
    $$$$$:  959-block  0
        -:  960:			    
        -:  961:      else{
    #####:  962:	if (supplyCount(estate, state) > 0){
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
    #####:  963:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  964:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  965:	  if (supplyCount(estate, state) == 0){
    $$$$$:  965-block  0
branch  0 never executed
branch  1 never executed
    #####:  966:	    isGameOver(state);
    #####:  967:	  }
    $$$$$:  967-block  0
    #####:  968:	}
    $$$$$:  968-block  0
        -:  969:      }
        -:  970:	    
        -:  971:      
    #####:  972:      return 0;
    $$$$$:  972-block  0
        -:  973:		
        -:  974:    case great_hall:
        -:  975:      
    #####:  976:	GreatHallCard(currentPlayer, state, handPos);
        -:  977:
    #####:  978:	return 0;
    $$$$$:  978-block  0
        -:  979:		
        -:  980:    case minion:
        -:  981:      //+1 action
    #####:  982:      state->numActions++;
        -:  983:			
        -:  984:      //discard card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
        -:  986:			
    #####:  987:      if (choice1)		//+2 coins
    $$$$$:  987-block  0
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  state->coins = state->coins + 2;
    #####:  990:	}
    $$$$$:  990-block  0
        -:  991:			
    #####:  992:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  992-block  0
branch  0 never executed
branch  1 never executed
        -:  993:	{
        -:  994:	  //discard hand
    #####:  995:	  while(numHandCards(state) > 0)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  995-block  2
        -:  996:	    {
    #####:  997:	      discardCard(handPos, currentPlayer, state, 0);
        -:  998:	    }
        -:  999:				
        -: 1000:	  //draw 4
    #####: 1001:	  for (i = 0; i < 4; i++)
    $$$$$: 1001-block  0
    $$$$$: 1001-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1001-block  2
        -: 1002:	    {
    #####: 1003:	      drawCard(currentPlayer, state);
    #####: 1004:	    }
    $$$$$: 1004-block  0
        -: 1005:				
        -: 1006:	  //other players discard hand and redraw if hand size > 4
    #####: 1007:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1007-block  0
    $$$$$: 1007-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1007-block  2
        -: 1008:	    {
    #####: 1009:	      if (i != currentPlayer)
    $$$$$: 1009-block  0
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  if ( state->handCount[i] > 4 )
    $$$$$: 1011-block  0
branch  0 never executed
branch  1 never executed
        -: 1012:		    {
        -: 1013:		      //discard hand
    #####: 1014:		      while( state->handCount[i] > 0 )
    $$$$$: 1014-block  0
    $$$$$: 1014-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1014-block  2
        -: 1015:			{
    #####: 1016:			  discardCard(handPos, i, state, 0);
        -: 1017:			}
        -: 1018:							
        -: 1019:		      //draw 4
    #####: 1020:		      for (j = 0; j < 4; j++)
    $$$$$: 1020-block  0
    $$$$$: 1020-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1020-block  2
        -: 1021:			{
    #####: 1022:			  drawCard(i, state);
    #####: 1023:			}
    $$$$$: 1023-block  0
    #####: 1024:		    }
    $$$$$: 1024-block  0
    #####: 1025:		}
    $$$$$: 1025-block  0
    #####: 1026:	    }
    $$$$$: 1026-block  0
        -: 1027:				
    #####: 1028:	}
    $$$$$: 1028-block  0
    #####: 1029:      return 0;
    $$$$$: 1029-block  0
        -: 1030:		
        -: 1031:    case steward:
    #####: 1032:      if (choice1 == 1)
    $$$$$: 1032-block  0
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //+2 cards
    #####: 1035:	  drawCard(currentPlayer, state);
    #####: 1036:	  drawCard(currentPlayer, state);
    #####: 1037:	}
    $$$$$: 1037-block  0
    #####: 1038:      else if (choice1 == 2)
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
        -: 1039:	{
        -: 1040:	  //+2 coins
    #####: 1041:	  state->coins = state->coins + 2;
    #####: 1042:	}
    $$$$$: 1042-block  0
        -: 1043:      else
        -: 1044:	{
        -: 1045:	  //trash 2 cards in hand
    #####: 1046:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1047:	  discardCard(choice3, currentPlayer, state, 1);
    $$$$$: 1047-block  0
        -: 1048:	}
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1052:      return 0;
    $$$$$: 1052-block  0
        -: 1053:		
        -: 1054:    case tribute:
    #####: 1055:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
    #####: 1056:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	  state->deckCount[nextPlayer]--;
    #####: 1059:	}
    $$$$$: 1059-block  0
    #####: 1060:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1060-block  0
branch  0 never executed
branch  1 never executed
    #####: 1061:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1062:	  state->discardCount[nextPlayer]--;
    #####: 1063:	}
    $$$$$: 1063-block  0
        -: 1064:	else{
        -: 1065:	  //No Card to Reveal
        -: 1066:	  if (DEBUG){
        -: 1067:	    printf("No cards to reveal\n");
        -: 1068:	  }
        -: 1069:	}
    #####: 1070:      }
    $$$$$: 1070-block  0
        -: 1071:	    
        -: 1072:      else{
    #####: 1073:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    #####: 1074:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1074-block  0
    $$$$$: 1074-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1074-block  2
    #####: 1075:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1076:	    state->deckCount[nextPlayer]++;
    #####: 1077:	    state->discard[nextPlayer][i] = -1;
    #####: 1078:	    state->discardCount[nextPlayer]--;
    #####: 1079:	  }
    $$$$$: 1079-block  0
        -: 1080:			    
    #####: 1081:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1082:	} 
    $$$$$: 1082-block  0
    #####: 1083:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
    #####: 1086:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1088:	state->deckCount[nextPlayer]--;
    $$$$$: 1088-block  0
        -: 1089:      }    
        -: 1090:		       
    #####: 1091:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    #####: 1092:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1093:	state->playedCardCount++;
    #####: 1094:	tributeRevealedCards[1] = -1;
    #####: 1095:      }
    $$$$$: 1095-block  0
        -: 1096:
    #####: 1097:      for (i = 0; i <= 2; i ++){
    $$$$$: 1097-block  0
    $$$$$: 1097-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1097-block  2
    #####: 1098:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1098-block  2
branch  4 never executed
branch  5 never executed
    #####: 1099:	  state->coins += 2;
    #####: 1100:	}
    $$$$$: 1100-block  0
        -: 1101:		    
    #####: 1102:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1102-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1102-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1102-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1102-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1102-block  4
branch  8 never executed
branch  9 never executed
    #####: 1103:	  drawCard(currentPlayer, state);
    #####: 1104:	  drawCard(currentPlayer, state);
    #####: 1105:	}
    $$$$$: 1105-block  0
        -: 1106:	else{//Action Card
    #####: 1107:	  state->numActions = state->numActions + 2;
    $$$$$: 1107-block  0
        -: 1108:	}
    #####: 1109:      }
    $$$$$: 1109-block  0
        -: 1110:	    
    #####: 1111:      return 0;
    $$$$$: 1111-block  0
        -: 1112:		
        -: 1113:    case ambassador:
    #####: 1114:      j = 0;		//used to check if player has enough cards to discard
        -: 1115:
    #####: 1116:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1116-block  1
branch  2 never executed
branch  3 never executed
        -: 1117:	{
    #####: 1118:	  return -1;				
    $$$$$: 1118-block  0
        -: 1119:	}
        -: 1120:
    #####: 1121:      if (choice1 == handPos)
    $$$$$: 1121-block  0
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  return -1;
    $$$$$: 1123-block  0
        -: 1124:	}
        -: 1125:
    #####: 1126:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1126-block  0
    $$$$$: 1126-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1126-block  2
        -: 1127:	{
    #####: 1128:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1128-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1128-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1128-block  2
branch  4 never executed
branch  5 never executed
        -: 1129:	    {
    #####: 1130:	      j++;
    #####: 1131:	    }
    $$$$$: 1131-block  0
    #####: 1132:	}
    $$$$$: 1132-block  0
    #####: 1133:      if (j < choice2)
    $$$$$: 1133-block  0
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  return -1;				
    $$$$$: 1135-block  0
        -: 1136:	}
        -: 1137:
        -: 1138:      if (DEBUG) 
        -: 1139:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1140:
        -: 1141:      //increase supply count for choosen card by amount being discarded
    #####: 1142:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1143:			
        -: 1144:      //each other player gains a copy of revealed card
    #####: 1145:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1145-block  0
    $$$$$: 1145-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1145-block  2
        -: 1146:	{
    #####: 1147:	  if (i != currentPlayer)
    $$$$$: 1147-block  0
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1150:	    }
    $$$$$: 1150-block  0
    #####: 1151:	}
    $$$$$: 1151-block  0
        -: 1152:
        -: 1153:      //discard played card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1155:
        -: 1156:      //trash copies of cards returned to supply
    #####: 1157:      for (j = 0; j < choice2; j++)
    $$$$$: 1157-block  0
    $$$$$: 1157-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1157-block  2
        -: 1158:	{
    #####: 1159:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1159-block  0
    $$$$$: 1159-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1159-block  2
        -: 1160:	    {
    #####: 1161:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1161-block  0
branch  0 never executed
branch  1 never executed
        -: 1162:		{
    #####: 1163:		  discardCard(i, currentPlayer, state, 1);
    #####: 1164:		  break;
    $$$$$: 1164-block  0
        -: 1165:		}
    #####: 1166:	    }
    $$$$$: 1166-block  0
    #####: 1167:	}			
    $$$$$: 1167-block  0
        -: 1168:
    #####: 1169:      return 0;
    $$$$$: 1169-block  0
        -: 1170:		
        -: 1171:    case cutpurse:
        -: 1172:
    #####: 1173:      updateCoins(currentPlayer, state, 2);
    #####: 1174:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1174-block  0
    $$$$$: 1174-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1174-block  2
        -: 1175:	{
    #####: 1176:	  if (i != currentPlayer)
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1178-block  0
    $$$$$: 1178-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1178-block  2
        -: 1179:		{
    #####: 1180:		  if (state->hand[i][j] == copper)
    $$$$$: 1180-block  0
branch  0 never executed
branch  1 never executed
        -: 1181:		    {
    #####: 1182:		      discardCard(j, i, state, 0);
    #####: 1183:		      break;
    $$$$$: 1183-block  0
        -: 1184:		    }
    #####: 1185:		  if (j == state->handCount[i])
    $$$$$: 1185-block  0
branch  0 never executed
branch  1 never executed
        -: 1186:		    {
    #####: 1187:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1187-block  0
    $$$$$: 1187-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1187-block  2
        -: 1188:			{
        -: 1189:			  if (DEBUG)
        -: 1190:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1191:			}	
    $$$$$: 1191-block  0
    #####: 1192:		      break;
    $$$$$: 1192-block  0
        -: 1193:		    }		
    #####: 1194:		}
    $$$$$: 1194-block  0
        -: 1195:					
    #####: 1196:	    }
    $$$$$: 1196-block  0
        -: 1197:				
    #####: 1198:	}				
    $$$$$: 1198-block  0
        -: 1199:
        -: 1200:      //discard played card from hand
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1202:
    #####: 1203:      return 0;
    $$$$$: 1203-block  0
        -: 1204:
        -: 1205:		
        -: 1206:    case embargo: 
        -: 1207:      
    #####: 1208:	EmbargoCard(currentPlayer, handPos, state, choice1); 
    #####: 1209:	return 0;
    $$$$$: 1209-block  0
        -: 1210:		
        -: 1211:    case outpost:
        -: 1212:      //set outpost flag
    #####: 1213:      state->outpostPlayed++;
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:      return 0;
    $$$$$: 1217-block  0
        -: 1218:		
        -: 1219:    case salvager:
        -: 1220:      //+1 buy
    #####: 1221:      state->numBuys++;
        -: 1222:			
    #####: 1223:      if (choice1)
    $$$$$: 1223-block  0
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //gain coins equal to trashed card
    #####: 1226:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1227:	  //trash card
    #####: 1228:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1229:	}
    $$$$$: 1229-block  0
        -: 1230:			
        -: 1231:      //discard card
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1233:      return 0;
    $$$$$: 1233-block  0
        -: 1234:		
        -: 1235:    case sea_hag:
    #####: 1236:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1236-block  0
    $$$$$: 1236-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1236-block  2
    #####: 1237:	if (i != currentPlayer){
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    #####: 1238:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1239:	  state->discardCount[i]++;
    #####: 1240:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1241:	}
    $$$$$: 1241-block  0
    #####: 1242:      }
    $$$$$: 1242-block  0
    #####: 1243:      return 0;
    $$$$$: 1243-block  0
        -: 1244:		
        -: 1245:    case treasure_map:
        -: 1246:      //search hand for another treasure_map
    #####: 1247:      index = -1;
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1248-block  0
    $$$$$: 1248-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1248-block  2
        -: 1249:	{
    #####: 1250:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1250-block  1
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      index = i;
    #####: 1253:	      break;
    $$$$$: 1253-block  0
        -: 1254:	    }
    #####: 1255:	}
    $$$$$: 1255-block  0
    #####: 1256:      if (index > -1)
    $$$$$: 1256-block  0
branch  0 never executed
branch  1 never executed
        -: 1257:	{
        -: 1258:	  //trash both treasure cards
    #####: 1259:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1260:	  discardCard(index, currentPlayer, state, 1);
        -: 1261:
        -: 1262:	  //gain 4 Gold cards
    #####: 1263:	  for (i = 0; i < 4; i++)
    $$$$$: 1263-block  0
    $$$$$: 1263-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1263-block  2
        -: 1264:	    {
    #####: 1265:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1266:	    }
    $$$$$: 1266-block  0
        -: 1267:				
        -: 1268:	  //return success
    #####: 1269:	  return 1;
    $$$$$: 1269-block  0
        -: 1270:	}
        -: 1271:			
        -: 1272:      //no second treasure_map found in hand
    #####: 1273:      return -1;
    $$$$$: 1273-block  0
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return -1;
    $$$$$: 1276-block  0
        9: 1277:}
        9: 1277-block  0
        -: 1278:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
    #####: 1283:  if (trashFlag < 1)
    $$$$$: 1283-block  0
branch  0 never executed
branch  1 never executed
        -: 1284:    {
        -: 1285:      //add card to played pile
    #####: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1287:      state->playedCardCount++;
    #####: 1288:    }
    $$$$$: 1288-block  0
        -: 1289:	
        -: 1290:  //set played card to -1
    #####: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
    #####: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    $$$$$: 1294-block  0
branch  0 never executed
branch  1 never executed
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
    $$$$$: 1298-block  0
    #####: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    $$$$$: 1299-block  0
branch  0 never executed
branch  1 never executed
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
    $$$$$: 1303-block  0
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
    #####: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
    #####: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
    #####: 1311:      state->handCount[currentPlayer]--;
    $$$$$: 1311-block  0
        -: 1312:    }
        -: 1313:	
    #####: 1314:  return 0;
    $$$$$: 1314-block  0
        -: 1315:}
        -: 1316:
function gainCard called 5 returned 100% blocks executed 81%
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        5: 1322-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1323:    {
    #####: 1324:      return -1;
    $$$$$: 1324-block  0
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
        5: 1332:  if (toFlag == 1)
        5: 1332-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
    $$$$$: 1336-block  0
        5: 1337:  else if (toFlag == 2)
        5: 1337-block  0
branch  0 taken 20%
branch  1 taken 80%
        -: 1338:    {
        1: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1340:      state->handCount[player]++;
        1: 1341:    }
        1: 1341-block  0
        -: 1342:  else
        -: 1343:    {
        4: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1345:      state->discardCount[player]++;
        4: 1345-block  0
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
        5: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
        5: 1351:  return 0;
        5: 1351-block  0
        5: 1352:}
        5: 1352-block  0
        -: 1353:
function updateCoins called 9 returned 100% blocks executed 100%
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
        9: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       45: 1362:  for (i = 0; i < state->handCount[player]; i++)
        9: 1362-block  0
       45: 1362-block  1
branch  0 taken 80%
branch  1 taken 20%
       36: 1362-block  2
        -: 1363:    {
       36: 1364:      if (state->hand[player][i] == copper)
       36: 1364-block  0
branch  0 taken 72%
branch  1 taken 28%
        -: 1365:	{
       26: 1366:	  state->coins += 1;
       26: 1367:	}
       26: 1367-block  0
       10: 1368:      else if (state->hand[player][i] == silver)
       10: 1368-block  0
branch  0 taken 20%
branch  1 taken 80%
        -: 1369:	{
        2: 1370:	  state->coins += 2;
        2: 1371:	}
        2: 1371-block  0
        8: 1372:      else if (state->hand[player][i] == gold)
        8: 1372-block  0
branch  0 taken 25%
branch  1 taken 75%
        -: 1373:	{
        2: 1374:	  state->coins += 3;
        2: 1375:	}	
        2: 1375-block  0
       36: 1376:    }	
       36: 1376-block  0
        -: 1377:
        -: 1378:  //add bonus
        9: 1379:  state->coins += bonus;
        -: 1380:
        9: 1381:  return 0;
        9: 1381-block  0
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
----------------- Testing Card: council_room ----------------
TEST 1: +4 Cards 
hand count = 8, expected = 8
deck count = 1, expected = 1

TEST 2: +1 Buy
buy count = 2, expected = 2

TEST 3: Each other player draws a card
Player 0 plays the card.
Player 0 hand count 8, expected 8
Player 0 deck count 1, expected 1
Player 1 hand count 1, expected 5
Player 1 deck count 9, expected 4

TEST 4: Council Room cost test
Buy Council Room with 5 coins: 0 expected: 0
Buy Council Room with 1 coins: -1 expected: -1

TEST 5: No state change should occur to the victory card piles and kingdom card piles
Before play council_room card
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 100 expected: 98
Player 0 plays council_room.
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 100 expected: 98

 >>>>> Failsure: Testing complete council_room <<<<<

File 'dominion.c'
Lines executed:35.28% of 652
Branches executed:42.45% of 417
Taken at least once:27.58% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 219 returned 100% blocks executed 100%
        -:   10:int compare(const void* a, const void* b) {
      219:   11:  if (*(int*)a > *(int*)b)
      219:   11-block  0
branch  0 taken 3%
branch  1 taken 97%
        6:   12:    return 1;
        6:   12-block  0
      213:   13:  if (*(int*)a < *(int*)b)
      213:   13-block  0
branch  0 taken 34%
branch  1 taken 66%
       73:   14:    return -1;
       73:   14-block  0
      140:   15:  return 0;
      140:   15-block  0
      219:   16:}
      219:   16-block  0
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    $$$$$:   19-block  0
    #####:   20:  return g;
    $$$$$:   20-block  0
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
    $$$$$:   36-block  0
        -:   37:}
        -:   38:
function initializeGame called 7 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        7:   46:  SelectStream(1);
        7:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        7:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        7:   50-block  0
branch  0 taken 100%
branch  1 taken 0%
        7:   50-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
    $$$$$:   52-block  0
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        7:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       77:   59:  for (i = 0; i < 10; i++)
        7:   59-block  0
       77:   59-block  1
branch  0 taken 91%
branch  1 taken 9%
       70:   59-block  2
        -:   60:    {
      770:   61:      for (j = 0; j < 10; j++)
       70:   61-block  0
      770:   61-block  1
branch  0 taken 91%
branch  1 taken 9%
      700:   61-block  2
        -:   62:        {
      700:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      700:   63-block  0
branch  0 taken 90%
branch  1 taken 10%
      630:   63-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
    $$$$$:   65-block  0
        -:   66:	    }
      700:   67:        }
      700:   67-block  0
       70:   68:    }
       70:   68-block  0
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        7:   75:  if (numPlayers == 2)
        7:   75-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        7:   77:      state->supplyCount[curse] = 10;
        7:   78:    }
        7:   78-block  0
    #####:   79:  else if (numPlayers == 3)
    $$$$$:   79-block  0
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
    $$$$$:   82-block  0
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
    $$$$$:   85-block  0
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        7:   89:  if (numPlayers == 2)
        7:   89-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        7:   91:      state->supplyCount[estate] = 8;
        7:   92:      state->supplyCount[duchy] = 8;
        7:   93:      state->supplyCount[province] = 8;
        7:   94:    }
        7:   94-block  0
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
    $$$$$:   99-block  0
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        7:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  104:  state->supplyCount[silver] = 40;
        7:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      147:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        7:  108-block  0
      147:  108-block  1
branch  0 taken 95%
branch  1 taken 5%
      140:  108-block  2
        -:  109:    {
     1155:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
      140:  110-block  0
     1155:  110-block  1
branch  0 taken 94%
branch  1 taken 6%
     1015:  110-block  2
        -:  111:	{
     1085:  112:	  if (kingdomCards[j] == i)
     1085:  112-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       70:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       70:  115-block  0
branch  0 taken 100%
branch  1 taken 0%
       70:  115-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    $$$$$:  117-block  0
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    $$$$$:  119-block  0
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  120-block  0
    #####:  121:		}
    $$$$$:  121-block  0
        -:  122:	      else
        -:  123:		{
       70:  124:		  state->supplyCount[i] = 10;
       70:  124-block  0
        -:  125:		}
       70:  126:	      break;
       70:  126-block  0
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     1015:  130:	      state->supplyCount[i] = -1;
     1015:  130-block  0
        -:  131:	    }
     1015:  132:	}
     1015:  132-block  0
        -:  133:
      140:  134:    }
      140:  134-block  0
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       21:  140:  for (i = 0; i < numPlayers; i++)
        7:  140-block  0
       21:  140-block  1
branch  0 taken 67%
branch  1 taken 33%
       14:  140-block  2
        -:  141:    {
       14:  142:      state->deckCount[i] = 0;
       56:  143:      for (j = 0; j < 3; j++)
       14:  143-block  0
       56:  143-block  1
branch  0 taken 75%
branch  1 taken 25%
       42:  143-block  2
        -:  144:	{
       42:  145:	  state->deck[i][j] = estate;
       42:  146:	  state->deckCount[i]++;
       42:  147:	}
       42:  147-block  0
      112:  148:      for (j = 3; j < 10; j++)
       14:  148-block  0
      112:  148-block  1
branch  0 taken 88%
branch  1 taken 13%
       98:  148-block  2
        -:  149:	{
       98:  150:	  state->deck[i][j] = copper;
       98:  151:	  state->deckCount[i]++;		
       98:  152:	}
       98:  152-block  0
       14:  153:    }
       14:  153-block  0
        -:  154:
        -:  155:  //shuffle player decks
       21:  156:  for (i = 0; i < numPlayers; i++)
        7:  156-block  0
       21:  156-block  1
branch  0 taken 67%
branch  1 taken 33%
       14:  156-block  2
        -:  157:    {
       14:  158:      if ( shuffle(i, state) < 0 )
       14:  158-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
    $$$$$:  160-block  0
        -:  161:	}
       14:  162:    }
       14:  162-block  0
        -:  163:
        -:  164:  //draw player hands
       21:  165:  for (i = 0; i < numPlayers; i++)
        7:  165-block  0
       21:  165-block  1
branch  0 taken 67%
branch  1 taken 33%
       14:  165-block  2
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       14:  168:      state->handCount[i] = 0;
       14:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
       14:  175:    }
       14:  175-block  0
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      196:  178:  for (i = 0; i <= treasure_map; i++)
        7:  178-block  0
      196:  178-block  1
branch  0 taken 96%
branch  1 taken 4%
      189:  178-block  2
        -:  179:    {
      189:  180:      state->embargoTokens[i] = 0;
      189:  181:    }
      189:  181-block  0
        -:  182:
        -:  183:  //initialize first player's turn
        7:  184:  state->outpostPlayed = 0;
        7:  185:  state->phase = 0;
        7:  186:  state->numActions = 1;
        7:  187:  state->numBuys = 1;
        7:  188:  state->playedCardCount = 0;
        7:  189:  state->whoseTurn = 0;
        7:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       42:  194:  for (it = 0; it < 5; it++){
        7:  194-block  0
       42:  194-block  1
branch  0 taken 83%
branch  1 taken 17%
       35:  194-block  2
       35:  195:    drawCard(state->whoseTurn, state);
       35:  196:  }
       35:  196-block  0
        -:  197:
        7:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        7:  200:  return 0;
        7:  200-block  0
        7:  201:}
        7:  201-block  0
        -:  202:
function shuffle called 46 returned 100% blocks executed 100%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       46:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       46:  211:  if (state->deckCount[player] < 1)
       46:  211-block  0
branch  0 taken 57%
branch  1 taken 43%
       26:  212:    return -1;
       26:  212-block  0
       20:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      184:  216:  while (state->deckCount[player] > 0) {
       20:  216-block  0
      184:  216-block  1
branch  0 taken 89%
branch  1 taken 11%
      164:  216-block  2
      164:  217:    card = floor(Random() * state->deckCount[player]);
      164:  218:    newDeck[newDeckPos] = state->deck[player][card];
      164:  219:    newDeckPos++;
      535:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      164:  220-block  0
      535:  220-block  1
branch  0 taken 69%
branch  1 taken 31%
      371:  220-block  2
      371:  221:      state->deck[player][i] = state->deck[player][i+1];
      371:  222:    }
      371:  222-block  0
      164:  223:    state->deckCount[player]--;
        -:  224:  }
      184:  225:  for (i = 0; i < newDeckPos; i++) {
       20:  225-block  0
      184:  225-block  1
branch  0 taken 89%
branch  1 taken 11%
      164:  225-block  2
      164:  226:    state->deck[player][i] = newDeck[i];
      164:  227:    state->deckCount[player]++;
      164:  228:  }
      164:  228-block  0
        -:  229:
       20:  230:  return 0;
       20:  230-block  0
       46:  231:}
       46:  231-block  0
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
    $$$$$:  239-block  0
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
    $$$$$:  241-block  0
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
    $$$$$:  245-block  0
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
    $$$$$:  247-block  0
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
    $$$$$:  254-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  254-block  1
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
    $$$$$:  256-block  0
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  260-block  0
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
    $$$$$:  262-block  0
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    $$$$$:  271-block  0
    #####:  272:}
    $$$$$:  272-block  0
        -:  273:
function buyCard called 12 returned 100% blocks executed 83%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
       12:  282:  who = state->whoseTurn;
        -:  283:
       12:  284:  if (state->numBuys < 1){
       12:  284-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    $$$$$:  287-block  0
       12:  288:  } else if (supplyCount(supplyPos, state) <1){
       12:  288-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    $$$$$:  291-block  0
       12:  292:  } else if (state->coins < getCost(supplyPos)){
       12:  292-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        6:  295:    return -1;
        6:  295-block  0
        -:  296:  } else {
        6:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
        6:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
        6:  301:    state->coins = (state->coins) - (getCost(supplyPos));
        6:  302:    state->numBuys--;
        6:  302-block  0
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
        6:  310:  return 0;
        6:  310-block  0
       12:  311:}
       12:  311-block  0
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  314-block  0
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
    $$$$$:  319-block  0
        -:  320:}
        -:  321:
function supplyCount called 136 returned 100% blocks executed 100%
        -:  322:int supplyCount(int card, struct gameState *state) {
      136:  323:  return state->supplyCount[card];
      136:  323-block  0
        -:  324:}
        -:  325:
function fullDeckCount called 10 returned 100% blocks executed 100%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
       10:  328:  int count = 0;
        -:  329:
       40:  330:  for (i = 0; i < state->deckCount[player]; i++)
       10:  330-block  0
       40:  330-block  1
branch  0 taken 75%
branch  1 taken 25%
       30:  330-block  2
        -:  331:    {
       30:  332:      if (state->deck[player][i] == card) count++;
       30:  332-block  0
branch  0 taken 13%
branch  1 taken 87%
        4:  332-block  1
       30:  333:    }
       30:  333-block  0
        -:  334:
       64:  335:  for (i = 0; i < state->handCount[player]; i++)
       10:  335-block  0
       64:  335-block  1
branch  0 taken 84%
branch  1 taken 16%
       54:  335-block  2
        -:  336:    {
       54:  337:      if (state->hand[player][i] == card) count++;
       54:  337-block  0
branch  0 taken 15%
branch  1 taken 85%
        8:  337-block  1
       54:  338:    }
       54:  338-block  0
        -:  339:
       12:  340:  for (i = 0; i < state->discardCount[player]; i++)
       10:  340-block  0
       12:  340-block  1
branch  0 taken 17%
branch  1 taken 83%
        2:  340-block  2
        -:  341:    {
        2:  342:      if (state->discard[player][i] == card) count++;
        2:  342-block  0
branch  0 taken 100%
branch  1 taken 0%
        2:  342-block  1
        2:  343:    }
        2:  343-block  0
        -:  344:
       10:  345:  return count;
       10:  345-block  0
        -:  346:}
        -:  347:
function whoseTurn called 13 returned 100% blocks executed 100%
        -:  348:int whoseTurn(struct gameState *state) {
       13:  349:  return state->whoseTurn;
       13:  349-block  0
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  358-block  0
    $$$$$:  358-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  358-block  2
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    $$$$$:  361-block  0
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  365-block  0
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
    $$$$$:  367-block  0
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  369-block  0
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    $$$$$:  382-block  0
    $$$$$:  382-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  382-block  2
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
    $$$$$:  384-block  0
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
    $$$$$:  389-block  0
        -:  390:}
        -:  391:
function isGameOver called 6 returned 100% blocks executed 100%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        6:  397-block  0
branch  0 taken 33%
branch  1 taken 67%
        -:  398:    {
        2:  399:      return 1;
        2:  399-block  0
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        4:  404-block  0
      104:  404-block  1
branch  0 taken 96%
branch  1 taken 4%
      100:  404-block  2
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
      100:  406-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  407:	{
        6:  408:	  j++;
        6:  409:	}
        6:  409-block  0
      100:  410:    }
      100:  410-block  0
        4:  411:  if ( j >= 3)
        4:  411-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  412:    {
        2:  413:      return 1;
        2:  413-block  0
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        2:  416-block  0
        6:  417:}
        6:  417-block  0
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  424-block  0
    $$$$$:  424-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  2
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  430-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  430-block  1
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  431-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  431-block  1
    #####:  432:    }
    $$$$$:  432-block  0
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  435-block  0
    $$$$$:  435-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  2
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  441-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  441-block  1
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  442-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  442-block  1
    #####:  443:    }
    $$$$$:  443-block  0
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  446-block  0
    $$$$$:  446-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  2
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  452-block  1
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  453-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  453-block  1
    #####:  454:    }
    $$$$$:  454-block  0
        -:  455:
    #####:  456:  return score;
    $$$$$:  456-block  0
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  466-block  0
    $$$$$:  466-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  466-block  2
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
    $$$$$:  469-block  0
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
    $$$$$:  472-block  0
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
    $$$$$:  475-block  0
        -:  476:	}
    #####:  477:    }
    $$$$$:  477-block  0
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  481-block  0
    $$$$$:  481-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  481-block  2
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
    $$$$$:  483-block  0
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    $$$$$:  486-block  0
    #####:  487:    }
    $$$$$:  487-block  0
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  492-block  0
    $$$$$:  492-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  2
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  494-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  494-block  1
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    $$$$$:  497-block  0
    #####:  498:    }
    $$$$$:  498-block  0
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  502-block  0
    $$$$$:  502-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  502-block  2
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
    $$$$$:  504-block  0
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    $$$$$:  507-block  0
    #####:  508:    }
    $$$$$:  508-block  0
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  512-block  0
    $$$$$:  512-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  512-block  2
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
    $$$$$:  514-block  0
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
    $$$$$:  517-block  0
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
    $$$$$:  520-block  0
        -:  521:	}
    #####:  522:    }
    $$$$$:  522-block  0
        -:  523:
    #####:  524:  return 0;
    $$$$$:  524-block  0
        -:  525:}
        -:  526:
function drawCard called 112 returned 100% blocks executed 100%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      112:  530:  if (state->deckCount[player] <= 0){//Deck is empty
      112:  530-block  0
branch  0 taken 14%
branch  1 taken 86%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
       25:  535:    for (i = 0; i < state->discardCount[player];i++){
       16:  535-block  0
       25:  535-block  1
branch  0 taken 36%
branch  1 taken 64%
        9:  535-block  2
        9:  536:      state->deck[player][i] = state->discard[player][i];
        9:  537:      state->discard[player][i] = -1;
        9:  538:    }
        9:  538-block  0
        -:  539:
       16:  540:    state->deckCount[player] = state->discardCount[player];
       16:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
       16:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
       16:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
       16:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
       16:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
       16:  561:    if (deckCounter == 0)
       16:  561-block  0
branch  0 taken 81%
branch  1 taken 19%
       13:  562:      return -1;
       13:  562-block  0
        -:  563:
        3:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  565:    state->deckCount[player]--;
        3:  566:    state->handCount[player]++;//Increment hand count
        3:  567:  }
        3:  567-block  0
        -:  568:
        -:  569:  else{
       96:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       96:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       96:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       96:  578:    state->deckCount[player]--;
       96:  579:    state->handCount[player]++;//Increment hand count
       96:  579-block  0
        -:  580:  }
        -:  581:
       99:  582:  return 0;
       99:  582-block  0
      112:  583:}
      112:  583-block  0
        -:  584:
function getCost called 18 returned 100% blocks executed 19%
        -:  585:int getCost(int cardNumber)
        -:  586:{
       18:  587:  switch( cardNumber ) 
       18:  587-block  0
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 33%
branch  8 taken 33%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 33%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
    $$$$$:  590-block  0
        -:  591:    case estate:
    #####:  592:      return 2;
    $$$$$:  592-block  0
        -:  593:    case duchy:
    #####:  594:      return 5;
    $$$$$:  594-block  0
        -:  595:    case province:
    #####:  596:      return 8;
    $$$$$:  596-block  0
        -:  597:    case copper:
    #####:  598:      return 0;
    $$$$$:  598-block  0
        -:  599:    case silver:
    #####:  600:      return 3;
    $$$$$:  600-block  0
        -:  601:    case gold:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case adventurer:
        6:  604:      return 6;
        6:  604-block  0
        -:  605:    case council_room:
        6:  606:      return 5;
        6:  606-block  0
        -:  607:    case feast:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case gardens:
    #####:  610:      return 4;
    $$$$$:  610-block  0
        -:  611:    case mine:
    #####:  612:      return 5;
    $$$$$:  612-block  0
        -:  613:    case remodel:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case smithy:
        6:  616:      return 4;
        6:  616-block  0
        -:  617:    case village:
    #####:  618:      return 3;
    $$$$$:  618-block  0
        -:  619:    case baron:
    #####:  620:      return 4;
    $$$$$:  620-block  0
        -:  621:    case great_hall:
    #####:  622:      return 3;
    $$$$$:  622-block  0
        -:  623:    case minion:
    #####:  624:      return 5;
    $$$$$:  624-block  0
        -:  625:    case steward:
    #####:  626:      return 3;
    $$$$$:  626-block  0
        -:  627:    case tribute:
    #####:  628:      return 5;
    $$$$$:  628-block  0
        -:  629:    case ambassador:
    #####:  630:      return 3;
    $$$$$:  630-block  0
        -:  631:    case cutpurse:
    #####:  632:      return 4;
    $$$$$:  632-block  0
        -:  633:    case embargo: 
    #####:  634:      return 2;
    $$$$$:  634-block  0
        -:  635:    case outpost:
    #####:  636:      return 5;
    $$$$$:  636-block  0
        -:  637:    case salvager:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case sea_hag:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    case treasure_map:
    #####:  642:      return 4;
    $$$$$:  642-block  0
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    $$$$$:  645-block  0
       18:  646:}
       18:  646-block  0
        -:  647:
        -:  648:
function SmithyCard called 6 returned 100% blocks executed 100%
        -:  649:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  650:
        -:  651:  //+3 Cards
        -:  652:  int i;
       36:  653:  for (i = 0; i < 5; i++)
        6:  653-block  0
       36:  653-block  1
branch  0 taken 83%
branch  1 taken 17%
       30:  653-block  2
        -:  654:  {
       30:  655:      drawCard(currentPlayer, state);
       30:  656:  }
       30:  656-block  0
        -:  657:   //discard card from hand
        -:  658:   //discardCard(handPos, currentPlayer, state, 0);
        6:  659:   return 0;
        6:  659-block  0
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:
        -:  662:}
        -:  663:
function AdventurerCard called 4 returned 100% blocks executed 100%
        -:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
       36:  666:  while(drawntreasure<5){
        4:  666-block  0
       36:  666-block  1
branch  0 taken 89%
branch  1 taken 11%
       32:  666-block  2
       32:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       32:  667-block  0
branch  0 taken 34%
branch  1 taken 66%
       11:  668:          shuffle(currentPlayer, state);
       11:  669:        }
       11:  669-block  0
       32:  670:        drawCard(currentPlayer, state);
       32:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       32:  672:        if (cardDrawn == gold || cardDrawn == silver || cardDrawn == copper)
       32:  672-block  0
branch  0 taken 100%
branch  1 taken 0%
       32:  672-block  1
branch  2 taken 100%
branch  3 taken 0%
       32:  672-block  2
branch  4 taken 63%
branch  5 taken 38%
       20:  673:		drawntreasure++;
       20:  673-block  0
        -:  674:        else{
       12:  675:          temphand[z]=cardDrawn;
       12:  676:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       12:  677:          z++;
       12:  677-block  0
        -:  678:        }
        -:  679:      }
       16:  680:      while(z-1>=0){
        4:  680-block  0
       16:  680-block  1
branch  0 taken 75%
branch  1 taken 25%
       12:  680-block  2
       12:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       12:  682:        z=z-1;
        -:  683:      }
        -:  684:
        4:  685:  return 0;
        4:  685-block  0
        -:  686:// bug introduced: player is able to draw 5 treasure cards instead of 2. 
        -:  687:}
        -:  688:
        -:  689:
function VillageCard called 0 returned 0% blocks executed 0%
        -:  690:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  691:
        -:  692:   //+1 Card
    #####:  693:   drawCard(currentPlayer, state);
    #####:  694:   drawCard(currentPlayer, state);	
    #####:  695:drawCard(currentPlayer, state);
        -:  696:
        -:  697:   //+2 Actions
    #####:  698:   state->numActions = state->numActions + 10;
        -:  699:  
        -:  700:    //discard played card from hand
    #####:  701:    discardCard(handPos, currentPlayer, state, 0);
        -:  702:
    #####:  703:  return 0; 
    $$$$$:  703-block  0
        -:  704:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1 
        -:  705:}
        -:  706:
function GreatHallCard called 0 returned 0% blocks executed 0%
        -:  707:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  708:
        -:  709:      //+1 Card
    #####:  710:      drawCard(currentPlayer, state);
        -:  711:
        -:  712:      //+1 Actions
    #####:  713:      state->numActions++;
        -:  714:
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
        -:  717:      
    #####:  718:      return 0;   
    $$$$$:  718-block  0
        -:  719:}
        -:  720:
function EmbargoCard called 0 returned 0% blocks executed 0%
        -:  721:int EmbargoCard(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  722:
    #####:  723:	state->coins = state->coins + 20;
        -:  724:
        -:  725:      //see if selected pile is in play
    #####:  726:       if ( state->supplyCount[choice1] == -1 )
    $$$$$:  726-block  0
branch  0 never executed
branch  1 never executed
        -:  727:          {
    #####:  728:             return -1;
    $$$$$:  728-block  0
        -:  729:          }
        -:  730:    
        -:  731:       //add embargo token to selected supply pile
    #####:  732:       state->embargoTokens[choice1]++;
    #####:  733:       state->embargoTokens[choice1]++;  
        -:  734:
        -:  735:      //trash card
    #####:  736:       discardCard(handPos, currentPlayer, state, 1);
        -:  737:
    #####:  738:	return 0; 
    $$$$$:  738-block  0
        -:  739://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
    #####:  740:}
    $$$$$:  740-block  0
        -:  741:
function cardEffect called 13 returned 100% blocks executed 7%
        -:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
       13:  749:  int currentPlayer = whoseTurn(state);
       13:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
       13:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
       13:  754:  int drawntreasure=0;
        -:  755:  int cardDrawn;
       13:  756:  int z = 0;// this is the counter for the temp hand
       13:  757:  if (nextPlayer > (state->numPlayers - 1)){
       13:  757-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  758:    nextPlayer = 0;
    #####:  759:  }
    $$$$$:  759-block  0
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
       13:  763:  switch( card ) 
       13:  763-block  0
branch  0 taken 31%
branch  1 taken 23%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 46%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  764:    {
        -:  765:    case adventurer:
        -:  766:     
        -:  767:	//call function 
        4:  768:	AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
        4:  770:	return 0;
        4:  770-block  0
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
       15:  774:      for (i = 0; i < 4; i++)
        3:  774-block  0
       15:  774-block  1
branch  0 taken 80%
branch  1 taken 20%
       12:  774-block  2
        -:  775:	{
       12:  776:	  drawCard(currentPlayer, state);
       12:  777:	}
       12:  777-block  0
        -:  778:			
        -:  779:      //+1 Buy
        3:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
        9:  783:      for (i = 0; i < state->numPlayers; i++)
        3:  783-block  0
        9:  783-block  1
branch  0 taken 67%
branch  1 taken 33%
        6:  783-block  2
        -:  784:	{
        6:  785:	  if ( i != currentPlayer )
        6:  785-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  786:	    {
        3:  787:	      drawCard(i, state);
        3:  788:	    }
        3:  788-block  0
        6:  789:	}
        6:  789-block  0
        -:  790:			
        -:  791:      //put played card in played card pile
        3:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
        3:  794:      return 0;
        3:  794-block  0
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  799-block  0
    $$$$$:  799-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  799-block  2
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  802:      }
    $$$$$:  802-block  0
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    $$$$$:  808-block  0
    $$$$$:  808-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  808-block  2
    #####:  809:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  809-block  0
branch  0 never executed
branch  1 never executed
        -:  810:	  if (DEBUG)
        -:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
    #####:  816:	}
    $$$$$:  816-block  0
    #####:  817:	else if (state->coins < getCost(choice1)){
    $$$$$:  817-block  0
branch  0 never executed
branch  1 never executed
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
    #####:  823:	}
    $$$$$:  823-block  0
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
    $$$$$:  831-block  0
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  841-block  0
    $$$$$:  841-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  841-block  2
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
    #####:  844:      }
    $$$$$:  844-block  0
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
    $$$$$:  847-block  0
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
    $$$$$:  850-block  0
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  855-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
    $$$$$:  857-block  0
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  860-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  860-block  1
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
    $$$$$:  862-block  0
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  865-block  0
branch  0 never executed
branch  1 never executed
        -:  866:	{
    #####:  867:	  return -1;
    $$$$$:  867-block  0
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  876-block  0
    $$$$$:  876-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  876-block  2
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  878-block  0
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
    $$$$$:  881-block  0
        -:  882:	    }
    #####:  883:	}
    $$$$$:  883-block  0
        -:  884:			
    #####:  885:      return 0;
    $$$$$:  885-block  0
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  890-block  0
branch  0 never executed
branch  1 never executed
        -:  891:	{
    #####:  892:	  return -1;
    $$$$$:  892-block  0
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  901-block  0
    $$$$$:  901-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  901-block  2
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  903-block  0
branch  0 never executed
branch  1 never executed
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
    $$$$$:  906-block  0
        -:  907:	    }
    #####:  908:	}
    $$$$$:  908-block  0
        -:  909:
        -:  910:
    #####:  911:      return 0;
    $$$$$:  911-block  0
        -:  912:		
        -:  913:    case smithy:
        6:  914:      	SmithyCard(currentPlayer, state, handPos);
        6:  915:	return 0;
        6:  915-block  0
        -:  916:		
        -:  917:    case village:
        -:  918:      
    #####:  919:	VillageCard(currentPlayer, state, handPos);
        -:  920:
    #####:  921:	return 0;
    $$$$$:  921-block  0
        -:  922:		
        -:  923:    case baron:
    #####:  924:      state->numBuys++;//Increase buys by 1!
    #####:  925:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  925-block  0
branch  0 never executed
branch  1 never executed
    #####:  926:	int p = 0;//Iterator for hand!
    #####:  927:	int card_not_discarded = 1;//Flag for discard set!
    #####:  928:	while(card_not_discarded){
    $$$$$:  928-block  0
    $$$$$:  928-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  928-block  2
    #####:  929:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  929-block  0
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  931:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  932:	    state->discardCount[currentPlayer]++;
    #####:  933:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  933-block  0
    $$$$$:  933-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  933-block  2
    #####:  934:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  935:	    }
    $$$$$:  935-block  0
    #####:  936:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  937:	    state->handCount[currentPlayer]--;
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
    $$$$$:  939-block  0
    #####:  940:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  940-block  0
branch  0 never executed
branch  1 never executed
        -:  941:	    if(DEBUG) {
        -:  942:	      printf("No estate cards in your hand, invalid choice\n");
        -:  943:	      printf("Must gain an estate if there are any\n");
        -:  944:	    }
    #####:  945:	    if (supplyCount(estate, state) > 0){
    $$$$$:  945-block  0
branch  0 never executed
branch  1 never executed
    #####:  946:	      gainCard(estate, state, 0, currentPlayer);
    #####:  947:	      state->supplyCount[estate]--;//Decrement estates
    #####:  948:	      if (supplyCount(estate, state) == 0){
    $$$$$:  948-block  0
branch  0 never executed
branch  1 never executed
    #####:  949:		isGameOver(state);
    #####:  950:	      }
    $$$$$:  950-block  0
    #####:  951:	    }
    $$$$$:  951-block  0
    #####:  952:	    card_not_discarded = 0;//Exit the loop
    #####:  953:	  }
    $$$$$:  953-block  0
        -:  954:			    
        -:  955:	  else{
    #####:  956:	    p++;//Next card
    $$$$$:  956-block  0
        -:  957:	  }
        -:  958:	}
    #####:  959:      }
    $$$$$:  959-block  0
        -:  960:			    
        -:  961:      else{
    #####:  962:	if (supplyCount(estate, state) > 0){
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
    #####:  963:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  964:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  965:	  if (supplyCount(estate, state) == 0){
    $$$$$:  965-block  0
branch  0 never executed
branch  1 never executed
    #####:  966:	    isGameOver(state);
    #####:  967:	  }
    $$$$$:  967-block  0
    #####:  968:	}
    $$$$$:  968-block  0
        -:  969:      }
        -:  970:	    
        -:  971:      
    #####:  972:      return 0;
    $$$$$:  972-block  0
        -:  973:		
        -:  974:    case great_hall:
        -:  975:      
    #####:  976:	GreatHallCard(currentPlayer, state, handPos);
        -:  977:
    #####:  978:	return 0;
    $$$$$:  978-block  0
        -:  979:		
        -:  980:    case minion:
        -:  981:      //+1 action
    #####:  982:      state->numActions++;
        -:  983:			
        -:  984:      //discard card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
        -:  986:			
    #####:  987:      if (choice1)		//+2 coins
    $$$$$:  987-block  0
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  state->coins = state->coins + 2;
    #####:  990:	}
    $$$$$:  990-block  0
        -:  991:			
    #####:  992:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  992-block  0
branch  0 never executed
branch  1 never executed
        -:  993:	{
        -:  994:	  //discard hand
    #####:  995:	  while(numHandCards(state) > 0)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  995-block  2
        -:  996:	    {
    #####:  997:	      discardCard(handPos, currentPlayer, state, 0);
        -:  998:	    }
        -:  999:				
        -: 1000:	  //draw 4
    #####: 1001:	  for (i = 0; i < 4; i++)
    $$$$$: 1001-block  0
    $$$$$: 1001-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1001-block  2
        -: 1002:	    {
    #####: 1003:	      drawCard(currentPlayer, state);
    #####: 1004:	    }
    $$$$$: 1004-block  0
        -: 1005:				
        -: 1006:	  //other players discard hand and redraw if hand size > 4
    #####: 1007:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1007-block  0
    $$$$$: 1007-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1007-block  2
        -: 1008:	    {
    #####: 1009:	      if (i != currentPlayer)
    $$$$$: 1009-block  0
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  if ( state->handCount[i] > 4 )
    $$$$$: 1011-block  0
branch  0 never executed
branch  1 never executed
        -: 1012:		    {
        -: 1013:		      //discard hand
    #####: 1014:		      while( state->handCount[i] > 0 )
    $$$$$: 1014-block  0
    $$$$$: 1014-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1014-block  2
        -: 1015:			{
    #####: 1016:			  discardCard(handPos, i, state, 0);
        -: 1017:			}
        -: 1018:							
        -: 1019:		      //draw 4
    #####: 1020:		      for (j = 0; j < 4; j++)
    $$$$$: 1020-block  0
    $$$$$: 1020-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1020-block  2
        -: 1021:			{
    #####: 1022:			  drawCard(i, state);
    #####: 1023:			}
    $$$$$: 1023-block  0
    #####: 1024:		    }
    $$$$$: 1024-block  0
    #####: 1025:		}
    $$$$$: 1025-block  0
    #####: 1026:	    }
    $$$$$: 1026-block  0
        -: 1027:				
    #####: 1028:	}
    $$$$$: 1028-block  0
    #####: 1029:      return 0;
    $$$$$: 1029-block  0
        -: 1030:		
        -: 1031:    case steward:
    #####: 1032:      if (choice1 == 1)
    $$$$$: 1032-block  0
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //+2 cards
    #####: 1035:	  drawCard(currentPlayer, state);
    #####: 1036:	  drawCard(currentPlayer, state);
    #####: 1037:	}
    $$$$$: 1037-block  0
    #####: 1038:      else if (choice1 == 2)
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
        -: 1039:	{
        -: 1040:	  //+2 coins
    #####: 1041:	  state->coins = state->coins + 2;
    #####: 1042:	}
    $$$$$: 1042-block  0
        -: 1043:      else
        -: 1044:	{
        -: 1045:	  //trash 2 cards in hand
    #####: 1046:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1047:	  discardCard(choice3, currentPlayer, state, 1);
    $$$$$: 1047-block  0
        -: 1048:	}
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1052:      return 0;
    $$$$$: 1052-block  0
        -: 1053:		
        -: 1054:    case tribute:
    #####: 1055:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
    #####: 1056:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	  state->deckCount[nextPlayer]--;
    #####: 1059:	}
    $$$$$: 1059-block  0
    #####: 1060:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1060-block  0
branch  0 never executed
branch  1 never executed
    #####: 1061:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1062:	  state->discardCount[nextPlayer]--;
    #####: 1063:	}
    $$$$$: 1063-block  0
        -: 1064:	else{
        -: 1065:	  //No Card to Reveal
        -: 1066:	  if (DEBUG){
        -: 1067:	    printf("No cards to reveal\n");
        -: 1068:	  }
        -: 1069:	}
    #####: 1070:      }
    $$$$$: 1070-block  0
        -: 1071:	    
        -: 1072:      else{
    #####: 1073:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    #####: 1074:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1074-block  0
    $$$$$: 1074-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1074-block  2
    #####: 1075:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1076:	    state->deckCount[nextPlayer]++;
    #####: 1077:	    state->discard[nextPlayer][i] = -1;
    #####: 1078:	    state->discardCount[nextPlayer]--;
    #####: 1079:	  }
    $$$$$: 1079-block  0
        -: 1080:			    
    #####: 1081:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1082:	} 
    $$$$$: 1082-block  0
    #####: 1083:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
    #####: 1086:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1088:	state->deckCount[nextPlayer]--;
    $$$$$: 1088-block  0
        -: 1089:      }    
        -: 1090:		       
    #####: 1091:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    #####: 1092:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1093:	state->playedCardCount++;
    #####: 1094:	tributeRevealedCards[1] = -1;
    #####: 1095:      }
    $$$$$: 1095-block  0
        -: 1096:
    #####: 1097:      for (i = 0; i <= 2; i ++){
    $$$$$: 1097-block  0
    $$$$$: 1097-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1097-block  2
    #####: 1098:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1098-block  2
branch  4 never executed
branch  5 never executed
    #####: 1099:	  state->coins += 2;
    #####: 1100:	}
    $$$$$: 1100-block  0
        -: 1101:		    
    #####: 1102:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1102-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1102-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1102-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1102-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1102-block  4
branch  8 never executed
branch  9 never executed
    #####: 1103:	  drawCard(currentPlayer, state);
    #####: 1104:	  drawCard(currentPlayer, state);
    #####: 1105:	}
    $$$$$: 1105-block  0
        -: 1106:	else{//Action Card
    #####: 1107:	  state->numActions = state->numActions + 2;
    $$$$$: 1107-block  0
        -: 1108:	}
    #####: 1109:      }
    $$$$$: 1109-block  0
        -: 1110:	    
    #####: 1111:      return 0;
    $$$$$: 1111-block  0
        -: 1112:		
        -: 1113:    case ambassador:
    #####: 1114:      j = 0;		//used to check if player has enough cards to discard
        -: 1115:
    #####: 1116:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1116-block  1
branch  2 never executed
branch  3 never executed
        -: 1117:	{
    #####: 1118:	  return -1;				
    $$$$$: 1118-block  0
        -: 1119:	}
        -: 1120:
    #####: 1121:      if (choice1 == handPos)
    $$$$$: 1121-block  0
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  return -1;
    $$$$$: 1123-block  0
        -: 1124:	}
        -: 1125:
    #####: 1126:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1126-block  0
    $$$$$: 1126-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1126-block  2
        -: 1127:	{
    #####: 1128:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1128-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1128-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1128-block  2
branch  4 never executed
branch  5 never executed
        -: 1129:	    {
    #####: 1130:	      j++;
    #####: 1131:	    }
    $$$$$: 1131-block  0
    #####: 1132:	}
    $$$$$: 1132-block  0
    #####: 1133:      if (j < choice2)
    $$$$$: 1133-block  0
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  return -1;				
    $$$$$: 1135-block  0
        -: 1136:	}
        -: 1137:
        -: 1138:      if (DEBUG) 
        -: 1139:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1140:
        -: 1141:      //increase supply count for choosen card by amount being discarded
    #####: 1142:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1143:			
        -: 1144:      //each other player gains a copy of revealed card
    #####: 1145:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1145-block  0
    $$$$$: 1145-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1145-block  2
        -: 1146:	{
    #####: 1147:	  if (i != currentPlayer)
    $$$$$: 1147-block  0
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1150:	    }
    $$$$$: 1150-block  0
    #####: 1151:	}
    $$$$$: 1151-block  0
        -: 1152:
        -: 1153:      //discard played card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1155:
        -: 1156:      //trash copies of cards returned to supply
    #####: 1157:      for (j = 0; j < choice2; j++)
    $$$$$: 1157-block  0
    $$$$$: 1157-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1157-block  2
        -: 1158:	{
    #####: 1159:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1159-block  0
    $$$$$: 1159-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1159-block  2
        -: 1160:	    {
    #####: 1161:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1161-block  0
branch  0 never executed
branch  1 never executed
        -: 1162:		{
    #####: 1163:		  discardCard(i, currentPlayer, state, 1);
    #####: 1164:		  break;
    $$$$$: 1164-block  0
        -: 1165:		}
    #####: 1166:	    }
    $$$$$: 1166-block  0
    #####: 1167:	}			
    $$$$$: 1167-block  0
        -: 1168:
    #####: 1169:      return 0;
    $$$$$: 1169-block  0
        -: 1170:		
        -: 1171:    case cutpurse:
        -: 1172:
    #####: 1173:      updateCoins(currentPlayer, state, 2);
    #####: 1174:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1174-block  0
    $$$$$: 1174-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1174-block  2
        -: 1175:	{
    #####: 1176:	  if (i != currentPlayer)
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1178-block  0
    $$$$$: 1178-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1178-block  2
        -: 1179:		{
    #####: 1180:		  if (state->hand[i][j] == copper)
    $$$$$: 1180-block  0
branch  0 never executed
branch  1 never executed
        -: 1181:		    {
    #####: 1182:		      discardCard(j, i, state, 0);
    #####: 1183:		      break;
    $$$$$: 1183-block  0
        -: 1184:		    }
    #####: 1185:		  if (j == state->handCount[i])
    $$$$$: 1185-block  0
branch  0 never executed
branch  1 never executed
        -: 1186:		    {
    #####: 1187:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1187-block  0
    $$$$$: 1187-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1187-block  2
        -: 1188:			{
        -: 1189:			  if (DEBUG)
        -: 1190:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1191:			}	
    $$$$$: 1191-block  0
    #####: 1192:		      break;
    $$$$$: 1192-block  0
        -: 1193:		    }		
    #####: 1194:		}
    $$$$$: 1194-block  0
        -: 1195:					
    #####: 1196:	    }
    $$$$$: 1196-block  0
        -: 1197:				
    #####: 1198:	}				
    $$$$$: 1198-block  0
        -: 1199:
        -: 1200:      //discard played card from hand
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1202:
    #####: 1203:      return 0;
    $$$$$: 1203-block  0
        -: 1204:
        -: 1205:		
        -: 1206:    case embargo: 
        -: 1207:      
    #####: 1208:	EmbargoCard(currentPlayer, handPos, state, choice1); 
    #####: 1209:	return 0;
    $$$$$: 1209-block  0
        -: 1210:		
        -: 1211:    case outpost:
        -: 1212:      //set outpost flag
    #####: 1213:      state->outpostPlayed++;
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:      return 0;
    $$$$$: 1217-block  0
        -: 1218:		
        -: 1219:    case salvager:
        -: 1220:      //+1 buy
    #####: 1221:      state->numBuys++;
        -: 1222:			
    #####: 1223:      if (choice1)
    $$$$$: 1223-block  0
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //gain coins equal to trashed card
    #####: 1226:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1227:	  //trash card
    #####: 1228:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1229:	}
    $$$$$: 1229-block  0
        -: 1230:			
        -: 1231:      //discard card
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1233:      return 0;
    $$$$$: 1233-block  0
        -: 1234:		
        -: 1235:    case sea_hag:
    #####: 1236:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1236-block  0
    $$$$$: 1236-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1236-block  2
    #####: 1237:	if (i != currentPlayer){
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    #####: 1238:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1239:	  state->discardCount[i]++;
    #####: 1240:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1241:	}
    $$$$$: 1241-block  0
    #####: 1242:      }
    $$$$$: 1242-block  0
    #####: 1243:      return 0;
    $$$$$: 1243-block  0
        -: 1244:		
        -: 1245:    case treasure_map:
        -: 1246:      //search hand for another treasure_map
    #####: 1247:      index = -1;
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1248-block  0
    $$$$$: 1248-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1248-block  2
        -: 1249:	{
    #####: 1250:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1250-block  1
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      index = i;
    #####: 1253:	      break;
    $$$$$: 1253-block  0
        -: 1254:	    }
    #####: 1255:	}
    $$$$$: 1255-block  0
    #####: 1256:      if (index > -1)
    $$$$$: 1256-block  0
branch  0 never executed
branch  1 never executed
        -: 1257:	{
        -: 1258:	  //trash both treasure cards
    #####: 1259:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1260:	  discardCard(index, currentPlayer, state, 1);
        -: 1261:
        -: 1262:	  //gain 4 Gold cards
    #####: 1263:	  for (i = 0; i < 4; i++)
    $$$$$: 1263-block  0
    $$$$$: 1263-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1263-block  2
        -: 1264:	    {
    #####: 1265:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1266:	    }
    $$$$$: 1266-block  0
        -: 1267:				
        -: 1268:	  //return success
    #####: 1269:	  return 1;
    $$$$$: 1269-block  0
        -: 1270:	}
        -: 1271:			
        -: 1272:      //no second treasure_map found in hand
    #####: 1273:      return -1;
    $$$$$: 1273-block  0
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return -1;
    $$$$$: 1276-block  0
       13: 1277:}
       13: 1277-block  0
        -: 1278:
function discardCard called 3 returned 100% blocks executed 80%
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
        3: 1283:  if (trashFlag < 1)
        3: 1283-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 1284:    {
        -: 1285:      //add card to played pile
        3: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1287:      state->playedCardCount++;
        3: 1288:    }
        3: 1288-block  0
        -: 1289:	
        -: 1290:  //set played card to -1
        3: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
        3: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        3: 1294-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
    $$$$$: 1298-block  0
        3: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        3: 1299-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
    $$$$$: 1303-block  0
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
        3: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
        3: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
        3: 1311:      state->handCount[currentPlayer]--;
        3: 1311-block  0
        -: 1312:    }
        -: 1313:	
        3: 1314:  return 0;
        3: 1314-block  0
        -: 1315:}
        -: 1316:
function gainCard called 7 returned 100% blocks executed 81%
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        7: 1322-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1323:    {
    #####: 1324:      return -1;
    $$$$$: 1324-block  0
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
        7: 1332:  if (toFlag == 1)
        7: 1332-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
    $$$$$: 1336-block  0
        7: 1337:  else if (toFlag == 2)
        7: 1337-block  0
branch  0 taken 14%
branch  1 taken 86%
        -: 1338:    {
        1: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1340:      state->handCount[player]++;
        1: 1341:    }
        1: 1341-block  0
        -: 1342:  else
        -: 1343:    {
        6: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1345:      state->discardCount[player]++;
        6: 1345-block  0
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
        7: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
        7: 1351:  return 0;
        7: 1351-block  0
        7: 1352:}
        7: 1352-block  0
        -: 1353:
function updateCoins called 10 returned 100% blocks executed 100%
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
       10: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       51: 1362:  for (i = 0; i < state->handCount[player]; i++)
       10: 1362-block  0
       51: 1362-block  1
branch  0 taken 80%
branch  1 taken 20%
       41: 1362-block  2
        -: 1363:    {
       41: 1364:      if (state->hand[player][i] == copper)
       41: 1364-block  0
branch  0 taken 73%
branch  1 taken 27%
        -: 1365:	{
       30: 1366:	  state->coins += 1;
       30: 1367:	}
       30: 1367-block  0
       11: 1368:      else if (state->hand[player][i] == silver)
       11: 1368-block  0
branch  0 taken 18%
branch  1 taken 82%
        -: 1369:	{
        2: 1370:	  state->coins += 2;
        2: 1371:	}
        2: 1371-block  0
        9: 1372:      else if (state->hand[player][i] == gold)
        9: 1372-block  0
branch  0 taken 22%
branch  1 taken 78%
        -: 1373:	{
        2: 1374:	  state->coins += 3;
        2: 1375:	}	
        2: 1375-block  0
       41: 1376:    }	
       41: 1376-block  0
        -: 1377:
        -: 1378:  //add bonus
       10: 1379:  state->coins += bonus;
        -: 1380:
       10: 1381:  return 0;
       10: 1381-block  0
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
----------------- Testing Card: feast ----------------
TEST 1: Trash this card
Before playing feast:
Player 0 feast count 1, expected 1
After playing feast:
Player 0 feast count 1, expected 0

TEST 2: Gain card cost <= 5, try duchy card (cost 5)
Player 0 duchy count 1, expected 1

TEST 5: No state change occur for other players
Initial player 1 state:
Player 1 hand count: 0 expected: 0
Player 1 deck count: 10 expected: 10
Player 1 discard count: 0 expected: 0
Player 0 plays feast.
Player 1 hand count: 0 expected: 0
Player 1 deck count: 10 expected: 10
Player 1 discard count: 0 expected: 0

TEST 6: No state change should occur to the victory card piles and kingdom card piles
Before play feast card
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 100 expected: 100
Player 0 plays feast.
Victory cards pile count: 24 expected: 24
Kingdom cards pile count: 100 expected: 100

 >>>>> Failsure: Testing complete feast <<<<<

File 'dominion.c'
Lines executed:38.04% of 652
Branches executed:44.84% of 417
Taken at least once:30.46% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 247 returned 100% blocks executed 100%
        -:   10:int compare(const void* a, const void* b) {
      247:   11:  if (*(int*)a > *(int*)b)
      247:   11-block  0
branch  0 taken 2%
branch  1 taken 98%
        6:   12:    return 1;
        6:   12-block  0
      241:   13:  if (*(int*)a < *(int*)b)
      241:   13-block  0
branch  0 taken 34%
branch  1 taken 66%
       83:   14:    return -1;
       83:   14-block  0
      158:   15:  return 0;
      158:   15-block  0
      247:   16:}
      247:   16-block  0
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    $$$$$:   19-block  0
    #####:   20:  return g;
    $$$$$:   20-block  0
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
    $$$$$:   36-block  0
        -:   37:}
        -:   38:
function initializeGame called 8 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        8:   46:  SelectStream(1);
        8:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        8:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        8:   50-block  0
branch  0 taken 100%
branch  1 taken 0%
        8:   50-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
    $$$$$:   52-block  0
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        8:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       88:   59:  for (i = 0; i < 10; i++)
        8:   59-block  0
       88:   59-block  1
branch  0 taken 91%
branch  1 taken 9%
       80:   59-block  2
        -:   60:    {
      880:   61:      for (j = 0; j < 10; j++)
       80:   61-block  0
      880:   61-block  1
branch  0 taken 91%
branch  1 taken 9%
      800:   61-block  2
        -:   62:        {
      800:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      800:   63-block  0
branch  0 taken 90%
branch  1 taken 10%
      720:   63-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
    $$$$$:   65-block  0
        -:   66:	    }
      800:   67:        }
      800:   67-block  0
       80:   68:    }
       80:   68-block  0
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        8:   75:  if (numPlayers == 2)
        8:   75-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        8:   77:      state->supplyCount[curse] = 10;
        8:   78:    }
        8:   78-block  0
    #####:   79:  else if (numPlayers == 3)
    $$$$$:   79-block  0
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
    $$$$$:   82-block  0
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
    $$$$$:   85-block  0
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        8:   89:  if (numPlayers == 2)
        8:   89-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        8:   91:      state->supplyCount[estate] = 8;
        8:   92:      state->supplyCount[duchy] = 8;
        8:   93:      state->supplyCount[province] = 8;
        8:   94:    }
        8:   94-block  0
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
    $$$$$:   99-block  0
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        8:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  104:  state->supplyCount[silver] = 40;
        8:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      168:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        8:  108-block  0
      168:  108-block  1
branch  0 taken 95%
branch  1 taken 5%
      160:  108-block  2
        -:  109:    {
     1320:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
      160:  110-block  0
     1320:  110-block  1
branch  0 taken 94%
branch  1 taken 6%
     1160:  110-block  2
        -:  111:	{
     1240:  112:	  if (kingdomCards[j] == i)
     1240:  112-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       80:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       80:  115-block  0
branch  0 taken 100%
branch  1 taken 0%
       80:  115-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    $$$$$:  117-block  0
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    $$$$$:  119-block  0
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  120-block  0
    #####:  121:		}
    $$$$$:  121-block  0
        -:  122:	      else
        -:  123:		{
       80:  124:		  state->supplyCount[i] = 10;
       80:  124-block  0
        -:  125:		}
       80:  126:	      break;
       80:  126-block  0
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     1160:  130:	      state->supplyCount[i] = -1;
     1160:  130-block  0
        -:  131:	    }
     1160:  132:	}
     1160:  132-block  0
        -:  133:
      160:  134:    }
      160:  134-block  0
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       24:  140:  for (i = 0; i < numPlayers; i++)
        8:  140-block  0
       24:  140-block  1
branch  0 taken 67%
branch  1 taken 33%
       16:  140-block  2
        -:  141:    {
       16:  142:      state->deckCount[i] = 0;
       64:  143:      for (j = 0; j < 3; j++)
       16:  143-block  0
       64:  143-block  1
branch  0 taken 75%
branch  1 taken 25%
       48:  143-block  2
        -:  144:	{
       48:  145:	  state->deck[i][j] = estate;
       48:  146:	  state->deckCount[i]++;
       48:  147:	}
       48:  147-block  0
      128:  148:      for (j = 3; j < 10; j++)
       16:  148-block  0
      128:  148-block  1
branch  0 taken 88%
branch  1 taken 13%
      112:  148-block  2
        -:  149:	{
      112:  150:	  state->deck[i][j] = copper;
      112:  151:	  state->deckCount[i]++;		
      112:  152:	}
      112:  152-block  0
       16:  153:    }
       16:  153-block  0
        -:  154:
        -:  155:  //shuffle player decks
       24:  156:  for (i = 0; i < numPlayers; i++)
        8:  156-block  0
       24:  156-block  1
branch  0 taken 67%
branch  1 taken 33%
       16:  156-block  2
        -:  157:    {
       16:  158:      if ( shuffle(i, state) < 0 )
       16:  158-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
    $$$$$:  160-block  0
        -:  161:	}
       16:  162:    }
       16:  162-block  0
        -:  163:
        -:  164:  //draw player hands
       24:  165:  for (i = 0; i < numPlayers; i++)
        8:  165-block  0
       24:  165-block  1
branch  0 taken 67%
branch  1 taken 33%
       16:  165-block  2
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       16:  168:      state->handCount[i] = 0;
       16:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
       16:  175:    }
       16:  175-block  0
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      224:  178:  for (i = 0; i <= treasure_map; i++)
        8:  178-block  0
      224:  178-block  1
branch  0 taken 96%
branch  1 taken 4%
      216:  178-block  2
        -:  179:    {
      216:  180:      state->embargoTokens[i] = 0;
      216:  181:    }
      216:  181-block  0
        -:  182:
        -:  183:  //initialize first player's turn
        8:  184:  state->outpostPlayed = 0;
        8:  185:  state->phase = 0;
        8:  186:  state->numActions = 1;
        8:  187:  state->numBuys = 1;
        8:  188:  state->playedCardCount = 0;
        8:  189:  state->whoseTurn = 0;
        8:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       48:  194:  for (it = 0; it < 5; it++){
        8:  194-block  0
       48:  194-block  1
branch  0 taken 83%
branch  1 taken 17%
       40:  194-block  2
       40:  195:    drawCard(state->whoseTurn, state);
       40:  196:  }
       40:  196-block  0
        -:  197:
        8:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        8:  200:  return 0;
        8:  200-block  0
        8:  201:}
        8:  201-block  0
        -:  202:
function shuffle called 53 returned 100% blocks executed 100%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       53:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       53:  211:  if (state->deckCount[player] < 1)
       53:  211-block  0
branch  0 taken 58%
branch  1 taken 42%
       31:  212:    return -1;
       31:  212-block  0
       22:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      206:  216:  while (state->deckCount[player] > 0) {
       22:  216-block  0
      206:  216-block  1
branch  0 taken 89%
branch  1 taken 11%
      184:  216-block  2
      184:  217:    card = floor(Random() * state->deckCount[player]);
      184:  218:    newDeck[newDeckPos] = state->deck[player][card];
      184:  219:    newDeckPos++;
      605:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      184:  220-block  0
      605:  220-block  1
branch  0 taken 70%
branch  1 taken 30%
      421:  220-block  2
      421:  221:      state->deck[player][i] = state->deck[player][i+1];
      421:  222:    }
      421:  222-block  0
      184:  223:    state->deckCount[player]--;
        -:  224:  }
      206:  225:  for (i = 0; i < newDeckPos; i++) {
       22:  225-block  0
      206:  225-block  1
branch  0 taken 89%
branch  1 taken 11%
      184:  225-block  2
      184:  226:    state->deck[player][i] = newDeck[i];
      184:  227:    state->deckCount[player]++;
      184:  228:  }
      184:  228-block  0
        -:  229:
       22:  230:  return 0;
       22:  230-block  0
       53:  231:}
       53:  231-block  0
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
    $$$$$:  239-block  0
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
    $$$$$:  241-block  0
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
    $$$$$:  245-block  0
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
    $$$$$:  247-block  0
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
    $$$$$:  254-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  254-block  1
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
    $$$$$:  256-block  0
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  260-block  0
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
    $$$$$:  262-block  0
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    $$$$$:  271-block  0
    #####:  272:}
    $$$$$:  272-block  0
        -:  273:
function buyCard called 12 returned 100% blocks executed 83%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
       12:  282:  who = state->whoseTurn;
        -:  283:
       12:  284:  if (state->numBuys < 1){
       12:  284-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    $$$$$:  287-block  0
       12:  288:  } else if (supplyCount(supplyPos, state) <1){
       12:  288-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    $$$$$:  291-block  0
       12:  292:  } else if (state->coins < getCost(supplyPos)){
       12:  292-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        6:  295:    return -1;
        6:  295-block  0
        -:  296:  } else {
        6:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
        6:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
        6:  301:    state->coins = (state->coins) - (getCost(supplyPos));
        6:  302:    state->numBuys--;
        6:  302-block  0
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
        6:  310:  return 0;
        6:  310-block  0
       12:  311:}
       12:  311-block  0
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  314-block  0
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
    $$$$$:  319-block  0
        -:  320:}
        -:  321:
function supplyCount called 181 returned 100% blocks executed 100%
        -:  322:int supplyCount(int card, struct gameState *state) {
      181:  323:  return state->supplyCount[card];
      181:  323-block  0
        -:  324:}
        -:  325:
function fullDeckCount called 16 returned 100% blocks executed 100%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
       16:  328:  int count = 0;
        -:  329:
       76:  330:  for (i = 0; i < state->deckCount[player]; i++)
       16:  330-block  0
       76:  330-block  1
branch  0 taken 79%
branch  1 taken 21%
       60:  330-block  2
        -:  331:    {
       60:  332:      if (state->deck[player][i] == card) count++;
       60:  332-block  0
branch  0 taken 7%
branch  1 taken 93%
        4:  332-block  1
       60:  333:    }
       60:  333-block  0
        -:  334:
      106:  335:  for (i = 0; i < state->handCount[player]; i++)
       16:  335-block  0
      106:  335-block  1
branch  0 taken 85%
branch  1 taken 15%
       90:  335-block  2
        -:  336:    {
       90:  337:      if (state->hand[player][i] == card) count++;
       90:  337-block  0
branch  0 taken 13%
branch  1 taken 87%
       12:  337-block  1
       90:  338:    }
       90:  338-block  0
        -:  339:
       22:  340:  for (i = 0; i < state->discardCount[player]; i++)
       16:  340-block  0
       22:  340-block  1
branch  0 taken 27%
branch  1 taken 73%
        6:  340-block  2
        -:  341:    {
        6:  342:      if (state->discard[player][i] == card) count++;
        6:  342-block  0
branch  0 taken 67%
branch  1 taken 33%
        4:  342-block  1
        6:  343:    }
        6:  343-block  0
        -:  344:
       16:  345:  return count;
       16:  345-block  0
        -:  346:}
        -:  347:
function whoseTurn called 17 returned 100% blocks executed 100%
        -:  348:int whoseTurn(struct gameState *state) {
       17:  349:  return state->whoseTurn;
       17:  349-block  0
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  358-block  0
    $$$$$:  358-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  358-block  2
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    $$$$$:  361-block  0
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  365-block  0
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
    $$$$$:  367-block  0
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  369-block  0
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    $$$$$:  382-block  0
    $$$$$:  382-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  382-block  2
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
    $$$$$:  384-block  0
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
    $$$$$:  389-block  0
        -:  390:}
        -:  391:
function isGameOver called 6 returned 100% blocks executed 100%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        6:  397-block  0
branch  0 taken 33%
branch  1 taken 67%
        -:  398:    {
        2:  399:      return 1;
        2:  399-block  0
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        4:  404-block  0
      104:  404-block  1
branch  0 taken 96%
branch  1 taken 4%
      100:  404-block  2
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
      100:  406-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  407:	{
        6:  408:	  j++;
        6:  409:	}
        6:  409-block  0
      100:  410:    }
      100:  410-block  0
        4:  411:  if ( j >= 3)
        4:  411-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  412:    {
        2:  413:      return 1;
        2:  413-block  0
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        2:  416-block  0
        6:  417:}
        6:  417-block  0
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  424-block  0
    $$$$$:  424-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  2
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  430-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  430-block  1
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  431-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  431-block  1
    #####:  432:    }
    $$$$$:  432-block  0
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  435-block  0
    $$$$$:  435-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  2
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  441-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  441-block  1
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  442-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  442-block  1
    #####:  443:    }
    $$$$$:  443-block  0
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  446-block  0
    $$$$$:  446-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  2
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  452-block  1
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  453-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  453-block  1
    #####:  454:    }
    $$$$$:  454-block  0
        -:  455:
    #####:  456:  return score;
    $$$$$:  456-block  0
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  466-block  0
    $$$$$:  466-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  466-block  2
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
    $$$$$:  469-block  0
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
    $$$$$:  472-block  0
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
    $$$$$:  475-block  0
        -:  476:	}
    #####:  477:    }
    $$$$$:  477-block  0
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  481-block  0
    $$$$$:  481-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  481-block  2
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
    $$$$$:  483-block  0
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    $$$$$:  486-block  0
    #####:  487:    }
    $$$$$:  487-block  0
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  492-block  0
    $$$$$:  492-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  2
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  494-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  494-block  1
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    $$$$$:  497-block  0
    #####:  498:    }
    $$$$$:  498-block  0
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  502-block  0
    $$$$$:  502-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  502-block  2
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
    $$$$$:  504-block  0
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    $$$$$:  507-block  0
    #####:  508:    }
    $$$$$:  508-block  0
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  512-block  0
    $$$$$:  512-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  512-block  2
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
    $$$$$:  514-block  0
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
    $$$$$:  517-block  0
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
    $$$$$:  520-block  0
        -:  521:	}
    #####:  522:    }
    $$$$$:  522-block  0
        -:  523:
    #####:  524:  return 0;
    $$$$$:  524-block  0
        -:  525:}
        -:  526:
function drawCard called 127 returned 100% blocks executed 100%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      127:  530:  if (state->deckCount[player] <= 0){//Deck is empty
      127:  530-block  0
branch  0 taken 17%
branch  1 taken 83%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
       30:  535:    for (i = 0; i < state->discardCount[player];i++){
       21:  535-block  0
       30:  535-block  1
branch  0 taken 30%
branch  1 taken 70%
        9:  535-block  2
        9:  536:      state->deck[player][i] = state->discard[player][i];
        9:  537:      state->discard[player][i] = -1;
        9:  538:    }
        9:  538-block  0
        -:  539:
       21:  540:    state->deckCount[player] = state->discardCount[player];
       21:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
       21:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
       21:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
       21:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
       21:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
       21:  561:    if (deckCounter == 0)
       21:  561-block  0
branch  0 taken 86%
branch  1 taken 14%
       18:  562:      return -1;
       18:  562-block  0
        -:  563:
        3:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  565:    state->deckCount[player]--;
        3:  566:    state->handCount[player]++;//Increment hand count
        3:  567:  }
        3:  567-block  0
        -:  568:
        -:  569:  else{
      106:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
      106:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
      106:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      106:  578:    state->deckCount[player]--;
      106:  579:    state->handCount[player]++;//Increment hand count
      106:  579-block  0
        -:  580:  }
        -:  581:
      109:  582:  return 0;
      109:  582-block  0
      127:  583:}
      127:  583-block  0
        -:  584:
function getCost called 20 returned 100% blocks executed 25%
        -:  585:int getCost(int cardNumber)
        -:  586:{
       20:  587:  switch( cardNumber ) 
       20:  587-block  0
branch  0 taken 5%
branch  1 taken 0%
branch  2 taken 5%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 30%
branch  8 taken 30%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 30%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  588:    {
        -:  589:    case curse:
        1:  590:      return 0;
        1:  590-block  0
        -:  591:    case estate:
    #####:  592:      return 2;
    $$$$$:  592-block  0
        -:  593:    case duchy:
        1:  594:      return 5;
        1:  594-block  0
        -:  595:    case province:
    #####:  596:      return 8;
    $$$$$:  596-block  0
        -:  597:    case copper:
    #####:  598:      return 0;
    $$$$$:  598-block  0
        -:  599:    case silver:
    #####:  600:      return 3;
    $$$$$:  600-block  0
        -:  601:    case gold:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case adventurer:
        6:  604:      return 6;
        6:  604-block  0
        -:  605:    case council_room:
        6:  606:      return 5;
        6:  606-block  0
        -:  607:    case feast:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case gardens:
    #####:  610:      return 4;
    $$$$$:  610-block  0
        -:  611:    case mine:
    #####:  612:      return 5;
    $$$$$:  612-block  0
        -:  613:    case remodel:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case smithy:
        6:  616:      return 4;
        6:  616-block  0
        -:  617:    case village:
    #####:  618:      return 3;
    $$$$$:  618-block  0
        -:  619:    case baron:
    #####:  620:      return 4;
    $$$$$:  620-block  0
        -:  621:    case great_hall:
    #####:  622:      return 3;
    $$$$$:  622-block  0
        -:  623:    case minion:
    #####:  624:      return 5;
    $$$$$:  624-block  0
        -:  625:    case steward:
    #####:  626:      return 3;
    $$$$$:  626-block  0
        -:  627:    case tribute:
    #####:  628:      return 5;
    $$$$$:  628-block  0
        -:  629:    case ambassador:
    #####:  630:      return 3;
    $$$$$:  630-block  0
        -:  631:    case cutpurse:
    #####:  632:      return 4;
    $$$$$:  632-block  0
        -:  633:    case embargo: 
    #####:  634:      return 2;
    $$$$$:  634-block  0
        -:  635:    case outpost:
    #####:  636:      return 5;
    $$$$$:  636-block  0
        -:  637:    case salvager:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case sea_hag:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    case treasure_map:
    #####:  642:      return 4;
    $$$$$:  642-block  0
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    $$$$$:  645-block  0
       20:  646:}
       20:  646-block  0
        -:  647:
        -:  648:
function SmithyCard called 8 returned 100% blocks executed 100%
        -:  649:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  650:
        -:  651:  //+3 Cards
        -:  652:  int i;
       48:  653:  for (i = 0; i < 5; i++)
        8:  653-block  0
       48:  653-block  1
branch  0 taken 83%
branch  1 taken 17%
       40:  653-block  2
        -:  654:  {
       40:  655:      drawCard(currentPlayer, state);
       40:  656:  }
       40:  656-block  0
        -:  657:   //discard card from hand
        -:  658:   //discardCard(handPos, currentPlayer, state, 0);
        8:  659:   return 0;
        8:  659-block  0
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:
        -:  662:}
        -:  663:
function AdventurerCard called 4 returned 100% blocks executed 100%
        -:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
       36:  666:  while(drawntreasure<5){
        4:  666-block  0
       36:  666-block  1
branch  0 taken 89%
branch  1 taken 11%
       32:  666-block  2
       32:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       32:  667-block  0
branch  0 taken 34%
branch  1 taken 66%
       11:  668:          shuffle(currentPlayer, state);
       11:  669:        }
       11:  669-block  0
       32:  670:        drawCard(currentPlayer, state);
       32:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       32:  672:        if (cardDrawn == gold || cardDrawn == silver || cardDrawn == copper)
       32:  672-block  0
branch  0 taken 100%
branch  1 taken 0%
       32:  672-block  1
branch  2 taken 100%
branch  3 taken 0%
       32:  672-block  2
branch  4 taken 63%
branch  5 taken 38%
       20:  673:		drawntreasure++;
       20:  673-block  0
        -:  674:        else{
       12:  675:          temphand[z]=cardDrawn;
       12:  676:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       12:  677:          z++;
       12:  677-block  0
        -:  678:        }
        -:  679:      }
       16:  680:      while(z-1>=0){
        4:  680-block  0
       16:  680-block  1
branch  0 taken 75%
branch  1 taken 25%
       12:  680-block  2
       12:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       12:  682:        z=z-1;
        -:  683:      }
        -:  684:
        4:  685:  return 0;
        4:  685-block  0
        -:  686:// bug introduced: player is able to draw 5 treasure cards instead of 2. 
        -:  687:}
        -:  688:
        -:  689:
function VillageCard called 0 returned 0% blocks executed 0%
        -:  690:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  691:
        -:  692:   //+1 Card
    #####:  693:   drawCard(currentPlayer, state);
    #####:  694:   drawCard(currentPlayer, state);	
    #####:  695:drawCard(currentPlayer, state);
        -:  696:
        -:  697:   //+2 Actions
    #####:  698:   state->numActions = state->numActions + 10;
        -:  699:  
        -:  700:    //discard played card from hand
    #####:  701:    discardCard(handPos, currentPlayer, state, 0);
        -:  702:
    #####:  703:  return 0; 
    $$$$$:  703-block  0
        -:  704:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1 
        -:  705:}
        -:  706:
function GreatHallCard called 0 returned 0% blocks executed 0%
        -:  707:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  708:
        -:  709:      //+1 Card
    #####:  710:      drawCard(currentPlayer, state);
        -:  711:
        -:  712:      //+1 Actions
    #####:  713:      state->numActions++;
        -:  714:
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
        -:  717:      
    #####:  718:      return 0;   
    $$$$$:  718-block  0
        -:  719:}
        -:  720:
function EmbargoCard called 0 returned 0% blocks executed 0%
        -:  721:int EmbargoCard(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  722:
    #####:  723:	state->coins = state->coins + 20;
        -:  724:
        -:  725:      //see if selected pile is in play
    #####:  726:       if ( state->supplyCount[choice1] == -1 )
    $$$$$:  726-block  0
branch  0 never executed
branch  1 never executed
        -:  727:          {
    #####:  728:             return -1;
    $$$$$:  728-block  0
        -:  729:          }
        -:  730:    
        -:  731:       //add embargo token to selected supply pile
    #####:  732:       state->embargoTokens[choice1]++;
    #####:  733:       state->embargoTokens[choice1]++;  
        -:  734:
        -:  735:      //trash card
    #####:  736:       discardCard(handPos, currentPlayer, state, 1);
        -:  737:
    #####:  738:	return 0; 
    $$$$$:  738-block  0
        -:  739://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
    #####:  740:}
    $$$$$:  740-block  0
        -:  741:
function cardEffect called 17 returned 100% blocks executed 14%
        -:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
       17:  749:  int currentPlayer = whoseTurn(state);
       17:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
       17:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
       17:  754:  int drawntreasure=0;
        -:  755:  int cardDrawn;
       17:  756:  int z = 0;// this is the counter for the temp hand
       17:  757:  if (nextPlayer > (state->numPlayers - 1)){
       17:  757-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  758:    nextPlayer = 0;
    #####:  759:  }
    $$$$$:  759-block  0
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
       17:  763:  switch( card ) 
       17:  763-block  0
branch  0 taken 24%
branch  1 taken 18%
branch  2 taken 12%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 47%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  764:    {
        -:  765:    case adventurer:
        -:  766:     
        -:  767:	//call function 
        4:  768:	AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
        4:  770:	return 0;
        4:  770-block  0
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
       15:  774:      for (i = 0; i < 4; i++)
        3:  774-block  0
       15:  774-block  1
branch  0 taken 80%
branch  1 taken 20%
       12:  774-block  2
        -:  775:	{
       12:  776:	  drawCard(currentPlayer, state);
       12:  777:	}
       12:  777-block  0
        -:  778:			
        -:  779:      //+1 Buy
        3:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
        9:  783:      for (i = 0; i < state->numPlayers; i++)
        3:  783-block  0
        9:  783-block  1
branch  0 taken 67%
branch  1 taken 33%
        6:  783-block  2
        -:  784:	{
        6:  785:	  if ( i != currentPlayer )
        6:  785-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  786:	    {
        3:  787:	      drawCard(i, state);
        3:  788:	    }
        3:  788-block  0
        6:  789:	}
        6:  789-block  0
        -:  790:			
        -:  791:      //put played card in played card pile
        3:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
        3:  794:      return 0;
        3:  794-block  0
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
       16:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        2:  799-block  0
       16:  799-block  1
branch  0 taken 88%
branch  1 taken 13%
       14:  799-block  2
       14:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       14:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
       14:  802:      }
       14:  802-block  0
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
        2:  806:      updateCoins(currentPlayer, state, 5);
        2:  807:      x = 1;//Condition to loop on
        4:  808:      while( x == 1) {//Buy one card
        2:  808-block  0
        4:  808-block  1
branch  0 taken 50%
branch  1 taken 50%
        2:  808-block  2
        2:  809:	if (supplyCount(choice1, state) <= 0){
        2:  809-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  810:	  if (DEBUG)
        -:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
    #####:  816:	}
    $$$$$:  816-block  0
        2:  817:	else if (state->coins < getCost(choice1)){
        2:  817-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
    #####:  823:	}
    $$$$$:  823-block  0
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
        2:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        2:  831:	  x = 0;//No more buying cards
        2:  831-block  0
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
       16:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        2:  841-block  0
       16:  841-block  1
branch  0 taken 88%
branch  1 taken 13%
       14:  841-block  2
       14:  842:	state->hand[currentPlayer][i] = temphand[i];
       14:  843:	temphand[i] = -1;
       14:  844:      }
       14:  844-block  0
        -:  845:      //Reset Hand
        -:  846:      			
        2:  847:      return 0;
        2:  847-block  0
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
    $$$$$:  850-block  0
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  855-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
    $$$$$:  857-block  0
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  860-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  860-block  1
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
    $$$$$:  862-block  0
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  865-block  0
branch  0 never executed
branch  1 never executed
        -:  866:	{
    #####:  867:	  return -1;
    $$$$$:  867-block  0
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  876-block  0
    $$$$$:  876-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  876-block  2
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  878-block  0
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
    $$$$$:  881-block  0
        -:  882:	    }
    #####:  883:	}
    $$$$$:  883-block  0
        -:  884:			
    #####:  885:      return 0;
    $$$$$:  885-block  0
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  890-block  0
branch  0 never executed
branch  1 never executed
        -:  891:	{
    #####:  892:	  return -1;
    $$$$$:  892-block  0
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  901-block  0
    $$$$$:  901-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  901-block  2
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  903-block  0
branch  0 never executed
branch  1 never executed
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
    $$$$$:  906-block  0
        -:  907:	    }
    #####:  908:	}
    $$$$$:  908-block  0
        -:  909:
        -:  910:
    #####:  911:      return 0;
    $$$$$:  911-block  0
        -:  912:		
        -:  913:    case smithy:
        8:  914:      	SmithyCard(currentPlayer, state, handPos);
        8:  915:	return 0;
        8:  915-block  0
        -:  916:		
        -:  917:    case village:
        -:  918:      
    #####:  919:	VillageCard(currentPlayer, state, handPos);
        -:  920:
    #####:  921:	return 0;
    $$$$$:  921-block  0
        -:  922:		
        -:  923:    case baron:
    #####:  924:      state->numBuys++;//Increase buys by 1!
    #####:  925:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  925-block  0
branch  0 never executed
branch  1 never executed
    #####:  926:	int p = 0;//Iterator for hand!
    #####:  927:	int card_not_discarded = 1;//Flag for discard set!
    #####:  928:	while(card_not_discarded){
    $$$$$:  928-block  0
    $$$$$:  928-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  928-block  2
    #####:  929:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  929-block  0
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  931:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  932:	    state->discardCount[currentPlayer]++;
    #####:  933:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  933-block  0
    $$$$$:  933-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  933-block  2
    #####:  934:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  935:	    }
    $$$$$:  935-block  0
    #####:  936:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  937:	    state->handCount[currentPlayer]--;
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
    $$$$$:  939-block  0
    #####:  940:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  940-block  0
branch  0 never executed
branch  1 never executed
        -:  941:	    if(DEBUG) {
        -:  942:	      printf("No estate cards in your hand, invalid choice\n");
        -:  943:	      printf("Must gain an estate if there are any\n");
        -:  944:	    }
    #####:  945:	    if (supplyCount(estate, state) > 0){
    $$$$$:  945-block  0
branch  0 never executed
branch  1 never executed
    #####:  946:	      gainCard(estate, state, 0, currentPlayer);
    #####:  947:	      state->supplyCount[estate]--;//Decrement estates
    #####:  948:	      if (supplyCount(estate, state) == 0){
    $$$$$:  948-block  0
branch  0 never executed
branch  1 never executed
    #####:  949:		isGameOver(state);
    #####:  950:	      }
    $$$$$:  950-block  0
    #####:  951:	    }
    $$$$$:  951-block  0
    #####:  952:	    card_not_discarded = 0;//Exit the loop
    #####:  953:	  }
    $$$$$:  953-block  0
        -:  954:			    
        -:  955:	  else{
    #####:  956:	    p++;//Next card
    $$$$$:  956-block  0
        -:  957:	  }
        -:  958:	}
    #####:  959:      }
    $$$$$:  959-block  0
        -:  960:			    
        -:  961:      else{
    #####:  962:	if (supplyCount(estate, state) > 0){
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
    #####:  963:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  964:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  965:	  if (supplyCount(estate, state) == 0){
    $$$$$:  965-block  0
branch  0 never executed
branch  1 never executed
    #####:  966:	    isGameOver(state);
    #####:  967:	  }
    $$$$$:  967-block  0
    #####:  968:	}
    $$$$$:  968-block  0
        -:  969:      }
        -:  970:	    
        -:  971:      
    #####:  972:      return 0;
    $$$$$:  972-block  0
        -:  973:		
        -:  974:    case great_hall:
        -:  975:      
    #####:  976:	GreatHallCard(currentPlayer, state, handPos);
        -:  977:
    #####:  978:	return 0;
    $$$$$:  978-block  0
        -:  979:		
        -:  980:    case minion:
        -:  981:      //+1 action
    #####:  982:      state->numActions++;
        -:  983:			
        -:  984:      //discard card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
        -:  986:			
    #####:  987:      if (choice1)		//+2 coins
    $$$$$:  987-block  0
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  state->coins = state->coins + 2;
    #####:  990:	}
    $$$$$:  990-block  0
        -:  991:			
    #####:  992:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  992-block  0
branch  0 never executed
branch  1 never executed
        -:  993:	{
        -:  994:	  //discard hand
    #####:  995:	  while(numHandCards(state) > 0)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  995-block  2
        -:  996:	    {
    #####:  997:	      discardCard(handPos, currentPlayer, state, 0);
        -:  998:	    }
        -:  999:				
        -: 1000:	  //draw 4
    #####: 1001:	  for (i = 0; i < 4; i++)
    $$$$$: 1001-block  0
    $$$$$: 1001-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1001-block  2
        -: 1002:	    {
    #####: 1003:	      drawCard(currentPlayer, state);
    #####: 1004:	    }
    $$$$$: 1004-block  0
        -: 1005:				
        -: 1006:	  //other players discard hand and redraw if hand size > 4
    #####: 1007:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1007-block  0
    $$$$$: 1007-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1007-block  2
        -: 1008:	    {
    #####: 1009:	      if (i != currentPlayer)
    $$$$$: 1009-block  0
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  if ( state->handCount[i] > 4 )
    $$$$$: 1011-block  0
branch  0 never executed
branch  1 never executed
        -: 1012:		    {
        -: 1013:		      //discard hand
    #####: 1014:		      while( state->handCount[i] > 0 )
    $$$$$: 1014-block  0
    $$$$$: 1014-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1014-block  2
        -: 1015:			{
    #####: 1016:			  discardCard(handPos, i, state, 0);
        -: 1017:			}
        -: 1018:							
        -: 1019:		      //draw 4
    #####: 1020:		      for (j = 0; j < 4; j++)
    $$$$$: 1020-block  0
    $$$$$: 1020-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1020-block  2
        -: 1021:			{
    #####: 1022:			  drawCard(i, state);
    #####: 1023:			}
    $$$$$: 1023-block  0
    #####: 1024:		    }
    $$$$$: 1024-block  0
    #####: 1025:		}
    $$$$$: 1025-block  0
    #####: 1026:	    }
    $$$$$: 1026-block  0
        -: 1027:				
    #####: 1028:	}
    $$$$$: 1028-block  0
    #####: 1029:      return 0;
    $$$$$: 1029-block  0
        -: 1030:		
        -: 1031:    case steward:
    #####: 1032:      if (choice1 == 1)
    $$$$$: 1032-block  0
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //+2 cards
    #####: 1035:	  drawCard(currentPlayer, state);
    #####: 1036:	  drawCard(currentPlayer, state);
    #####: 1037:	}
    $$$$$: 1037-block  0
    #####: 1038:      else if (choice1 == 2)
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
        -: 1039:	{
        -: 1040:	  //+2 coins
    #####: 1041:	  state->coins = state->coins + 2;
    #####: 1042:	}
    $$$$$: 1042-block  0
        -: 1043:      else
        -: 1044:	{
        -: 1045:	  //trash 2 cards in hand
    #####: 1046:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1047:	  discardCard(choice3, currentPlayer, state, 1);
    $$$$$: 1047-block  0
        -: 1048:	}
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1052:      return 0;
    $$$$$: 1052-block  0
        -: 1053:		
        -: 1054:    case tribute:
    #####: 1055:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
    #####: 1056:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	  state->deckCount[nextPlayer]--;
    #####: 1059:	}
    $$$$$: 1059-block  0
    #####: 1060:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1060-block  0
branch  0 never executed
branch  1 never executed
    #####: 1061:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1062:	  state->discardCount[nextPlayer]--;
    #####: 1063:	}
    $$$$$: 1063-block  0
        -: 1064:	else{
        -: 1065:	  //No Card to Reveal
        -: 1066:	  if (DEBUG){
        -: 1067:	    printf("No cards to reveal\n");
        -: 1068:	  }
        -: 1069:	}
    #####: 1070:      }
    $$$$$: 1070-block  0
        -: 1071:	    
        -: 1072:      else{
    #####: 1073:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    #####: 1074:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1074-block  0
    $$$$$: 1074-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1074-block  2
    #####: 1075:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1076:	    state->deckCount[nextPlayer]++;
    #####: 1077:	    state->discard[nextPlayer][i] = -1;
    #####: 1078:	    state->discardCount[nextPlayer]--;
    #####: 1079:	  }
    $$$$$: 1079-block  0
        -: 1080:			    
    #####: 1081:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1082:	} 
    $$$$$: 1082-block  0
    #####: 1083:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
    #####: 1086:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1088:	state->deckCount[nextPlayer]--;
    $$$$$: 1088-block  0
        -: 1089:      }    
        -: 1090:		       
    #####: 1091:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    #####: 1092:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1093:	state->playedCardCount++;
    #####: 1094:	tributeRevealedCards[1] = -1;
    #####: 1095:      }
    $$$$$: 1095-block  0
        -: 1096:
    #####: 1097:      for (i = 0; i <= 2; i ++){
    $$$$$: 1097-block  0
    $$$$$: 1097-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1097-block  2
    #####: 1098:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1098-block  2
branch  4 never executed
branch  5 never executed
    #####: 1099:	  state->coins += 2;
    #####: 1100:	}
    $$$$$: 1100-block  0
        -: 1101:		    
    #####: 1102:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1102-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1102-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1102-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1102-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1102-block  4
branch  8 never executed
branch  9 never executed
    #####: 1103:	  drawCard(currentPlayer, state);
    #####: 1104:	  drawCard(currentPlayer, state);
    #####: 1105:	}
    $$$$$: 1105-block  0
        -: 1106:	else{//Action Card
    #####: 1107:	  state->numActions = state->numActions + 2;
    $$$$$: 1107-block  0
        -: 1108:	}
    #####: 1109:      }
    $$$$$: 1109-block  0
        -: 1110:	    
    #####: 1111:      return 0;
    $$$$$: 1111-block  0
        -: 1112:		
        -: 1113:    case ambassador:
    #####: 1114:      j = 0;		//used to check if player has enough cards to discard
        -: 1115:
    #####: 1116:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1116-block  1
branch  2 never executed
branch  3 never executed
        -: 1117:	{
    #####: 1118:	  return -1;				
    $$$$$: 1118-block  0
        -: 1119:	}
        -: 1120:
    #####: 1121:      if (choice1 == handPos)
    $$$$$: 1121-block  0
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  return -1;
    $$$$$: 1123-block  0
        -: 1124:	}
        -: 1125:
    #####: 1126:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1126-block  0
    $$$$$: 1126-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1126-block  2
        -: 1127:	{
    #####: 1128:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1128-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1128-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1128-block  2
branch  4 never executed
branch  5 never executed
        -: 1129:	    {
    #####: 1130:	      j++;
    #####: 1131:	    }
    $$$$$: 1131-block  0
    #####: 1132:	}
    $$$$$: 1132-block  0
    #####: 1133:      if (j < choice2)
    $$$$$: 1133-block  0
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  return -1;				
    $$$$$: 1135-block  0
        -: 1136:	}
        -: 1137:
        -: 1138:      if (DEBUG) 
        -: 1139:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1140:
        -: 1141:      //increase supply count for choosen card by amount being discarded
    #####: 1142:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1143:			
        -: 1144:      //each other player gains a copy of revealed card
    #####: 1145:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1145-block  0
    $$$$$: 1145-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1145-block  2
        -: 1146:	{
    #####: 1147:	  if (i != currentPlayer)
    $$$$$: 1147-block  0
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1150:	    }
    $$$$$: 1150-block  0
    #####: 1151:	}
    $$$$$: 1151-block  0
        -: 1152:
        -: 1153:      //discard played card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1155:
        -: 1156:      //trash copies of cards returned to supply
    #####: 1157:      for (j = 0; j < choice2; j++)
    $$$$$: 1157-block  0
    $$$$$: 1157-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1157-block  2
        -: 1158:	{
    #####: 1159:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1159-block  0
    $$$$$: 1159-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1159-block  2
        -: 1160:	    {
    #####: 1161:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1161-block  0
branch  0 never executed
branch  1 never executed
        -: 1162:		{
    #####: 1163:		  discardCard(i, currentPlayer, state, 1);
    #####: 1164:		  break;
    $$$$$: 1164-block  0
        -: 1165:		}
    #####: 1166:	    }
    $$$$$: 1166-block  0
    #####: 1167:	}			
    $$$$$: 1167-block  0
        -: 1168:
    #####: 1169:      return 0;
    $$$$$: 1169-block  0
        -: 1170:		
        -: 1171:    case cutpurse:
        -: 1172:
    #####: 1173:      updateCoins(currentPlayer, state, 2);
    #####: 1174:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1174-block  0
    $$$$$: 1174-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1174-block  2
        -: 1175:	{
    #####: 1176:	  if (i != currentPlayer)
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1178-block  0
    $$$$$: 1178-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1178-block  2
        -: 1179:		{
    #####: 1180:		  if (state->hand[i][j] == copper)
    $$$$$: 1180-block  0
branch  0 never executed
branch  1 never executed
        -: 1181:		    {
    #####: 1182:		      discardCard(j, i, state, 0);
    #####: 1183:		      break;
    $$$$$: 1183-block  0
        -: 1184:		    }
    #####: 1185:		  if (j == state->handCount[i])
    $$$$$: 1185-block  0
branch  0 never executed
branch  1 never executed
        -: 1186:		    {
    #####: 1187:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1187-block  0
    $$$$$: 1187-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1187-block  2
        -: 1188:			{
        -: 1189:			  if (DEBUG)
        -: 1190:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1191:			}	
    $$$$$: 1191-block  0
    #####: 1192:		      break;
    $$$$$: 1192-block  0
        -: 1193:		    }		
    #####: 1194:		}
    $$$$$: 1194-block  0
        -: 1195:					
    #####: 1196:	    }
    $$$$$: 1196-block  0
        -: 1197:				
    #####: 1198:	}				
    $$$$$: 1198-block  0
        -: 1199:
        -: 1200:      //discard played card from hand
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1202:
    #####: 1203:      return 0;
    $$$$$: 1203-block  0
        -: 1204:
        -: 1205:		
        -: 1206:    case embargo: 
        -: 1207:      
    #####: 1208:	EmbargoCard(currentPlayer, handPos, state, choice1); 
    #####: 1209:	return 0;
    $$$$$: 1209-block  0
        -: 1210:		
        -: 1211:    case outpost:
        -: 1212:      //set outpost flag
    #####: 1213:      state->outpostPlayed++;
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:      return 0;
    $$$$$: 1217-block  0
        -: 1218:		
        -: 1219:    case salvager:
        -: 1220:      //+1 buy
    #####: 1221:      state->numBuys++;
        -: 1222:			
    #####: 1223:      if (choice1)
    $$$$$: 1223-block  0
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //gain coins equal to trashed card
    #####: 1226:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1227:	  //trash card
    #####: 1228:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1229:	}
    $$$$$: 1229-block  0
        -: 1230:			
        -: 1231:      //discard card
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1233:      return 0;
    $$$$$: 1233-block  0
        -: 1234:		
        -: 1235:    case sea_hag:
    #####: 1236:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1236-block  0
    $$$$$: 1236-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1236-block  2
    #####: 1237:	if (i != currentPlayer){
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    #####: 1238:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1239:	  state->discardCount[i]++;
    #####: 1240:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1241:	}
    $$$$$: 1241-block  0
    #####: 1242:      }
    $$$$$: 1242-block  0
    #####: 1243:      return 0;
    $$$$$: 1243-block  0
        -: 1244:		
        -: 1245:    case treasure_map:
        -: 1246:      //search hand for another treasure_map
    #####: 1247:      index = -1;
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1248-block  0
    $$$$$: 1248-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1248-block  2
        -: 1249:	{
    #####: 1250:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1250-block  1
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      index = i;
    #####: 1253:	      break;
    $$$$$: 1253-block  0
        -: 1254:	    }
    #####: 1255:	}
    $$$$$: 1255-block  0
    #####: 1256:      if (index > -1)
    $$$$$: 1256-block  0
branch  0 never executed
branch  1 never executed
        -: 1257:	{
        -: 1258:	  //trash both treasure cards
    #####: 1259:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1260:	  discardCard(index, currentPlayer, state, 1);
        -: 1261:
        -: 1262:	  //gain 4 Gold cards
    #####: 1263:	  for (i = 0; i < 4; i++)
    $$$$$: 1263-block  0
    $$$$$: 1263-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1263-block  2
        -: 1264:	    {
    #####: 1265:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1266:	    }
    $$$$$: 1266-block  0
        -: 1267:				
        -: 1268:	  //return success
    #####: 1269:	  return 1;
    $$$$$: 1269-block  0
        -: 1270:	}
        -: 1271:			
        -: 1272:      //no second treasure_map found in hand
    #####: 1273:      return -1;
    $$$$$: 1273-block  0
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return -1;
    $$$$$: 1276-block  0
       17: 1277:}
       17: 1277-block  0
        -: 1278:
function discardCard called 3 returned 100% blocks executed 80%
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
        3: 1283:  if (trashFlag < 1)
        3: 1283-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 1284:    {
        -: 1285:      //add card to played pile
        3: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1287:      state->playedCardCount++;
        3: 1288:    }
        3: 1288-block  0
        -: 1289:	
        -: 1290:  //set played card to -1
        3: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
        3: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        3: 1294-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
    $$$$$: 1298-block  0
        3: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        3: 1299-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
    $$$$$: 1303-block  0
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
        3: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
        3: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
        3: 1311:      state->handCount[currentPlayer]--;
        3: 1311-block  0
        -: 1312:    }
        -: 1313:	
        3: 1314:  return 0;
        3: 1314-block  0
        -: 1315:}
        -: 1316:
function gainCard called 11 returned 100% blocks executed 81%
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
       11: 1322:  if ( supplyCount(supplyPos, state) < 1 )
       11: 1322-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1323:    {
    #####: 1324:      return -1;
    $$$$$: 1324-block  0
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
       11: 1332:  if (toFlag == 1)
       11: 1332-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
    $$$$$: 1336-block  0
       11: 1337:  else if (toFlag == 2)
       11: 1337-block  0
branch  0 taken 27%
branch  1 taken 73%
        -: 1338:    {
        3: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1340:      state->handCount[player]++;
        3: 1341:    }
        3: 1341-block  0
        -: 1342:  else
        -: 1343:    {
        8: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        8: 1345:      state->discardCount[player]++;
        8: 1345-block  0
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
       11: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
       11: 1351:  return 0;
       11: 1351-block  0
       11: 1352:}
       11: 1352-block  0
        -: 1353:
function updateCoins called 13 returned 100% blocks executed 100%
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
       13: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       71: 1362:  for (i = 0; i < state->handCount[player]; i++)
       13: 1362-block  0
       71: 1362-block  1
branch  0 taken 82%
branch  1 taken 18%
       58: 1362-block  2
        -: 1363:    {
       58: 1364:      if (state->hand[player][i] == copper)
       58: 1364-block  0
branch  0 taken 59%
branch  1 taken 41%
        -: 1365:	{
       34: 1366:	  state->coins += 1;
       34: 1367:	}
       34: 1367-block  0
       24: 1368:      else if (state->hand[player][i] == silver)
       24: 1368-block  0
branch  0 taken 8%
branch  1 taken 92%
        -: 1369:	{
        2: 1370:	  state->coins += 2;
        2: 1371:	}
        2: 1371-block  0
       22: 1372:      else if (state->hand[player][i] == gold)
       22: 1372-block  0
branch  0 taken 9%
branch  1 taken 91%
        -: 1373:	{
        2: 1374:	  state->coins += 3;
        2: 1375:	}	
        2: 1375-block  0
       58: 1376:    }	
       58: 1376-block  0
        -: 1377:
        -: 1378:  //add bonus
       13: 1379:  state->coins += bonus;
        -: 1380:
       13: 1381:  return 0;
       13: 1381-block  0
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
