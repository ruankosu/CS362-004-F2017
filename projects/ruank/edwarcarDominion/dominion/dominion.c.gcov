        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 247 returned 100% blocks executed 100%
        -:   10:int compare(const void* a, const void* b) {
      247:   11:  if (*(int*)a > *(int*)b)
      247:   11-block  0
branch  0 taken 2%
branch  1 taken 98%
        6:   12:    return 1;
        6:   12-block  0
      241:   13:  if (*(int*)a < *(int*)b)
      241:   13-block  0
branch  0 taken 34%
branch  1 taken 66%
       83:   14:    return -1;
       83:   14-block  0
      158:   15:  return 0;
      158:   15-block  0
      247:   16:}
      247:   16-block  0
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    $$$$$:   19-block  0
    #####:   20:  return g;
    $$$$$:   20-block  0
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
    $$$$$:   36-block  0
        -:   37:}
        -:   38:
function initializeGame called 8 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        8:   46:  SelectStream(1);
        8:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        8:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        8:   50-block  0
branch  0 taken 100%
branch  1 taken 0%
        8:   50-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
    $$$$$:   52-block  0
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        8:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       88:   59:  for (i = 0; i < 10; i++)
        8:   59-block  0
       88:   59-block  1
branch  0 taken 91%
branch  1 taken 9%
       80:   59-block  2
        -:   60:    {
      880:   61:      for (j = 0; j < 10; j++)
       80:   61-block  0
      880:   61-block  1
branch  0 taken 91%
branch  1 taken 9%
      800:   61-block  2
        -:   62:        {
      800:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      800:   63-block  0
branch  0 taken 90%
branch  1 taken 10%
      720:   63-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
    $$$$$:   65-block  0
        -:   66:	    }
      800:   67:        }
      800:   67-block  0
       80:   68:    }
       80:   68-block  0
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        8:   75:  if (numPlayers == 2)
        8:   75-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        8:   77:      state->supplyCount[curse] = 10;
        8:   78:    }
        8:   78-block  0
    #####:   79:  else if (numPlayers == 3)
    $$$$$:   79-block  0
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
    $$$$$:   82-block  0
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
    $$$$$:   85-block  0
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        8:   89:  if (numPlayers == 2)
        8:   89-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        8:   91:      state->supplyCount[estate] = 8;
        8:   92:      state->supplyCount[duchy] = 8;
        8:   93:      state->supplyCount[province] = 8;
        8:   94:    }
        8:   94-block  0
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
    $$$$$:   99-block  0
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        8:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  104:  state->supplyCount[silver] = 40;
        8:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      168:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        8:  108-block  0
      168:  108-block  1
branch  0 taken 95%
branch  1 taken 5%
      160:  108-block  2
        -:  109:    {
     1320:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
      160:  110-block  0
     1320:  110-block  1
branch  0 taken 94%
branch  1 taken 6%
     1160:  110-block  2
        -:  111:	{
     1240:  112:	  if (kingdomCards[j] == i)
     1240:  112-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       80:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       80:  115-block  0
branch  0 taken 100%
branch  1 taken 0%
       80:  115-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    $$$$$:  117-block  0
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    $$$$$:  119-block  0
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  120-block  0
    #####:  121:		}
    $$$$$:  121-block  0
        -:  122:	      else
        -:  123:		{
       80:  124:		  state->supplyCount[i] = 10;
       80:  124-block  0
        -:  125:		}
       80:  126:	      break;
       80:  126-block  0
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     1160:  130:	      state->supplyCount[i] = -1;
     1160:  130-block  0
        -:  131:	    }
     1160:  132:	}
     1160:  132-block  0
        -:  133:
      160:  134:    }
      160:  134-block  0
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       24:  140:  for (i = 0; i < numPlayers; i++)
        8:  140-block  0
       24:  140-block  1
branch  0 taken 67%
branch  1 taken 33%
       16:  140-block  2
        -:  141:    {
       16:  142:      state->deckCount[i] = 0;
       64:  143:      for (j = 0; j < 3; j++)
       16:  143-block  0
       64:  143-block  1
branch  0 taken 75%
branch  1 taken 25%
       48:  143-block  2
        -:  144:	{
       48:  145:	  state->deck[i][j] = estate;
       48:  146:	  state->deckCount[i]++;
       48:  147:	}
       48:  147-block  0
      128:  148:      for (j = 3; j < 10; j++)
       16:  148-block  0
      128:  148-block  1
branch  0 taken 88%
branch  1 taken 13%
      112:  148-block  2
        -:  149:	{
      112:  150:	  state->deck[i][j] = copper;
      112:  151:	  state->deckCount[i]++;		
      112:  152:	}
      112:  152-block  0
       16:  153:    }
       16:  153-block  0
        -:  154:
        -:  155:  //shuffle player decks
       24:  156:  for (i = 0; i < numPlayers; i++)
        8:  156-block  0
       24:  156-block  1
branch  0 taken 67%
branch  1 taken 33%
       16:  156-block  2
        -:  157:    {
       16:  158:      if ( shuffle(i, state) < 0 )
       16:  158-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
    $$$$$:  160-block  0
        -:  161:	}
       16:  162:    }
       16:  162-block  0
        -:  163:
        -:  164:  //draw player hands
       24:  165:  for (i = 0; i < numPlayers; i++)
        8:  165-block  0
       24:  165-block  1
branch  0 taken 67%
branch  1 taken 33%
       16:  165-block  2
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       16:  168:      state->handCount[i] = 0;
       16:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
       16:  175:    }
       16:  175-block  0
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      224:  178:  for (i = 0; i <= treasure_map; i++)
        8:  178-block  0
      224:  178-block  1
branch  0 taken 96%
branch  1 taken 4%
      216:  178-block  2
        -:  179:    {
      216:  180:      state->embargoTokens[i] = 0;
      216:  181:    }
      216:  181-block  0
        -:  182:
        -:  183:  //initialize first player's turn
        8:  184:  state->outpostPlayed = 0;
        8:  185:  state->phase = 0;
        8:  186:  state->numActions = 1;
        8:  187:  state->numBuys = 1;
        8:  188:  state->playedCardCount = 0;
        8:  189:  state->whoseTurn = 0;
        8:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       48:  194:  for (it = 0; it < 5; it++){
        8:  194-block  0
       48:  194-block  1
branch  0 taken 83%
branch  1 taken 17%
       40:  194-block  2
       40:  195:    drawCard(state->whoseTurn, state);
       40:  196:  }
       40:  196-block  0
        -:  197:
        8:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        8:  200:  return 0;
        8:  200-block  0
        8:  201:}
        8:  201-block  0
        -:  202:
function shuffle called 53 returned 100% blocks executed 100%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       53:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       53:  211:  if (state->deckCount[player] < 1)
       53:  211-block  0
branch  0 taken 58%
branch  1 taken 42%
       31:  212:    return -1;
       31:  212-block  0
       22:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      206:  216:  while (state->deckCount[player] > 0) {
       22:  216-block  0
      206:  216-block  1
branch  0 taken 89%
branch  1 taken 11%
      184:  216-block  2
      184:  217:    card = floor(Random() * state->deckCount[player]);
      184:  218:    newDeck[newDeckPos] = state->deck[player][card];
      184:  219:    newDeckPos++;
      605:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      184:  220-block  0
      605:  220-block  1
branch  0 taken 70%
branch  1 taken 30%
      421:  220-block  2
      421:  221:      state->deck[player][i] = state->deck[player][i+1];
      421:  222:    }
      421:  222-block  0
      184:  223:    state->deckCount[player]--;
        -:  224:  }
      206:  225:  for (i = 0; i < newDeckPos; i++) {
       22:  225-block  0
      206:  225-block  1
branch  0 taken 89%
branch  1 taken 11%
      184:  225-block  2
      184:  226:    state->deck[player][i] = newDeck[i];
      184:  227:    state->deckCount[player]++;
      184:  228:  }
      184:  228-block  0
        -:  229:
       22:  230:  return 0;
       22:  230-block  0
       53:  231:}
       53:  231-block  0
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
    $$$$$:  239-block  0
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
    $$$$$:  241-block  0
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
    $$$$$:  245-block  0
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
    $$$$$:  247-block  0
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
    $$$$$:  254-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  254-block  1
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
    $$$$$:  256-block  0
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  260-block  0
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
    $$$$$:  262-block  0
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    $$$$$:  271-block  0
    #####:  272:}
    $$$$$:  272-block  0
        -:  273:
function buyCard called 12 returned 100% blocks executed 83%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
       12:  282:  who = state->whoseTurn;
        -:  283:
       12:  284:  if (state->numBuys < 1){
       12:  284-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    $$$$$:  287-block  0
       12:  288:  } else if (supplyCount(supplyPos, state) <1){
       12:  288-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    $$$$$:  291-block  0
       12:  292:  } else if (state->coins < getCost(supplyPos)){
       12:  292-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        6:  295:    return -1;
        6:  295-block  0
        -:  296:  } else {
        6:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
        6:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
        6:  301:    state->coins = (state->coins) - (getCost(supplyPos));
        6:  302:    state->numBuys--;
        6:  302-block  0
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
        6:  310:  return 0;
        6:  310-block  0
       12:  311:}
       12:  311-block  0
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  314-block  0
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
    $$$$$:  319-block  0
        -:  320:}
        -:  321:
function supplyCount called 181 returned 100% blocks executed 100%
        -:  322:int supplyCount(int card, struct gameState *state) {
      181:  323:  return state->supplyCount[card];
      181:  323-block  0
        -:  324:}
        -:  325:
function fullDeckCount called 16 returned 100% blocks executed 100%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
       16:  328:  int count = 0;
        -:  329:
       76:  330:  for (i = 0; i < state->deckCount[player]; i++)
       16:  330-block  0
       76:  330-block  1
branch  0 taken 79%
branch  1 taken 21%
       60:  330-block  2
        -:  331:    {
       60:  332:      if (state->deck[player][i] == card) count++;
       60:  332-block  0
branch  0 taken 7%
branch  1 taken 93%
        4:  332-block  1
       60:  333:    }
       60:  333-block  0
        -:  334:
      106:  335:  for (i = 0; i < state->handCount[player]; i++)
       16:  335-block  0
      106:  335-block  1
branch  0 taken 85%
branch  1 taken 15%
       90:  335-block  2
        -:  336:    {
       90:  337:      if (state->hand[player][i] == card) count++;
       90:  337-block  0
branch  0 taken 13%
branch  1 taken 87%
       12:  337-block  1
       90:  338:    }
       90:  338-block  0
        -:  339:
       22:  340:  for (i = 0; i < state->discardCount[player]; i++)
       16:  340-block  0
       22:  340-block  1
branch  0 taken 27%
branch  1 taken 73%
        6:  340-block  2
        -:  341:    {
        6:  342:      if (state->discard[player][i] == card) count++;
        6:  342-block  0
branch  0 taken 67%
branch  1 taken 33%
        4:  342-block  1
        6:  343:    }
        6:  343-block  0
        -:  344:
       16:  345:  return count;
       16:  345-block  0
        -:  346:}
        -:  347:
function whoseTurn called 17 returned 100% blocks executed 100%
        -:  348:int whoseTurn(struct gameState *state) {
       17:  349:  return state->whoseTurn;
       17:  349-block  0
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  358-block  0
    $$$$$:  358-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  358-block  2
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    $$$$$:  361-block  0
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  365-block  0
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
    $$$$$:  367-block  0
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  369-block  0
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    $$$$$:  382-block  0
    $$$$$:  382-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  382-block  2
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
    $$$$$:  384-block  0
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
    $$$$$:  389-block  0
        -:  390:}
        -:  391:
function isGameOver called 6 returned 100% blocks executed 100%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        6:  397-block  0
branch  0 taken 33%
branch  1 taken 67%
        -:  398:    {
        2:  399:      return 1;
        2:  399-block  0
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        4:  404-block  0
      104:  404-block  1
branch  0 taken 96%
branch  1 taken 4%
      100:  404-block  2
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
      100:  406-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  407:	{
        6:  408:	  j++;
        6:  409:	}
        6:  409-block  0
      100:  410:    }
      100:  410-block  0
        4:  411:  if ( j >= 3)
        4:  411-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  412:    {
        2:  413:      return 1;
        2:  413-block  0
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        2:  416-block  0
        6:  417:}
        6:  417-block  0
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  424-block  0
    $$$$$:  424-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  2
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  430-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  430-block  1
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  431-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  431-block  1
    #####:  432:    }
    $$$$$:  432-block  0
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  435-block  0
    $$$$$:  435-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  2
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  441-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  441-block  1
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  442-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  442-block  1
    #####:  443:    }
    $$$$$:  443-block  0
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  446-block  0
    $$$$$:  446-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  2
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  452-block  1
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  453-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  453-block  1
    #####:  454:    }
    $$$$$:  454-block  0
        -:  455:
    #####:  456:  return score;
    $$$$$:  456-block  0
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  466-block  0
    $$$$$:  466-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  466-block  2
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
    $$$$$:  469-block  0
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
    $$$$$:  472-block  0
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
    $$$$$:  475-block  0
        -:  476:	}
    #####:  477:    }
    $$$$$:  477-block  0
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  481-block  0
    $$$$$:  481-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  481-block  2
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
    $$$$$:  483-block  0
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    $$$$$:  486-block  0
    #####:  487:    }
    $$$$$:  487-block  0
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  492-block  0
    $$$$$:  492-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  2
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  494-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  494-block  1
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    $$$$$:  497-block  0
    #####:  498:    }
    $$$$$:  498-block  0
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  502-block  0
    $$$$$:  502-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  502-block  2
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
    $$$$$:  504-block  0
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    $$$$$:  507-block  0
    #####:  508:    }
    $$$$$:  508-block  0
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  512-block  0
    $$$$$:  512-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  512-block  2
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
    $$$$$:  514-block  0
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
    $$$$$:  517-block  0
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
    $$$$$:  520-block  0
        -:  521:	}
    #####:  522:    }
    $$$$$:  522-block  0
        -:  523:
    #####:  524:  return 0;
    $$$$$:  524-block  0
        -:  525:}
        -:  526:
function drawCard called 127 returned 100% blocks executed 100%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      127:  530:  if (state->deckCount[player] <= 0){//Deck is empty
      127:  530-block  0
branch  0 taken 17%
branch  1 taken 83%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
       30:  535:    for (i = 0; i < state->discardCount[player];i++){
       21:  535-block  0
       30:  535-block  1
branch  0 taken 30%
branch  1 taken 70%
        9:  535-block  2
        9:  536:      state->deck[player][i] = state->discard[player][i];
        9:  537:      state->discard[player][i] = -1;
        9:  538:    }
        9:  538-block  0
        -:  539:
       21:  540:    state->deckCount[player] = state->discardCount[player];
       21:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
       21:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
       21:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
       21:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
       21:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
       21:  561:    if (deckCounter == 0)
       21:  561-block  0
branch  0 taken 86%
branch  1 taken 14%
       18:  562:      return -1;
       18:  562-block  0
        -:  563:
        3:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  565:    state->deckCount[player]--;
        3:  566:    state->handCount[player]++;//Increment hand count
        3:  567:  }
        3:  567-block  0
        -:  568:
        -:  569:  else{
      106:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
      106:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
      106:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      106:  578:    state->deckCount[player]--;
      106:  579:    state->handCount[player]++;//Increment hand count
      106:  579-block  0
        -:  580:  }
        -:  581:
      109:  582:  return 0;
      109:  582-block  0
      127:  583:}
      127:  583-block  0
        -:  584:
function getCost called 20 returned 100% blocks executed 25%
        -:  585:int getCost(int cardNumber)
        -:  586:{
       20:  587:  switch( cardNumber ) 
       20:  587-block  0
branch  0 taken 5%
branch  1 taken 0%
branch  2 taken 5%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 30%
branch  8 taken 30%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 30%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  588:    {
        -:  589:    case curse:
        1:  590:      return 0;
        1:  590-block  0
        -:  591:    case estate:
    #####:  592:      return 2;
    $$$$$:  592-block  0
        -:  593:    case duchy:
        1:  594:      return 5;
        1:  594-block  0
        -:  595:    case province:
    #####:  596:      return 8;
    $$$$$:  596-block  0
        -:  597:    case copper:
    #####:  598:      return 0;
    $$$$$:  598-block  0
        -:  599:    case silver:
    #####:  600:      return 3;
    $$$$$:  600-block  0
        -:  601:    case gold:
    #####:  602:      return 6;
    $$$$$:  602-block  0
        -:  603:    case adventurer:
        6:  604:      return 6;
        6:  604-block  0
        -:  605:    case council_room:
        6:  606:      return 5;
        6:  606-block  0
        -:  607:    case feast:
    #####:  608:      return 4;
    $$$$$:  608-block  0
        -:  609:    case gardens:
    #####:  610:      return 4;
    $$$$$:  610-block  0
        -:  611:    case mine:
    #####:  612:      return 5;
    $$$$$:  612-block  0
        -:  613:    case remodel:
    #####:  614:      return 4;
    $$$$$:  614-block  0
        -:  615:    case smithy:
        6:  616:      return 4;
        6:  616-block  0
        -:  617:    case village:
    #####:  618:      return 3;
    $$$$$:  618-block  0
        -:  619:    case baron:
    #####:  620:      return 4;
    $$$$$:  620-block  0
        -:  621:    case great_hall:
    #####:  622:      return 3;
    $$$$$:  622-block  0
        -:  623:    case minion:
    #####:  624:      return 5;
    $$$$$:  624-block  0
        -:  625:    case steward:
    #####:  626:      return 3;
    $$$$$:  626-block  0
        -:  627:    case tribute:
    #####:  628:      return 5;
    $$$$$:  628-block  0
        -:  629:    case ambassador:
    #####:  630:      return 3;
    $$$$$:  630-block  0
        -:  631:    case cutpurse:
    #####:  632:      return 4;
    $$$$$:  632-block  0
        -:  633:    case embargo: 
    #####:  634:      return 2;
    $$$$$:  634-block  0
        -:  635:    case outpost:
    #####:  636:      return 5;
    $$$$$:  636-block  0
        -:  637:    case salvager:
    #####:  638:      return 4;
    $$$$$:  638-block  0
        -:  639:    case sea_hag:
    #####:  640:      return 4;
    $$$$$:  640-block  0
        -:  641:    case treasure_map:
    #####:  642:      return 4;
    $$$$$:  642-block  0
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    $$$$$:  645-block  0
       20:  646:}
       20:  646-block  0
        -:  647:
        -:  648:
function SmithyCard called 8 returned 100% blocks executed 100%
        -:  649:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  650:
        -:  651:  //+3 Cards
        -:  652:  int i;
       48:  653:  for (i = 0; i < 5; i++)
        8:  653-block  0
       48:  653-block  1
branch  0 taken 83%
branch  1 taken 17%
       40:  653-block  2
        -:  654:  {
       40:  655:      drawCard(currentPlayer, state);
       40:  656:  }
       40:  656-block  0
        -:  657:   //discard card from hand
        -:  658:   //discardCard(handPos, currentPlayer, state, 0);
        8:  659:   return 0;
        8:  659-block  0
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:
        -:  662:}
        -:  663:
function AdventurerCard called 4 returned 100% blocks executed 100%
        -:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
       36:  666:  while(drawntreasure<5){
        4:  666-block  0
       36:  666-block  1
branch  0 taken 89%
branch  1 taken 11%
       32:  666-block  2
       32:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       32:  667-block  0
branch  0 taken 34%
branch  1 taken 66%
       11:  668:          shuffle(currentPlayer, state);
       11:  669:        }
       11:  669-block  0
       32:  670:        drawCard(currentPlayer, state);
       32:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       32:  672:        if (cardDrawn == gold || cardDrawn == silver || cardDrawn == copper)
       32:  672-block  0
branch  0 taken 100%
branch  1 taken 0%
       32:  672-block  1
branch  2 taken 100%
branch  3 taken 0%
       32:  672-block  2
branch  4 taken 63%
branch  5 taken 38%
       20:  673:		drawntreasure++;
       20:  673-block  0
        -:  674:        else{
       12:  675:          temphand[z]=cardDrawn;
       12:  676:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       12:  677:          z++;
       12:  677-block  0
        -:  678:        }
        -:  679:      }
       16:  680:      while(z-1>=0){
        4:  680-block  0
       16:  680-block  1
branch  0 taken 75%
branch  1 taken 25%
       12:  680-block  2
       12:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       12:  682:        z=z-1;
        -:  683:      }
        -:  684:
        4:  685:  return 0;
        4:  685-block  0
        -:  686:// bug introduced: player is able to draw 5 treasure cards instead of 2. 
        -:  687:}
        -:  688:
        -:  689:
function VillageCard called 0 returned 0% blocks executed 0%
        -:  690:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  691:
        -:  692:   //+1 Card
    #####:  693:   drawCard(currentPlayer, state);
    #####:  694:   drawCard(currentPlayer, state);	
    #####:  695:drawCard(currentPlayer, state);
        -:  696:
        -:  697:   //+2 Actions
    #####:  698:   state->numActions = state->numActions + 10;
        -:  699:  
        -:  700:    //discard played card from hand
    #####:  701:    discardCard(handPos, currentPlayer, state, 0);
        -:  702:
    #####:  703:  return 0; 
    $$$$$:  703-block  0
        -:  704:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1 
        -:  705:}
        -:  706:
function GreatHallCard called 0 returned 0% blocks executed 0%
        -:  707:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  708:
        -:  709:      //+1 Card
    #####:  710:      drawCard(currentPlayer, state);
        -:  711:
        -:  712:      //+1 Actions
    #####:  713:      state->numActions++;
        -:  714:
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
        -:  717:      
    #####:  718:      return 0;   
    $$$$$:  718-block  0
        -:  719:}
        -:  720:
function EmbargoCard called 0 returned 0% blocks executed 0%
        -:  721:int EmbargoCard(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  722:
    #####:  723:	state->coins = state->coins + 20;
        -:  724:
        -:  725:      //see if selected pile is in play
    #####:  726:       if ( state->supplyCount[choice1] == -1 )
    $$$$$:  726-block  0
branch  0 never executed
branch  1 never executed
        -:  727:          {
    #####:  728:             return -1;
    $$$$$:  728-block  0
        -:  729:          }
        -:  730:    
        -:  731:       //add embargo token to selected supply pile
    #####:  732:       state->embargoTokens[choice1]++;
    #####:  733:       state->embargoTokens[choice1]++;  
        -:  734:
        -:  735:      //trash card
    #####:  736:       discardCard(handPos, currentPlayer, state, 1);
        -:  737:
    #####:  738:	return 0; 
    $$$$$:  738-block  0
        -:  739://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
    #####:  740:}
    $$$$$:  740-block  0
        -:  741:
function cardEffect called 17 returned 100% blocks executed 14%
        -:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
       17:  749:  int currentPlayer = whoseTurn(state);
       17:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
       17:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
       17:  754:  int drawntreasure=0;
        -:  755:  int cardDrawn;
       17:  756:  int z = 0;// this is the counter for the temp hand
       17:  757:  if (nextPlayer > (state->numPlayers - 1)){
       17:  757-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  758:    nextPlayer = 0;
    #####:  759:  }
    $$$$$:  759-block  0
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
       17:  763:  switch( card ) 
       17:  763-block  0
branch  0 taken 24%
branch  1 taken 18%
branch  2 taken 12%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 47%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  764:    {
        -:  765:    case adventurer:
        -:  766:     
        -:  767:	//call function 
        4:  768:	AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
        4:  770:	return 0;
        4:  770-block  0
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
       15:  774:      for (i = 0; i < 4; i++)
        3:  774-block  0
       15:  774-block  1
branch  0 taken 80%
branch  1 taken 20%
       12:  774-block  2
        -:  775:	{
       12:  776:	  drawCard(currentPlayer, state);
       12:  777:	}
       12:  777-block  0
        -:  778:			
        -:  779:      //+1 Buy
        3:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
        9:  783:      for (i = 0; i < state->numPlayers; i++)
        3:  783-block  0
        9:  783-block  1
branch  0 taken 67%
branch  1 taken 33%
        6:  783-block  2
        -:  784:	{
        6:  785:	  if ( i != currentPlayer )
        6:  785-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  786:	    {
        3:  787:	      drawCard(i, state);
        3:  788:	    }
        3:  788-block  0
        6:  789:	}
        6:  789-block  0
        -:  790:			
        -:  791:      //put played card in played card pile
        3:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
        3:  794:      return 0;
        3:  794-block  0
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
       16:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        2:  799-block  0
       16:  799-block  1
branch  0 taken 88%
branch  1 taken 13%
       14:  799-block  2
       14:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       14:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
       14:  802:      }
       14:  802-block  0
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
        2:  806:      updateCoins(currentPlayer, state, 5);
        2:  807:      x = 1;//Condition to loop on
        4:  808:      while( x == 1) {//Buy one card
        2:  808-block  0
        4:  808-block  1
branch  0 taken 50%
branch  1 taken 50%
        2:  808-block  2
        2:  809:	if (supplyCount(choice1, state) <= 0){
        2:  809-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  810:	  if (DEBUG)
        -:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
    #####:  816:	}
    $$$$$:  816-block  0
        2:  817:	else if (state->coins < getCost(choice1)){
        2:  817-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
    #####:  823:	}
    $$$$$:  823-block  0
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
        2:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        2:  831:	  x = 0;//No more buying cards
        2:  831-block  0
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
       16:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        2:  841-block  0
       16:  841-block  1
branch  0 taken 88%
branch  1 taken 13%
       14:  841-block  2
       14:  842:	state->hand[currentPlayer][i] = temphand[i];
       14:  843:	temphand[i] = -1;
       14:  844:      }
       14:  844-block  0
        -:  845:      //Reset Hand
        -:  846:      			
        2:  847:      return 0;
        2:  847-block  0
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
    $$$$$:  850-block  0
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  855-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
    $$$$$:  857-block  0
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  860-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  860-block  1
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
    $$$$$:  862-block  0
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  865-block  0
branch  0 never executed
branch  1 never executed
        -:  866:	{
    #####:  867:	  return -1;
    $$$$$:  867-block  0
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  876-block  0
    $$$$$:  876-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  876-block  2
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  878-block  0
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
    $$$$$:  881-block  0
        -:  882:	    }
    #####:  883:	}
    $$$$$:  883-block  0
        -:  884:			
    #####:  885:      return 0;
    $$$$$:  885-block  0
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  890-block  0
branch  0 never executed
branch  1 never executed
        -:  891:	{
    #####:  892:	  return -1;
    $$$$$:  892-block  0
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  901-block  0
    $$$$$:  901-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  901-block  2
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  903-block  0
branch  0 never executed
branch  1 never executed
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
    $$$$$:  906-block  0
        -:  907:	    }
    #####:  908:	}
    $$$$$:  908-block  0
        -:  909:
        -:  910:
    #####:  911:      return 0;
    $$$$$:  911-block  0
        -:  912:		
        -:  913:    case smithy:
        8:  914:      	SmithyCard(currentPlayer, state, handPos);
        8:  915:	return 0;
        8:  915-block  0
        -:  916:		
        -:  917:    case village:
        -:  918:      
    #####:  919:	VillageCard(currentPlayer, state, handPos);
        -:  920:
    #####:  921:	return 0;
    $$$$$:  921-block  0
        -:  922:		
        -:  923:    case baron:
    #####:  924:      state->numBuys++;//Increase buys by 1!
    #####:  925:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  925-block  0
branch  0 never executed
branch  1 never executed
    #####:  926:	int p = 0;//Iterator for hand!
    #####:  927:	int card_not_discarded = 1;//Flag for discard set!
    #####:  928:	while(card_not_discarded){
    $$$$$:  928-block  0
    $$$$$:  928-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  928-block  2
    #####:  929:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  929-block  0
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  931:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  932:	    state->discardCount[currentPlayer]++;
    #####:  933:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  933-block  0
    $$$$$:  933-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  933-block  2
    #####:  934:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  935:	    }
    $$$$$:  935-block  0
    #####:  936:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  937:	    state->handCount[currentPlayer]--;
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
    $$$$$:  939-block  0
    #####:  940:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  940-block  0
branch  0 never executed
branch  1 never executed
        -:  941:	    if(DEBUG) {
        -:  942:	      printf("No estate cards in your hand, invalid choice\n");
        -:  943:	      printf("Must gain an estate if there are any\n");
        -:  944:	    }
    #####:  945:	    if (supplyCount(estate, state) > 0){
    $$$$$:  945-block  0
branch  0 never executed
branch  1 never executed
    #####:  946:	      gainCard(estate, state, 0, currentPlayer);
    #####:  947:	      state->supplyCount[estate]--;//Decrement estates
    #####:  948:	      if (supplyCount(estate, state) == 0){
    $$$$$:  948-block  0
branch  0 never executed
branch  1 never executed
    #####:  949:		isGameOver(state);
    #####:  950:	      }
    $$$$$:  950-block  0
    #####:  951:	    }
    $$$$$:  951-block  0
    #####:  952:	    card_not_discarded = 0;//Exit the loop
    #####:  953:	  }
    $$$$$:  953-block  0
        -:  954:			    
        -:  955:	  else{
    #####:  956:	    p++;//Next card
    $$$$$:  956-block  0
        -:  957:	  }
        -:  958:	}
    #####:  959:      }
    $$$$$:  959-block  0
        -:  960:			    
        -:  961:      else{
    #####:  962:	if (supplyCount(estate, state) > 0){
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
    #####:  963:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  964:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  965:	  if (supplyCount(estate, state) == 0){
    $$$$$:  965-block  0
branch  0 never executed
branch  1 never executed
    #####:  966:	    isGameOver(state);
    #####:  967:	  }
    $$$$$:  967-block  0
    #####:  968:	}
    $$$$$:  968-block  0
        -:  969:      }
        -:  970:	    
        -:  971:      
    #####:  972:      return 0;
    $$$$$:  972-block  0
        -:  973:		
        -:  974:    case great_hall:
        -:  975:      
    #####:  976:	GreatHallCard(currentPlayer, state, handPos);
        -:  977:
    #####:  978:	return 0;
    $$$$$:  978-block  0
        -:  979:		
        -:  980:    case minion:
        -:  981:      //+1 action
    #####:  982:      state->numActions++;
        -:  983:			
        -:  984:      //discard card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
        -:  986:			
    #####:  987:      if (choice1)		//+2 coins
    $$$$$:  987-block  0
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  state->coins = state->coins + 2;
    #####:  990:	}
    $$$$$:  990-block  0
        -:  991:			
    #####:  992:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  992-block  0
branch  0 never executed
branch  1 never executed
        -:  993:	{
        -:  994:	  //discard hand
    #####:  995:	  while(numHandCards(state) > 0)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  995-block  2
        -:  996:	    {
    #####:  997:	      discardCard(handPos, currentPlayer, state, 0);
        -:  998:	    }
        -:  999:				
        -: 1000:	  //draw 4
    #####: 1001:	  for (i = 0; i < 4; i++)
    $$$$$: 1001-block  0
    $$$$$: 1001-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1001-block  2
        -: 1002:	    {
    #####: 1003:	      drawCard(currentPlayer, state);
    #####: 1004:	    }
    $$$$$: 1004-block  0
        -: 1005:				
        -: 1006:	  //other players discard hand and redraw if hand size > 4
    #####: 1007:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1007-block  0
    $$$$$: 1007-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1007-block  2
        -: 1008:	    {
    #####: 1009:	      if (i != currentPlayer)
    $$$$$: 1009-block  0
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  if ( state->handCount[i] > 4 )
    $$$$$: 1011-block  0
branch  0 never executed
branch  1 never executed
        -: 1012:		    {
        -: 1013:		      //discard hand
    #####: 1014:		      while( state->handCount[i] > 0 )
    $$$$$: 1014-block  0
    $$$$$: 1014-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1014-block  2
        -: 1015:			{
    #####: 1016:			  discardCard(handPos, i, state, 0);
        -: 1017:			}
        -: 1018:							
        -: 1019:		      //draw 4
    #####: 1020:		      for (j = 0; j < 4; j++)
    $$$$$: 1020-block  0
    $$$$$: 1020-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1020-block  2
        -: 1021:			{
    #####: 1022:			  drawCard(i, state);
    #####: 1023:			}
    $$$$$: 1023-block  0
    #####: 1024:		    }
    $$$$$: 1024-block  0
    #####: 1025:		}
    $$$$$: 1025-block  0
    #####: 1026:	    }
    $$$$$: 1026-block  0
        -: 1027:				
    #####: 1028:	}
    $$$$$: 1028-block  0
    #####: 1029:      return 0;
    $$$$$: 1029-block  0
        -: 1030:		
        -: 1031:    case steward:
    #####: 1032:      if (choice1 == 1)
    $$$$$: 1032-block  0
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //+2 cards
    #####: 1035:	  drawCard(currentPlayer, state);
    #####: 1036:	  drawCard(currentPlayer, state);
    #####: 1037:	}
    $$$$$: 1037-block  0
    #####: 1038:      else if (choice1 == 2)
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
        -: 1039:	{
        -: 1040:	  //+2 coins
    #####: 1041:	  state->coins = state->coins + 2;
    #####: 1042:	}
    $$$$$: 1042-block  0
        -: 1043:      else
        -: 1044:	{
        -: 1045:	  //trash 2 cards in hand
    #####: 1046:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1047:	  discardCard(choice3, currentPlayer, state, 1);
    $$$$$: 1047-block  0
        -: 1048:	}
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1052:      return 0;
    $$$$$: 1052-block  0
        -: 1053:		
        -: 1054:    case tribute:
    #####: 1055:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
    #####: 1056:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
    #####: 1057:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	  state->deckCount[nextPlayer]--;
    #####: 1059:	}
    $$$$$: 1059-block  0
    #####: 1060:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1060-block  0
branch  0 never executed
branch  1 never executed
    #####: 1061:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1062:	  state->discardCount[nextPlayer]--;
    #####: 1063:	}
    $$$$$: 1063-block  0
        -: 1064:	else{
        -: 1065:	  //No Card to Reveal
        -: 1066:	  if (DEBUG){
        -: 1067:	    printf("No cards to reveal\n");
        -: 1068:	  }
        -: 1069:	}
    #####: 1070:      }
    $$$$$: 1070-block  0
        -: 1071:	    
        -: 1072:      else{
    #####: 1073:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    #####: 1074:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1074-block  0
    $$$$$: 1074-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1074-block  2
    #####: 1075:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1076:	    state->deckCount[nextPlayer]++;
    #####: 1077:	    state->discard[nextPlayer][i] = -1;
    #####: 1078:	    state->discardCount[nextPlayer]--;
    #####: 1079:	  }
    $$$$$: 1079-block  0
        -: 1080:			    
    #####: 1081:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1082:	} 
    $$$$$: 1082-block  0
    #####: 1083:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
    #####: 1086:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1088:	state->deckCount[nextPlayer]--;
    $$$$$: 1088-block  0
        -: 1089:      }    
        -: 1090:		       
    #####: 1091:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    #####: 1092:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1093:	state->playedCardCount++;
    #####: 1094:	tributeRevealedCards[1] = -1;
    #####: 1095:      }
    $$$$$: 1095-block  0
        -: 1096:
    #####: 1097:      for (i = 0; i <= 2; i ++){
    $$$$$: 1097-block  0
    $$$$$: 1097-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1097-block  2
    #####: 1098:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1098-block  2
branch  4 never executed
branch  5 never executed
    #####: 1099:	  state->coins += 2;
    #####: 1100:	}
    $$$$$: 1100-block  0
        -: 1101:		    
    #####: 1102:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1102-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1102-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1102-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1102-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1102-block  4
branch  8 never executed
branch  9 never executed
    #####: 1103:	  drawCard(currentPlayer, state);
    #####: 1104:	  drawCard(currentPlayer, state);
    #####: 1105:	}
    $$$$$: 1105-block  0
        -: 1106:	else{//Action Card
    #####: 1107:	  state->numActions = state->numActions + 2;
    $$$$$: 1107-block  0
        -: 1108:	}
    #####: 1109:      }
    $$$$$: 1109-block  0
        -: 1110:	    
    #####: 1111:      return 0;
    $$$$$: 1111-block  0
        -: 1112:		
        -: 1113:    case ambassador:
    #####: 1114:      j = 0;		//used to check if player has enough cards to discard
        -: 1115:
    #####: 1116:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1116-block  1
branch  2 never executed
branch  3 never executed
        -: 1117:	{
    #####: 1118:	  return -1;				
    $$$$$: 1118-block  0
        -: 1119:	}
        -: 1120:
    #####: 1121:      if (choice1 == handPos)
    $$$$$: 1121-block  0
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  return -1;
    $$$$$: 1123-block  0
        -: 1124:	}
        -: 1125:
    #####: 1126:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1126-block  0
    $$$$$: 1126-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1126-block  2
        -: 1127:	{
    #####: 1128:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1128-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1128-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1128-block  2
branch  4 never executed
branch  5 never executed
        -: 1129:	    {
    #####: 1130:	      j++;
    #####: 1131:	    }
    $$$$$: 1131-block  0
    #####: 1132:	}
    $$$$$: 1132-block  0
    #####: 1133:      if (j < choice2)
    $$$$$: 1133-block  0
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  return -1;				
    $$$$$: 1135-block  0
        -: 1136:	}
        -: 1137:
        -: 1138:      if (DEBUG) 
        -: 1139:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1140:
        -: 1141:      //increase supply count for choosen card by amount being discarded
    #####: 1142:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1143:			
        -: 1144:      //each other player gains a copy of revealed card
    #####: 1145:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1145-block  0
    $$$$$: 1145-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1145-block  2
        -: 1146:	{
    #####: 1147:	  if (i != currentPlayer)
    $$$$$: 1147-block  0
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1150:	    }
    $$$$$: 1150-block  0
    #####: 1151:	}
    $$$$$: 1151-block  0
        -: 1152:
        -: 1153:      //discard played card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1155:
        -: 1156:      //trash copies of cards returned to supply
    #####: 1157:      for (j = 0; j < choice2; j++)
    $$$$$: 1157-block  0
    $$$$$: 1157-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1157-block  2
        -: 1158:	{
    #####: 1159:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1159-block  0
    $$$$$: 1159-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1159-block  2
        -: 1160:	    {
    #####: 1161:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1161-block  0
branch  0 never executed
branch  1 never executed
        -: 1162:		{
    #####: 1163:		  discardCard(i, currentPlayer, state, 1);
    #####: 1164:		  break;
    $$$$$: 1164-block  0
        -: 1165:		}
    #####: 1166:	    }
    $$$$$: 1166-block  0
    #####: 1167:	}			
    $$$$$: 1167-block  0
        -: 1168:
    #####: 1169:      return 0;
    $$$$$: 1169-block  0
        -: 1170:		
        -: 1171:    case cutpurse:
        -: 1172:
    #####: 1173:      updateCoins(currentPlayer, state, 2);
    #####: 1174:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1174-block  0
    $$$$$: 1174-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1174-block  2
        -: 1175:	{
    #####: 1176:	  if (i != currentPlayer)
    $$$$$: 1176-block  0
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1178-block  0
    $$$$$: 1178-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1178-block  2
        -: 1179:		{
    #####: 1180:		  if (state->hand[i][j] == copper)
    $$$$$: 1180-block  0
branch  0 never executed
branch  1 never executed
        -: 1181:		    {
    #####: 1182:		      discardCard(j, i, state, 0);
    #####: 1183:		      break;
    $$$$$: 1183-block  0
        -: 1184:		    }
    #####: 1185:		  if (j == state->handCount[i])
    $$$$$: 1185-block  0
branch  0 never executed
branch  1 never executed
        -: 1186:		    {
    #####: 1187:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1187-block  0
    $$$$$: 1187-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1187-block  2
        -: 1188:			{
        -: 1189:			  if (DEBUG)
        -: 1190:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1191:			}	
    $$$$$: 1191-block  0
    #####: 1192:		      break;
    $$$$$: 1192-block  0
        -: 1193:		    }		
    #####: 1194:		}
    $$$$$: 1194-block  0
        -: 1195:					
    #####: 1196:	    }
    $$$$$: 1196-block  0
        -: 1197:				
    #####: 1198:	}				
    $$$$$: 1198-block  0
        -: 1199:
        -: 1200:      //discard played card from hand
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1202:
    #####: 1203:      return 0;
    $$$$$: 1203-block  0
        -: 1204:
        -: 1205:		
        -: 1206:    case embargo: 
        -: 1207:      
    #####: 1208:	EmbargoCard(currentPlayer, handPos, state, choice1); 
    #####: 1209:	return 0;
    $$$$$: 1209-block  0
        -: 1210:		
        -: 1211:    case outpost:
        -: 1212:      //set outpost flag
    #####: 1213:      state->outpostPlayed++;
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:      return 0;
    $$$$$: 1217-block  0
        -: 1218:		
        -: 1219:    case salvager:
        -: 1220:      //+1 buy
    #####: 1221:      state->numBuys++;
        -: 1222:			
    #####: 1223:      if (choice1)
    $$$$$: 1223-block  0
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //gain coins equal to trashed card
    #####: 1226:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1227:	  //trash card
    #####: 1228:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1229:	}
    $$$$$: 1229-block  0
        -: 1230:			
        -: 1231:      //discard card
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1233:      return 0;
    $$$$$: 1233-block  0
        -: 1234:		
        -: 1235:    case sea_hag:
    #####: 1236:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1236-block  0
    $$$$$: 1236-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1236-block  2
    #####: 1237:	if (i != currentPlayer){
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    #####: 1238:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1239:	  state->discardCount[i]++;
    #####: 1240:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1241:	}
    $$$$$: 1241-block  0
    #####: 1242:      }
    $$$$$: 1242-block  0
    #####: 1243:      return 0;
    $$$$$: 1243-block  0
        -: 1244:		
        -: 1245:    case treasure_map:
        -: 1246:      //search hand for another treasure_map
    #####: 1247:      index = -1;
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1248-block  0
    $$$$$: 1248-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1248-block  2
        -: 1249:	{
    #####: 1250:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1250-block  1
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      index = i;
    #####: 1253:	      break;
    $$$$$: 1253-block  0
        -: 1254:	    }
    #####: 1255:	}
    $$$$$: 1255-block  0
    #####: 1256:      if (index > -1)
    $$$$$: 1256-block  0
branch  0 never executed
branch  1 never executed
        -: 1257:	{
        -: 1258:	  //trash both treasure cards
    #####: 1259:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1260:	  discardCard(index, currentPlayer, state, 1);
        -: 1261:
        -: 1262:	  //gain 4 Gold cards
    #####: 1263:	  for (i = 0; i < 4; i++)
    $$$$$: 1263-block  0
    $$$$$: 1263-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1263-block  2
        -: 1264:	    {
    #####: 1265:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1266:	    }
    $$$$$: 1266-block  0
        -: 1267:				
        -: 1268:	  //return success
    #####: 1269:	  return 1;
    $$$$$: 1269-block  0
        -: 1270:	}
        -: 1271:			
        -: 1272:      //no second treasure_map found in hand
    #####: 1273:      return -1;
    $$$$$: 1273-block  0
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return -1;
    $$$$$: 1276-block  0
       17: 1277:}
       17: 1277-block  0
        -: 1278:
function discardCard called 3 returned 100% blocks executed 80%
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
        3: 1283:  if (trashFlag < 1)
        3: 1283-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 1284:    {
        -: 1285:      //add card to played pile
        3: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1287:      state->playedCardCount++;
        3: 1288:    }
        3: 1288-block  0
        -: 1289:	
        -: 1290:  //set played card to -1
        3: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
        3: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        3: 1294-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
    $$$$$: 1298-block  0
        3: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        3: 1299-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
    $$$$$: 1303-block  0
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
        3: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
        3: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
        3: 1311:      state->handCount[currentPlayer]--;
        3: 1311-block  0
        -: 1312:    }
        -: 1313:	
        3: 1314:  return 0;
        3: 1314-block  0
        -: 1315:}
        -: 1316:
function gainCard called 11 returned 100% blocks executed 81%
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
       11: 1322:  if ( supplyCount(supplyPos, state) < 1 )
       11: 1322-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1323:    {
    #####: 1324:      return -1;
    $$$$$: 1324-block  0
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
       11: 1332:  if (toFlag == 1)
       11: 1332-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
    $$$$$: 1336-block  0
       11: 1337:  else if (toFlag == 2)
       11: 1337-block  0
branch  0 taken 27%
branch  1 taken 73%
        -: 1338:    {
        3: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1340:      state->handCount[player]++;
        3: 1341:    }
        3: 1341-block  0
        -: 1342:  else
        -: 1343:    {
        8: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        8: 1345:      state->discardCount[player]++;
        8: 1345-block  0
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
       11: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
       11: 1351:  return 0;
       11: 1351-block  0
       11: 1352:}
       11: 1352-block  0
        -: 1353:
function updateCoins called 13 returned 100% blocks executed 100%
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
       13: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       71: 1362:  for (i = 0; i < state->handCount[player]; i++)
       13: 1362-block  0
       71: 1362-block  1
branch  0 taken 82%
branch  1 taken 18%
       58: 1362-block  2
        -: 1363:    {
       58: 1364:      if (state->hand[player][i] == copper)
       58: 1364-block  0
branch  0 taken 59%
branch  1 taken 41%
        -: 1365:	{
       34: 1366:	  state->coins += 1;
       34: 1367:	}
       34: 1367-block  0
       24: 1368:      else if (state->hand[player][i] == silver)
       24: 1368-block  0
branch  0 taken 8%
branch  1 taken 92%
        -: 1369:	{
        2: 1370:	  state->coins += 2;
        2: 1371:	}
        2: 1371-block  0
       22: 1372:      else if (state->hand[player][i] == gold)
       22: 1372-block  0
branch  0 taken 9%
branch  1 taken 91%
        -: 1373:	{
        2: 1374:	  state->coins += 3;
        2: 1375:	}	
        2: 1375-block  0
       58: 1376:    }	
       58: 1376-block  0
        -: 1377:
        -: 1378:  //add bonus
       13: 1379:  state->coins += bonus;
        -: 1380:
       13: 1381:  return 0;
       13: 1381-block  0
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
